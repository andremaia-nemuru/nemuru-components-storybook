'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var styles = require('@material-ui/styles');
var TextField = _interopDefault(require('@material-ui/core/TextField'));
var PropTypes = require('prop-types');
var PropTypes__default = _interopDefault(PropTypes);
var Slider = _interopDefault(require('@material-ui/core/Slider'));
var styles$1 = require('@material-ui/core/styles');
var core = require('@material-ui/core');
var MaterialTable = _interopDefault(require('material-table'));
var AppBar = _interopDefault(require('@material-ui/core/AppBar'));
var Container = _interopDefault(require('@material-ui/core/Container'));
var Toolbar = _interopDefault(require('@material-ui/core/Toolbar'));
var Paper = _interopDefault(require('@material-ui/core/Paper'));
var useTheme = _interopDefault(require('@material-ui/core/styles/useTheme'));
var CircularProgress = _interopDefault(require('@material-ui/core/CircularProgress'));
require('@material-ui/core/Typography');
var Box = _interopDefault(require('@material-ui/core/Box'));
var pickers = require('@material-ui/pickers');
var DateFnsUtils = _interopDefault(require('@date-io/date-fns'));
var reactHookForm = require('react-hook-form');
var Alert = _interopDefault(require('@material-ui/lab/Alert'));
var nemuruComponents = require('nemuru-components');
var LinearProgress = _interopDefault(require('@material-ui/core/LinearProgress'));

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

/**
 * react-number-format - 4.4.1
 * Author : Sudhanshu Yadav
 * Copyright (c) 2016, 2020 to Sudhanshu Yadav, released under the MIT license.
 * https://github.com/s-yadav/react-number-format
 */

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

{
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

// basic noop function
function noop() {}
function returnTrue() {
  return true;
}
function charIsNumber(_char) {
  return !!(_char || '').match(/\d/);
}
function escapeRegExp(str) {
  return str.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
}
function getThousandsGroupRegex(thousandsGroupStyle) {
  switch (thousandsGroupStyle) {
    case 'lakh':
      return /(\d+?)(?=(\d\d)+(\d)(?!\d))(\.\d+)?/g;

    case 'wan':
      return /(\d)(?=(\d{4})+(?!\d))/g;

    case 'thousand':
    default:
      return /(\d)(?=(\d{3})+(?!\d))/g;
  }
}
function applyThousandSeparator(str, thousandSeparator, thousandsGroupStyle) {
  var thousandsGroupRegex = getThousandsGroupRegex(thousandsGroupStyle);
  var index = str.search(/[1-9]/);
  index = index === -1 ? str.length : index;
  return str.substring(0, index) + str.substring(index, str.length).replace(thousandsGroupRegex, '$1' + thousandSeparator);
} //spilt a float number into different parts beforeDecimal, afterDecimal, and negation

function splitDecimal(numStr) {
  var allowNegative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var hasNagation = numStr[0] === '-';
  var addNegation = hasNagation && allowNegative;
  numStr = numStr.replace('-', '');
  var parts = numStr.split('.');
  var beforeDecimal = parts[0];
  var afterDecimal = parts[1] || '';
  return {
    beforeDecimal: beforeDecimal,
    afterDecimal: afterDecimal,
    hasNagation: hasNagation,
    addNegation: addNegation
  };
}
function fixLeadingZero(numStr) {
  if (!numStr) return numStr;
  var isNegative = numStr[0] === '-';
  if (isNegative) numStr = numStr.substring(1, numStr.length);
  var parts = numStr.split('.');
  var beforeDecimal = parts[0].replace(/^0+/, '') || '0';
  var afterDecimal = parts[1] || '';
  return "".concat(isNegative ? '-' : '').concat(beforeDecimal).concat(afterDecimal ? ".".concat(afterDecimal) : '');
}
/**
 * limit decimal numbers to given scale
 * Not used .fixedTo because that will break with big numbers
 */

function limitToScale(numStr, scale, fixedDecimalScale) {
  var str = '';
  var filler = fixedDecimalScale ? '0' : '';

  for (var i = 0; i <= scale - 1; i++) {
    str += numStr[i] || filler;
  }

  return str;
}
/**
 * This method is required to round prop value to given scale.
 * Not used .round or .fixedTo because that will break with big numbers
 */

function roundToPrecision(numStr, scale, fixedDecimalScale) {
  //if number is empty don't do anything return empty string
  if (['', '-'].indexOf(numStr) !== -1) return numStr;
  var shoudHaveDecimalSeparator = numStr.indexOf('.') !== -1 && scale;

  var _splitDecimal = splitDecimal(numStr),
      beforeDecimal = _splitDecimal.beforeDecimal,
      afterDecimal = _splitDecimal.afterDecimal,
      hasNagation = _splitDecimal.hasNagation;

  var roundedDecimalParts = parseFloat("0.".concat(afterDecimal || '0')).toFixed(scale).split('.');
  var intPart = beforeDecimal.split('').reverse().reduce(function (roundedStr, current, idx) {
    if (roundedStr.length > idx) {
      return (Number(roundedStr[0]) + Number(current)).toString() + roundedStr.substring(1, roundedStr.length);
    }

    return current + roundedStr;
  }, roundedDecimalParts[0]);
  var decimalPart = limitToScale(roundedDecimalParts[1] || '', Math.min(scale, afterDecimal.length), fixedDecimalScale);
  var negation = hasNagation ? '-' : '';
  var decimalSeparator = shoudHaveDecimalSeparator ? '.' : '';
  return "".concat(negation).concat(intPart).concat(decimalSeparator).concat(decimalPart);
}
function omit(obj, keyMaps) {
  var filteredObj = {};
  Object.keys(obj).forEach(function (key) {
    if (!keyMaps[key]) filteredObj[key] = obj[key];
  });
  return filteredObj;
}
/** set the caret positon in an input field **/

function setCaretPosition(el, caretPos) {
  el.value = el.value; // ^ this is used to not only get "focus", but
  // to make sure we don't have it everything -selected-
  // (it causes an issue in chrome, and having it doesn't hurt any other browser)

  if (el !== null) {
    if (el.createTextRange) {
      var range = el.createTextRange();
      range.move('character', caretPos);
      range.select();
      return true;
    } // (el.selectionStart === 0 added for Firefox bug)


    if (el.selectionStart || el.selectionStart === 0) {
      el.focus();
      el.setSelectionRange(caretPos, caretPos);
      return true;
    } // fail city, fortunately this never happens (as far as I've tested) :)


    el.focus();
    return false;
  }
}
/**
  Given previous value and newValue it returns the index
  start - end to which values have changed.
  This function makes assumption about only consecutive
  characters are changed which is correct assumption for caret input.
*/

function findChangedIndex(prevValue, newValue) {
  var i = 0,
      j = 0;
  var prevLength = prevValue.length;
  var newLength = newValue.length;

  while (prevValue[i] === newValue[i] && i < prevLength) {
    i++;
  } //check what has been changed from last


  while (prevValue[prevLength - 1 - j] === newValue[newLength - 1 - j] && newLength - j > i && prevLength - j > i) {
    j++;
  }

  return {
    start: i,
    end: prevLength - j
  };
}
/*
  Returns a number whose value is limited to the given range
*/

function clamp(num, min, max) {
  return Math.min(Math.max(num, min), max);
}
function getCurrentCaretPosition(el) {
  /*Max of selectionStart and selectionEnd is taken for the patch of pixel and other mobile device caret bug*/
  return Math.max(el.selectionStart, el.selectionEnd);
}

var propTypes$1 = {
  thousandSeparator: propTypes.oneOfType([propTypes.string, propTypes.oneOf([true])]),
  decimalSeparator: propTypes.string,
  allowedDecimalSeparators: propTypes.arrayOf(propTypes.string),
  thousandsGroupStyle: propTypes.oneOf(['thousand', 'lakh', 'wan']),
  decimalScale: propTypes.number,
  fixedDecimalScale: propTypes.bool,
  displayType: propTypes.oneOf(['input', 'text']),
  prefix: propTypes.string,
  suffix: propTypes.string,
  format: propTypes.oneOfType([propTypes.string, propTypes.func]),
  removeFormatting: propTypes.func,
  mask: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),
  value: propTypes.oneOfType([propTypes.number, propTypes.string]),
  defaultValue: propTypes.oneOfType([propTypes.number, propTypes.string]),
  isNumericString: propTypes.bool,
  customInput: propTypes.elementType,
  allowNegative: propTypes.bool,
  allowEmptyFormatting: propTypes.bool,
  allowLeadingZeros: propTypes.bool,
  onValueChange: propTypes.func,
  onKeyDown: propTypes.func,
  onMouseUp: propTypes.func,
  onChange: propTypes.func,
  onFocus: propTypes.func,
  onBlur: propTypes.func,
  type: propTypes.oneOf(['text', 'tel', 'password']),
  isAllowed: propTypes.func,
  renderText: propTypes.func,
  getInputRef: propTypes.oneOfType([propTypes.func, // for legacy refs
  propTypes.shape({
    current: propTypes.any
  })])
};
var defaultProps = {
  displayType: 'input',
  decimalSeparator: '.',
  thousandsGroupStyle: 'thousand',
  fixedDecimalScale: false,
  prefix: '',
  suffix: '',
  allowNegative: true,
  allowEmptyFormatting: false,
  allowLeadingZeros: false,
  isNumericString: false,
  type: 'text',
  onValueChange: noop,
  onChange: noop,
  onKeyDown: noop,
  onMouseUp: noop,
  onFocus: noop,
  onBlur: noop,
  isAllowed: returnTrue
};

var NumberFormat =
/*#__PURE__*/
function (_React$Component) {
  _inherits(NumberFormat, _React$Component);

  function NumberFormat(props) {
    var _this;

    _classCallCheck(this, NumberFormat);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NumberFormat).call(this, props));
    var defaultValue = props.defaultValue; //validate props

    _this.validateProps();

    var formattedValue = _this.formatValueProp(defaultValue);

    _this.state = {
      value: formattedValue,
      numAsString: _this.removeFormatting(formattedValue)
    };
    _this.selectionBeforeInput = {
      selectionStart: 0,
      selectionEnd: 0
    };
    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));
    _this.onMouseUp = _this.onMouseUp.bind(_assertThisInitialized(_this));
    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));
    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(NumberFormat, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.updateValueIfRequired(prevProps);
    }
  }, {
    key: "updateValueIfRequired",
    value: function updateValueIfRequired(prevProps) {
      var props = this.props,
          state = this.state,
          focusedElm = this.focusedElm;
      var stateValue = state.value,
          _state$numAsString = state.numAsString,
          lastNumStr = _state$numAsString === void 0 ? '' : _state$numAsString; // If only state changed no need to do any thing

      if (prevProps !== props) {
        //validate props
        this.validateProps();
        var lastValueWithNewFormat = this.formatNumString(lastNumStr);
        var formattedValue = props.value === undefined ? lastValueWithNewFormat : this.formatValueProp();
        var numAsString = this.removeFormatting(formattedValue);
        var floatValue = parseFloat(numAsString);
        var lastFloatValue = parseFloat(lastNumStr);

        if ( //while typing set state only when float value changes
        (!isNaN(floatValue) || !isNaN(lastFloatValue)) && floatValue !== lastFloatValue || //can also set state when float value is same and the format props changes
        lastValueWithNewFormat !== stateValue || //set state always when not in focus and formatted value is changed
        focusedElm === null && formattedValue !== stateValue) {
          this.updateValue({
            formattedValue: formattedValue,
            numAsString: numAsString,
            input: focusedElm
          });
        }
      }
    }
    /** Misc methods **/

  }, {
    key: "getFloatString",
    value: function getFloatString() {
      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var decimalScale = this.props.decimalScale;

      var _this$getSeparators = this.getSeparators(),
          decimalSeparator = _this$getSeparators.decimalSeparator;

      var numRegex = this.getNumberRegex(true); //remove negation for regex check

      var hasNegation = num[0] === '-';
      if (hasNegation) num = num.replace('-', ''); //if decimal scale is zero remove decimal and number after decimalSeparator

      if (decimalSeparator && decimalScale === 0) {
        num = num.split(decimalSeparator)[0];
      }

      num = (num.match(numRegex) || []).join('').replace(decimalSeparator, '.'); //remove extra decimals

      var firstDecimalIndex = num.indexOf('.');

      if (firstDecimalIndex !== -1) {
        num = "".concat(num.substring(0, firstDecimalIndex), ".").concat(num.substring(firstDecimalIndex + 1, num.length).replace(new RegExp(escapeRegExp(decimalSeparator), 'g'), ''));
      } //add negation back


      if (hasNegation) num = '-' + num;
      return num;
    } //returned regex assumes decimalSeparator is as per prop

  }, {
    key: "getNumberRegex",
    value: function getNumberRegex(g, ignoreDecimalSeparator) {
      var _this$props = this.props,
          format = _this$props.format,
          decimalScale = _this$props.decimalScale;

      var _this$getSeparators2 = this.getSeparators(),
          decimalSeparator = _this$getSeparators2.decimalSeparator;

      return new RegExp('\\d' + (decimalSeparator && decimalScale !== 0 && !ignoreDecimalSeparator && !format ? '|' + escapeRegExp(decimalSeparator) : ''), g ? 'g' : undefined);
    }
  }, {
    key: "getSeparators",
    value: function getSeparators() {
      var decimalSeparator = this.props.decimalSeparator;
      var _this$props2 = this.props,
          thousandSeparator = _this$props2.thousandSeparator,
          allowedDecimalSeparators = _this$props2.allowedDecimalSeparators;

      if (thousandSeparator === true) {
        thousandSeparator = ',';
      }

      if (!allowedDecimalSeparators) {
        allowedDecimalSeparators = [decimalSeparator, '.'];
      }

      return {
        decimalSeparator: decimalSeparator,
        thousandSeparator: thousandSeparator,
        allowedDecimalSeparators: allowedDecimalSeparators
      };
    }
  }, {
    key: "getMaskAtIndex",
    value: function getMaskAtIndex(index) {
      var _this$props$mask = this.props.mask,
          mask = _this$props$mask === void 0 ? ' ' : _this$props$mask;

      if (typeof mask === 'string') {
        return mask;
      }

      return mask[index] || ' ';
    }
  }, {
    key: "getValueObject",
    value: function getValueObject(formattedValue, numAsString) {
      var floatValue = parseFloat(numAsString);
      return {
        formattedValue: formattedValue,
        value: numAsString,
        floatValue: isNaN(floatValue) ? undefined : floatValue
      };
    }
  }, {
    key: "validateProps",
    value: function validateProps() {
      var mask = this.props.mask; //validate decimalSeparator and thousandSeparator

      var _this$getSeparators3 = this.getSeparators(),
          decimalSeparator = _this$getSeparators3.decimalSeparator,
          thousandSeparator = _this$getSeparators3.thousandSeparator;

      if (decimalSeparator === thousandSeparator) {
        throw new Error("\n          Decimal separator can't be same as thousand separator.\n          thousandSeparator: ".concat(thousandSeparator, " (thousandSeparator = {true} is same as thousandSeparator = \",\")\n          decimalSeparator: ").concat(decimalSeparator, " (default value for decimalSeparator is .)\n       "));
      } //validate mask


      if (mask) {
        var maskAsStr = mask === 'string' ? mask : mask.toString();

        if (maskAsStr.match(/\d/g)) {
          throw new Error("\n          Mask ".concat(mask, " should not contain numeric character;\n        "));
        }
      }
    }
    /** Misc methods end **/

    /** caret specific methods **/

  }, {
    key: "setPatchedCaretPosition",
    value: function setPatchedCaretPosition(el, caretPos, currentValue) {
      /* setting caret position within timeout of 0ms is required for mobile chrome,
      otherwise browser resets the caret position after we set it
      We are also setting it without timeout so that in normal browser we don't see the flickering */
      setCaretPosition(el, caretPos);
      setTimeout(function () {
        if (el.value === currentValue) setCaretPosition(el, caretPos);
      }, 0);
    }
    /* This keeps the caret within typing area so people can't type in between prefix or suffix */

  }, {
    key: "correctCaretPosition",
    value: function correctCaretPosition(value, caretPos, direction) {
      var _this$props3 = this.props,
          prefix = _this$props3.prefix,
          suffix = _this$props3.suffix,
          format = _this$props3.format; //if value is empty return 0

      if (value === '') return 0; //caret position should be between 0 and value length

      caretPos = clamp(caretPos, 0, value.length); //in case of format as number limit between prefix and suffix

      if (!format) {
        var hasNegation = value[0] === '-';
        return clamp(caretPos, prefix.length + (hasNegation ? 1 : 0), value.length - suffix.length);
      } //in case if custom format method don't do anything


      if (typeof format === 'function') return caretPos;
      /* in case format is string find the closest # position from the caret position */
      //in case the caretPos have input value on it don't do anything

      if (format[caretPos] === '#' && charIsNumber(value[caretPos])) return caretPos; //if caretPos is just after input value don't do anything

      if (format[caretPos - 1] === '#' && charIsNumber(value[caretPos - 1])) return caretPos; //find the nearest caret position

      var firstHashPosition = format.indexOf('#');
      var lastHashPosition = format.lastIndexOf('#'); //limit the cursor between the first # position and the last # position

      caretPos = clamp(caretPos, firstHashPosition, lastHashPosition + 1);
      var nextPos = format.substring(caretPos, format.length).indexOf('#');
      var caretLeftBound = caretPos;
      var caretRightBound = caretPos + (nextPos === -1 ? 0 : nextPos); //get the position where the last number is present

      while (caretLeftBound > firstHashPosition && (format[caretLeftBound] !== '#' || !charIsNumber(value[caretLeftBound]))) {
        caretLeftBound -= 1;
      }

      var goToLeft = !charIsNumber(value[caretRightBound]) || direction === 'left' && caretPos !== firstHashPosition || caretPos - caretLeftBound < caretRightBound - caretPos;

      if (goToLeft) {
        //check if number should be taken after the bound or after it
        //if number preceding a valid number keep it after
        return charIsNumber(value[caretLeftBound]) ? caretLeftBound + 1 : caretLeftBound;
      }

      return caretRightBound;
    }
  }, {
    key: "getCaretPosition",
    value: function getCaretPosition(inputValue, formattedValue, caretPos) {
      var format = this.props.format;
      var stateValue = this.state.value;
      var numRegex = this.getNumberRegex(true);
      var inputNumber = (inputValue.match(numRegex) || []).join('');
      var formattedNumber = (formattedValue.match(numRegex) || []).join('');
      var j, i;
      j = 0;

      for (i = 0; i < caretPos; i++) {
        var currentInputChar = inputValue[i] || '';
        var currentFormatChar = formattedValue[j] || ''; //no need to increase new cursor position if formatted value does not have those characters
        //case inputValue = 1a23 and formattedValue =  123

        if (!currentInputChar.match(numRegex) && currentInputChar !== currentFormatChar) continue; //When we are striping out leading zeros maintain the new cursor position
        //Case inputValue = 00023 and formattedValue = 23;

        if (currentInputChar === '0' && currentFormatChar.match(numRegex) && currentFormatChar !== '0' && inputNumber.length !== formattedNumber.length) continue; //we are not using currentFormatChar because j can change here

        while (currentInputChar !== formattedValue[j] && j < formattedValue.length) {
          j++;
        }

        j++;
      }

      if (typeof format === 'string' && !stateValue) {
        //set it to the maximum value so it goes after the last number
        j = formattedValue.length;
      } //correct caret position if its outside of editable area


      j = this.correctCaretPosition(formattedValue, j);
      return j;
    }
    /** caret specific methods ends **/

    /** methods to remove formattting **/

  }, {
    key: "removePrefixAndSuffix",
    value: function removePrefixAndSuffix(val) {
      var _this$props4 = this.props,
          format = _this$props4.format,
          prefix = _this$props4.prefix,
          suffix = _this$props4.suffix; //remove prefix and suffix

      if (!format && val) {
        var isNegative = val[0] === '-'; //remove negation sign

        if (isNegative) val = val.substring(1, val.length); //remove prefix

        val = prefix && val.indexOf(prefix) === 0 ? val.substring(prefix.length, val.length) : val; //remove suffix

        var suffixLastIndex = val.lastIndexOf(suffix);
        val = suffix && suffixLastIndex !== -1 && suffixLastIndex === val.length - suffix.length ? val.substring(0, suffixLastIndex) : val; //add negation sign back

        if (isNegative) val = '-' + val;
      }

      return val;
    }
  }, {
    key: "removePatternFormatting",
    value: function removePatternFormatting(val) {
      var format = this.props.format;
      var formatArray = format.split('#').filter(function (str) {
        return str !== '';
      });
      var start = 0;
      var numStr = '';

      for (var i = 0, ln = formatArray.length; i <= ln; i++) {
        var part = formatArray[i] || ''; //if i is the last fragment take the index of end of the value
        //For case like +1 (911) 911 91 91 having pattern +1 (###) ### ## ##

        var index = i === ln ? val.length : val.indexOf(part, start);
        /* in any case if we don't find the pattern part in the value assume the val as numeric string
        This will be also in case if user has started typing, in any other case it will not be -1
        unless wrong prop value is provided */

        if (index === -1) {
          numStr = val;
          break;
        } else {
          numStr += val.substring(start, index);
          start = index + part.length;
        }
      }

      return (numStr.match(/\d/g) || []).join('');
    }
  }, {
    key: "removeFormatting",
    value: function removeFormatting(val) {
      var _this$props5 = this.props,
          format = _this$props5.format,
          removeFormatting = _this$props5.removeFormatting;
      if (!val) return val;

      if (!format) {
        val = this.removePrefixAndSuffix(val);
        val = this.getFloatString(val);
      } else if (typeof format === 'string') {
        val = this.removePatternFormatting(val);
      } else if (typeof removeFormatting === 'function') {
        //condition need to be handled if format method is provide,
        val = removeFormatting(val);
      } else {
        val = (val.match(/\d/g) || []).join('');
      }

      return val;
    }
    /** methods to remove formattting end **/

    /*** format specific methods start ***/

    /**
     * Format when # based string is provided
     * @param  {string} numStr Numeric String
     * @return {string}        formatted Value
     */

  }, {
    key: "formatWithPattern",
    value: function formatWithPattern(numStr) {
      var format = this.props.format;
      var hashCount = 0;
      var formattedNumberAry = format.split('');

      for (var i = 0, ln = format.length; i < ln; i++) {
        if (format[i] === '#') {
          formattedNumberAry[i] = numStr[hashCount] || this.getMaskAtIndex(hashCount);
          hashCount += 1;
        }
      }

      return formattedNumberAry.join('');
    }
    /**
     * @param  {string} numStr Numeric string/floatString] It always have decimalSeparator as .
     * @return {string} formatted Value
     */

  }, {
    key: "formatAsNumber",
    value: function formatAsNumber(numStr) {
      var _this$props6 = this.props,
          decimalScale = _this$props6.decimalScale,
          fixedDecimalScale = _this$props6.fixedDecimalScale,
          prefix = _this$props6.prefix,
          suffix = _this$props6.suffix,
          allowNegative = _this$props6.allowNegative,
          thousandsGroupStyle = _this$props6.thousandsGroupStyle;

      var _this$getSeparators4 = this.getSeparators(),
          thousandSeparator = _this$getSeparators4.thousandSeparator,
          decimalSeparator = _this$getSeparators4.decimalSeparator;

      var hasDecimalSeparator = numStr.indexOf('.') !== -1 || decimalScale && fixedDecimalScale;

      var _splitDecimal = splitDecimal(numStr, allowNegative),
          beforeDecimal = _splitDecimal.beforeDecimal,
          afterDecimal = _splitDecimal.afterDecimal,
          addNegation = _splitDecimal.addNegation; // eslint-disable-line prefer-const
      //apply decimal precision if its defined


      if (decimalScale !== undefined) afterDecimal = limitToScale(afterDecimal, decimalScale, fixedDecimalScale);

      if (thousandSeparator) {
        beforeDecimal = applyThousandSeparator(beforeDecimal, thousandSeparator, thousandsGroupStyle);
      } //add prefix and suffix


      if (prefix) beforeDecimal = prefix + beforeDecimal;
      if (suffix) afterDecimal = afterDecimal + suffix; //restore negation sign

      if (addNegation) beforeDecimal = '-' + beforeDecimal;
      numStr = beforeDecimal + (hasDecimalSeparator && decimalSeparator || '') + afterDecimal;
      return numStr;
    }
  }, {
    key: "formatNumString",
    value: function formatNumString() {
      var numStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var _this$props7 = this.props,
          format = _this$props7.format,
          allowEmptyFormatting = _this$props7.allowEmptyFormatting;
      var formattedValue = numStr;

      if (numStr === '' && !allowEmptyFormatting) {
        formattedValue = '';
      } else if (numStr === '-' && !format) {
        formattedValue = '-';
      } else if (typeof format === 'string') {
        formattedValue = this.formatWithPattern(formattedValue);
      } else if (typeof format === 'function') {
        formattedValue = format(formattedValue);
      } else {
        formattedValue = this.formatAsNumber(formattedValue);
      }

      return formattedValue;
    }
  }, {
    key: "formatValueProp",
    value: function formatValueProp(defaultValue) {
      var _this$props8 = this.props,
          format = _this$props8.format,
          decimalScale = _this$props8.decimalScale,
          fixedDecimalScale = _this$props8.fixedDecimalScale,
          allowEmptyFormatting = _this$props8.allowEmptyFormatting;
      var _this$props9 = this.props,
          _this$props9$value = _this$props9.value,
          value = _this$props9$value === void 0 ? defaultValue : _this$props9$value,
          isNumericString = _this$props9.isNumericString;
      var isNonNumericFalsy = !value && value !== 0;

      if (isNonNumericFalsy && allowEmptyFormatting) {
        value = '';
      } // if value is not defined return empty string


      if (isNonNumericFalsy && !allowEmptyFormatting) return '';

      if (typeof value === 'number') {
        value = value.toString();
        isNumericString = true;
      } //change infinity value to empty string


      if (value === 'Infinity' && isNumericString) {
        value = '';
      } //round the number based on decimalScale
      //format only if non formatted value is provided


      if (isNumericString && !format && typeof decimalScale === 'number') {
        value = roundToPrecision(value, decimalScale, fixedDecimalScale);
      }

      var formattedValue = isNumericString ? this.formatNumString(value) : this.formatInput(value);
      return formattedValue;
    }
  }, {
    key: "formatNegation",
    value: function formatNegation() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var allowNegative = this.props.allowNegative;
      var negationRegex = new RegExp('(-)');
      var doubleNegationRegex = new RegExp('(-)(.)*(-)'); // Check number has '-' value

      var hasNegation = negationRegex.test(value); // Check number has 2 or more '-' values

      var removeNegation = doubleNegationRegex.test(value); //remove negation

      value = value.replace(/-/g, '');

      if (hasNegation && !removeNegation && allowNegative) {
        value = '-' + value;
      }

      return value;
    }
  }, {
    key: "formatInput",
    value: function formatInput() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var format = this.props.format; //format negation only if we are formatting as number

      if (!format) {
        value = this.removePrefixAndSuffix(value);
        value = this.formatNegation(value);
      } //remove formatting from number


      value = this.removeFormatting(value);
      return this.formatNumString(value);
    }
    /*** format specific methods end ***/

  }, {
    key: "isCharacterAFormat",
    value: function isCharacterAFormat(caretPos, value) {
      var _this$props10 = this.props,
          format = _this$props10.format,
          prefix = _this$props10.prefix,
          suffix = _this$props10.suffix,
          decimalScale = _this$props10.decimalScale,
          fixedDecimalScale = _this$props10.fixedDecimalScale;

      var _this$getSeparators5 = this.getSeparators(),
          decimalSeparator = _this$getSeparators5.decimalSeparator; //check within format pattern


      if (typeof format === 'string' && format[caretPos] !== '#') return true; //check in number format

      if (!format && (caretPos < prefix.length || caretPos >= value.length - suffix.length || decimalScale && fixedDecimalScale && value[caretPos] === decimalSeparator)) {
        return true;
      }

      return false;
    }
  }, {
    key: "checkIfFormatGotDeleted",
    value: function checkIfFormatGotDeleted(start, end, value) {
      for (var i = start; i < end; i++) {
        if (this.isCharacterAFormat(i, value)) return true;
      }

      return false;
    }
    /**
     * This will check if any formatting got removed by the delete or backspace and reset the value
     * It will also work as fallback if android chome keyDown handler does not work
     **/

  }, {
    key: "correctInputValue",
    value: function correctInputValue(caretPos, lastValue, value) {
      var _this$props11 = this.props,
          format = _this$props11.format,
          allowNegative = _this$props11.allowNegative,
          prefix = _this$props11.prefix,
          suffix = _this$props11.suffix,
          decimalScale = _this$props11.decimalScale;

      var _this$getSeparators6 = this.getSeparators(),
          allowedDecimalSeparators = _this$getSeparators6.allowedDecimalSeparators,
          decimalSeparator = _this$getSeparators6.decimalSeparator;

      var lastNumStr = this.state.numAsString || '';
      var _this$selectionBefore = this.selectionBeforeInput,
          selectionStart = _this$selectionBefore.selectionStart,
          selectionEnd = _this$selectionBefore.selectionEnd;

      var _findChangedIndex = findChangedIndex(lastValue, value),
          start = _findChangedIndex.start,
          end = _findChangedIndex.end;
      /** Check for any allowed decimal separator is added in the numeric format and replace it with decimal separator */


      if (!format && start === end && allowedDecimalSeparators.indexOf(value[selectionStart]) !== -1) {
        var separator = decimalScale === 0 ? '' : decimalSeparator;
        return value.substr(0, selectionStart) + separator + value.substr(selectionStart + 1, value.length);
      }
      /* don't do anyhting if something got added,
       or if value is empty string (when whole input is cleared)
       or whole input is replace with a number
      */


      var leftBound = !!format ? 0 : prefix.length;
      var rightBound = lastValue.length - (!!format ? 0 : suffix.length);

      if (value.length > lastValue.length || !value.length || start === end || selectionStart === 0 && selectionEnd === lastValue.length || selectionStart === leftBound && selectionEnd === rightBound) {
        return value;
      } //if format got deleted reset the value to last value


      if (this.checkIfFormatGotDeleted(start, end, lastValue)) {
        value = lastValue;
      } //for numbers check if beforeDecimal got deleted and there is nothing after decimal,
      //clear all numbers in such case while keeping the - sign


      if (!format) {
        var numericString = this.removeFormatting(value);

        var _splitDecimal2 = splitDecimal(numericString, allowNegative),
            beforeDecimal = _splitDecimal2.beforeDecimal,
            afterDecimal = _splitDecimal2.afterDecimal,
            addNegation = _splitDecimal2.addNegation; // eslint-disable-line prefer-const
        //clear only if something got deleted


        var isBeforeDecimalPoint = caretPos < value.indexOf(decimalSeparator) + 1;

        if (numericString.length < lastNumStr.length && isBeforeDecimalPoint && beforeDecimal === '' && !parseFloat(afterDecimal)) {
          return addNegation ? '-' : '';
        }
      }

      return value;
    }
    /** Update value and caret position */

  }, {
    key: "updateValue",
    value: function updateValue(params) {
      var formattedValue = params.formattedValue,
          input = params.input,
          _params$setCaretPosit = params.setCaretPosition,
          setCaretPosition = _params$setCaretPosit === void 0 ? true : _params$setCaretPosit;
      var numAsString = params.numAsString,
          caretPos = params.caretPos;
      var onValueChange = this.props.onValueChange;
      var lastValue = this.state.value;

      if (input) {
        //set caret position, and value imperatively when element is provided
        if (setCaretPosition) {
          //calculate caret position if not defined
          if (!caretPos) {
            var inputValue = params.inputValue || input.value;
            var currentCaretPosition = getCurrentCaretPosition(input);
            /**
             * set the value imperatively, this is required for IE fix
             * This is also required as if new caret position is beyond the previous value.
             * Caret position will not be set correctly
             */

            input.value = formattedValue; //get the caret position

            caretPos = this.getCaretPosition(inputValue, formattedValue, currentCaretPosition);
          } //set caret position


          this.setPatchedCaretPosition(input, caretPos, formattedValue);
        } else {
          /**
           * if we are not setting caret position set the value imperatively.
           * This is required on onBlur method
           */
          input.value = formattedValue;
        }
      } //calculate numeric string if not passed


      if (numAsString === undefined) {
        numAsString = this.removeFormatting(formattedValue);
      } //update state if value is changed


      if (formattedValue !== lastValue) {
        this.setState({
          value: formattedValue,
          numAsString: numAsString
        }); // trigger onValueChange synchronously, so parent is updated along with the number format. Fix for #277, #287

        onValueChange(this.getValueObject(formattedValue, numAsString));
      }
    }
  }, {
    key: "onChange",
    value: function onChange(e) {
      var el = e.target;
      var inputValue = el.value;
      var state = this.state,
          props = this.props;
      var isAllowed = props.isAllowed;
      var lastValue = state.value || '';
      var currentCaretPosition = getCurrentCaretPosition(el);
      inputValue = this.correctInputValue(currentCaretPosition, lastValue, inputValue);
      var formattedValue = this.formatInput(inputValue) || '';
      var numAsString = this.removeFormatting(formattedValue);
      var valueObj = this.getValueObject(formattedValue, numAsString);

      if (!isAllowed(valueObj)) {
        formattedValue = lastValue;
      }

      this.updateValue({
        formattedValue: formattedValue,
        numAsString: numAsString,
        inputValue: inputValue,
        input: el
      });
      props.onChange(e);
    }
  }, {
    key: "onBlur",
    value: function onBlur(e) {
      var props = this.props,
          state = this.state;
      var format = props.format,
          onBlur = props.onBlur,
          allowLeadingZeros = props.allowLeadingZeros;
      var numAsString = state.numAsString;
      var lastValue = state.value;
      this.focusedElm = null;

      if (this.focusTimeout) {
        clearTimeout(this.focusTimeout);
      }

      if (!format) {
        // if the numAsString is not a valid number reset it to empty
        if (isNaN(parseFloat(numAsString))) {
          numAsString = '';
        }

        if (!allowLeadingZeros) {
          numAsString = fixLeadingZero(numAsString);
        }

        var formattedValue = this.formatNumString(numAsString); //change the state

        if (formattedValue !== lastValue) {
          // the event needs to be persisted because its properties can be accessed in an asynchronous way
          this.updateValue({
            formattedValue: formattedValue,
            numAsString: numAsString,
            input: e.target,
            setCaretPosition: false
          });
          onBlur(e);
          return;
        }
      }

      onBlur(e);
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      var el = e.target;
      var key = e.key;
      var selectionStart = el.selectionStart,
          selectionEnd = el.selectionEnd,
          _el$value = el.value,
          value = _el$value === void 0 ? '' : _el$value;
      var expectedCaretPosition;
      var _this$props12 = this.props,
          decimalScale = _this$props12.decimalScale,
          fixedDecimalScale = _this$props12.fixedDecimalScale,
          prefix = _this$props12.prefix,
          suffix = _this$props12.suffix,
          format = _this$props12.format,
          onKeyDown = _this$props12.onKeyDown;
      var ignoreDecimalSeparator = decimalScale !== undefined && fixedDecimalScale;
      var numRegex = this.getNumberRegex(false, ignoreDecimalSeparator);
      var negativeRegex = new RegExp('-');
      var isPatternFormat = typeof format === 'string';
      this.selectionBeforeInput = {
        selectionStart: selectionStart,
        selectionEnd: selectionEnd
      }; //Handle backspace and delete against non numerical/decimal characters or arrow keys

      if (key === 'ArrowLeft' || key === 'Backspace') {
        expectedCaretPosition = selectionStart - 1;
      } else if (key === 'ArrowRight') {
        expectedCaretPosition = selectionStart + 1;
      } else if (key === 'Delete') {
        expectedCaretPosition = selectionStart;
      } //if expectedCaretPosition is not set it means we don't want to Handle keyDown
      //also if multiple characters are selected don't handle


      if (expectedCaretPosition === undefined || selectionStart !== selectionEnd) {
        onKeyDown(e);
        return;
      }

      var newCaretPosition = expectedCaretPosition;
      var leftBound = isPatternFormat ? format.indexOf('#') : prefix.length;
      var rightBound = isPatternFormat ? format.lastIndexOf('#') + 1 : value.length - suffix.length;

      if (key === 'ArrowLeft' || key === 'ArrowRight') {
        var direction = key === 'ArrowLeft' ? 'left' : 'right';
        newCaretPosition = this.correctCaretPosition(value, expectedCaretPosition, direction);
      } else if (key === 'Delete' && !numRegex.test(value[expectedCaretPosition]) && !negativeRegex.test(value[expectedCaretPosition])) {
        while (!numRegex.test(value[newCaretPosition]) && newCaretPosition < rightBound) {
          newCaretPosition++;
        }
      } else if (key === 'Backspace' && !numRegex.test(value[expectedCaretPosition])) {
        /* NOTE: This is special case when backspace is pressed on a
        negative value while the cursor position is after prefix. We can't handle it on onChange because
        we will not have any information of keyPress
        */
        if (selectionStart <= leftBound + 1 && value[0] === '-' && typeof format === 'undefined') {
          var newValue = value.substring(1);
          this.updateValue({
            formattedValue: newValue,
            caretPos: newCaretPosition,
            input: el
          });
        } else if (!negativeRegex.test(value[expectedCaretPosition])) {
          while (!numRegex.test(value[newCaretPosition - 1]) && newCaretPosition > leftBound) {
            newCaretPosition--;
          }

          newCaretPosition = this.correctCaretPosition(value, newCaretPosition, 'left');
        }
      }

      if (newCaretPosition !== expectedCaretPosition || expectedCaretPosition < leftBound || expectedCaretPosition > rightBound) {
        e.preventDefault();
        this.setPatchedCaretPosition(el, newCaretPosition, value);
      }
      /* NOTE: this is just required for unit test as we need to get the newCaretPosition,
              Remove this when you find different solution */


      if (e.isUnitTestRun) {
        this.setPatchedCaretPosition(el, newCaretPosition, value);
      }

      onKeyDown(e);
    }
    /** required to handle the caret position when click anywhere within the input **/

  }, {
    key: "onMouseUp",
    value: function onMouseUp(e) {
      var el = e.target;
      /**
       * NOTE: we have to give default value for value as in case when custom input is provided
       * value can come as undefined when nothing is provided on value prop.
      */

      var selectionStart = el.selectionStart,
          selectionEnd = el.selectionEnd,
          _el$value2 = el.value,
          value = _el$value2 === void 0 ? '' : _el$value2;

      if (selectionStart === selectionEnd) {
        var caretPosition = this.correctCaretPosition(value, selectionStart);

        if (caretPosition !== selectionStart) {
          this.setPatchedCaretPosition(el, caretPosition, value);
        }
      }

      this.props.onMouseUp(e);
    }
  }, {
    key: "onFocus",
    value: function onFocus(e) {
      var _this2 = this;

      // Workaround Chrome and Safari bug https://bugs.chromium.org/p/chromium/issues/detail?id=779328
      // (onFocus event target selectionStart is always 0 before setTimeout)
      e.persist();
      this.focusedElm = e.target;
      this.focusTimeout = setTimeout(function () {
        var el = e.target;
        var selectionStart = el.selectionStart,
            selectionEnd = el.selectionEnd,
            _el$value3 = el.value,
            value = _el$value3 === void 0 ? '' : _el$value3;

        var caretPosition = _this2.correctCaretPosition(value, selectionStart); //setPatchedCaretPosition only when everything is not selected on focus (while tabbing into the field)


        if (caretPosition !== selectionStart && !(selectionStart === 0 && selectionEnd === value.length)) {
          _this2.setPatchedCaretPosition(el, caretPosition, value);
        }

        _this2.props.onFocus(e);
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props13 = this.props,
          type = _this$props13.type,
          displayType = _this$props13.displayType,
          customInput = _this$props13.customInput,
          renderText = _this$props13.renderText,
          getInputRef = _this$props13.getInputRef;
      var value = this.state.value;
      var otherProps = omit(this.props, propTypes$1);

      var inputProps = _extends$1({
        inputMode: 'numeric'
      }, otherProps, {
        type: type,
        value: value,
        onChange: this.onChange,
        onKeyDown: this.onKeyDown,
        onMouseUp: this.onMouseUp,
        onFocus: this.onFocus,
        onBlur: this.onBlur
      });

      if (displayType === 'text') {
        return renderText ? renderText(value) || null : React__default.createElement("span", _extends$1({}, otherProps, {
          ref: getInputRef
        }), value);
      } else if (customInput) {
        var CustomInput = customInput;
        return React__default.createElement(CustomInput, _extends$1({}, inputProps, {
          ref: getInputRef
        }));
      }

      return React__default.createElement("input", _extends$1({}, inputProps, {
        ref: getInputRef
      }));
    }
  }]);

  return NumberFormat;
}(React__default.Component);

NumberFormat.propTypes = propTypes$1;
NumberFormat.defaultProps = defaultProps;

const NumberFormatCustom = ({
  maxLength,
  allowDecimals,
  unitName,
  inputRef,
  onChange,
  ...props
}) => /*#__PURE__*/React__default.createElement(NumberFormat, _extends({}, props, {
  getInputRef: inputRef,
  onValueChange: values => {
    onChange({
      target: {
        name: props.name,
        value: values.value
      }
    });
  },
  decimalSeparator: ',',
  thousandSeparator: '.',
  suffix: unitName ? ` ${unitName}` : '',
  decimalScale: allowDecimals ? 2 : 0,
  fixedDecimalScale: true,
  isNumericString: true,
  isAllowed: ({
    value
  }) => {
    return maxLength ? value.split('.')[0].length <= maxLength : true;
  }
}));

function RichTextfield({
  isMobile,
  hideIcon = false,
  fontStyles = {},
  value,
  unitName,
  allowDecimals = false,
  maxLength,
  action = () => {},
  InputProps = {},
  inputProps = {},
  rest = {},
  ...props
}) {
  const _useTheme = styles.useTheme(),
        themePalette = _useTheme.palette;

  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(TextField, _extends({}, props, {
    value: value,
    onChange: e => {
      action(e.target.name, Number(e.target.value));
    },
    InputProps: {
      inputComponent: NumberFormatCustom,
      inputProps: {
        allowDecimals,
        maxLength,
        unitName,
        ...inputProps
      },
      endAdornment: !hideIcon ? /*#__PURE__*/React__default.createElement("i", {
        className: "icon-edit-input",
        style: {
          pointerEvents: 'none',
          opacity: 0.5,
          verticalAlign: 'text-top',
          fontSize: '25px',
          color: themePalette.grey[700]
        }
      }) : null,
      ...InputProps
    }
  }, rest)));
}

function InputRange(props) {
  const value = props.value,
        id = props.id,
        label = props.label,
        name = props.name,
        action = props.action,
        input = props.input,
        sliderProps = props.sliderProps,
        min = props.min,
        max = props.max,
        step = props.step,
        marks = props.marks,
        maxLength = props.maxLength,
        unitName = props.unitName,
        hintLabel = props.hintLabel,
        _props$allowDecimals = props.allowDecimals,
        allowDecimals = _props$allowDecimals === void 0 ? false : _props$allowDecimals,
        rest = _objectWithoutProperties(props, ["value", "id", "label", "name", "action", "input", "sliderProps", "min", "max", "step", "marks", "maxLength", "unitName", "hintLabel", "allowDecimals"]);

  const rangedValue = value < min ? min : value > max ? max : value;
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(RichTextfield, {
    allowDecimals: allowDecimals,
    maxLength: maxLength,
    label: label,
    id: id,
    value: value,
    unitName: unitName,
    name: name,
    error: value !== rangedValue,
    action: action,
    rest: rest
  }), hintLabel && /*#__PURE__*/React__default.createElement("small", {
    className: 'float-right mt-1'
  }, hintLabel), /*#__PURE__*/React__default.createElement(Slider, _extends({
    id: id,
    name: name,
    title: name,
    value: rangedValue,
    onChange: (e, newValue) => {
      action(name, newValue);
    },
    min: min,
    max: max,
    step: step,
    marks: marks
  }, sliderProps)));
}

function InputRangeMobile(props) {
  const value = props.value,
        id = props.id,
        label = props.label,
        name = props.name,
        action = props.action,
        input = props.input,
        sliderProps = props.sliderProps,
        min = props.min,
        max = props.max,
        step = props.step,
        marks = props.marks,
        maxLength = props.maxLength,
        unitName = props.unitName,
        hintLabel = props.hintLabel,
        _props$allowDecimals = props.allowDecimals,
        allowDecimals = _props$allowDecimals === void 0 ? false : _props$allowDecimals,
        _props$hideDetails = props.hideDetails,
        hideDetails = _props$hideDetails === void 0 ? false : _props$hideDetails,
        _props$color = props.color,
        color = _props$color === void 0 ? 'inherit' : _props$color,
        rest = _objectWithoutProperties(props, ["value", "id", "label", "name", "action", "input", "sliderProps", "min", "max", "step", "marks", "maxLength", "unitName", "hintLabel", "allowDecimals", "hideDetails", "color"]);

  const rangedValue = value < min ? min : value > max ? max : value;
  const fontStyles = {
    color,
    fontWeight: 'bold',
    fontSize: '24px'
  };
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(RichTextfield, {
    isMobile: true,
    fontStyles: fontStyles,
    allowDecimals: allowDecimals,
    maxLength: maxLength,
    label: label,
    id: id,
    value: value,
    unitName: unitName,
    name: name,
    error: value !== rangedValue,
    action: action,
    rest: rest,
    InputProps: {
      style: { ...fontStyles
      }
    }
  }), /*#__PURE__*/React__default.createElement("div", {
    className: `px-2 ${hideDetails ? 'hide-extend-anim' : 'show-extend-anim'}`,
    style: {
      transitionDuration: '0.2s',
      pointerEvents: hideDetails ? 'none' : 'inherit'
    }
  }, hintLabel && /*#__PURE__*/React__default.createElement("small", {
    className: `float-right mt-1 `,
    style: {
      transitionDuration: '0.2s'
    }
  }, hintLabel), /*#__PURE__*/React__default.createElement(Slider, _extends({
    id: id,
    name: name,
    title: name,
    value: rangedValue,
    onChange: (e, newValue) => {
      action(name, newValue);
    },
    min: min,
    max: max,
    step: step,
    marks: marks
  }, sliderProps))));
}

var config = {
  ICONS: {
    store: 'storefront',
    web: 'web',
    app: 'apps',
    tpv: 'contactless',
    social_media: 'group_work',
    phone: 'phone_iphone',
    marketplace: 'ballot'
  }
};

function getIconName(str) {
  return config.ICONS[str] || '';
}
function isObject(item) {
  return item && typeof item === 'object' && !Array.isArray(item);
}
function formatSnakecaseToSpaces(text) {
  return text && text.replace(/_/g, ' ');
}
function formatNumber(num) {
  return new Intl.NumberFormat('es-ES', {
    maximumSignificantDigits: 3
  }).format(num);
}
function formatPercent(num) {
  return new Intl.NumberFormat('es-ES', {
    style: 'percent',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(num);
}
function formatMoney(num, forcedDec) {
  const numIsInteger = num % 1 === 0;
  const defaultDec = numIsInteger ? 0 : 2;
  const dec = forcedDec === undefined ? defaultDec : forcedDec;
  return new Intl.NumberFormat('es-ES', {
    style: 'currency',
    currency: 'EUR',
    minimumFractionDigits: dec,
    maximumFractionDigits: dec
  }).format(num);
}
function mergeDeep(target, ...sources) {
  if (!sources.length) return target;
  const source = sources.shift();

  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (isObject(source[key])) {
        if (!target[key]) Object.assign(target, {
          [key]: {}
        });
        mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, {
          [key]: source[key]
        });
      }
    }
  }

  return mergeDeep(target, ...sources);
}

const setThemeWithCustomizableValues = newCustomizableValues => {
  const mainDefaultReusableValues = {
    palette: {
      primary: {
        main: '#4dd970',
        contrastText: '#08404d'
      },
      secondary: {
        main: '#08404d',
        contrastText: '#fff'
      },
      danger: {
        main: '#ef5957',
        contrastText: '#ffffff'
      },
      warning: {
        main: '#ffca28',
        contrastText: '#ffffff',
        light: 'rgba(255, 202, 40, 0.15)'
      },
      info: {
        main: '#36a3f7',
        contrastText: '#ffffff',
        light: '#E1F1FD'
      },
      success: {
        main: '#4dd970',
        contrastText: '#ffffff',
        light: 'rgba(73,217,106,0.15)'
      },
      error: {
        main: '#ef5957',
        contrastText: '#ffffff',
        light: 'rgba(239,87,87,0.15)'
      },
      text: {
        accent: '#4dd970',
        active: '#08404d',
        title: '#08404d',
        primary: '#4b5354',
        secondary: '#77787b'
      },
      // additional colors
      dark: {
        main: '#08404d',
        accent: '#4dd970',
        contrastText: '#ffffff',
        imageBackgroundOpacity: 0.8
      },
      light: {
        main: '#f3f2ef',
        accent: '#4dd970',
        contrastText: '#08404d'
      },
      status: {
        active: '#4dd970',
        approved: '#43b46f',
        analysing: '#36a3f7',
        sent: '#08404d',
        cancelled: '#d8d8d8',
        denied: '#ef5957'
      },
      grey: {
        200: '#eeeeee',
        background: '#F1F1F1',
        selected: '#d8d8d8'
      }
    },
    background: null,
    logo: null,
    customBorderRadius: {
      button: 25,
      paper: 15,
      chip: 6
    },
    spacing: [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80]
  };
  const targetThemeValues = mergeDeep(mainDefaultReusableValues, newCustomizableValues);
  const baseThemeConstruction = {
    palette: {
      status: {
        active: targetThemeValues.palette && targetThemeValues.palette.status && targetThemeValues.palette.status.active || targetThemeValues.palette.success.main,
        denied: targetThemeValues.palette && targetThemeValues.palette.status && targetThemeValues.palette.status.denied || targetThemeValues.palette.danger.main,
        ...targetThemeValues.status
      }
    },
    breakpoints: {
      values: {
        xs: 0,
        sm: 600,
        md: 960,
        lg: 1328,
        xl: 1920
      }
    },
    typography: {
      fontFamily: ['Raleway', 'BlinkMacSystemFont', '"Segoe UI"', 'Roboto', '"Helvetica Neue"', 'Arial', 'sans-serif', '"Apple Color Emoji"', '"Segoe UI Emoji"', '"Segoe UI Symbol"'].join(',')
    },
    overrides: {
      MuiButton: {
        root: {
          borderRadius: targetThemeValues.customBorderRadius.button,
          border: 0,
          textTransform: 'none',
          fontSize: '16px',
          '&.progression': {
            width: 220,
            height: 35
          },
          '&.progression.xs': {
            border: 'none',
            width: 150
          }
        },
        contained: {
          backgroundColor: targetThemeValues.palette.light.main,
          color: targetThemeValues.palette.light.contrastText
        },
        sizeLarge: {
          height: '40px',
          fontSize: '18px'
        },
        sizeSmall: {
          height: '30px'
        },
        label: {
          fontWeight: 600
        }
      },
      MuiToggleButton: {
        label: {
          pointerEvents: 'none'
        }
      },
      MuiFormControl: {
        root: {
          margin: targetThemeValues.spacing[1]
        }
      },
      MuiInputBase: {
        input: {
          padding: '10px 0 11px'
        }
      },
      MuiAppBar: {
        root: {
          background: '#fff !important'
        }
      },
      MuiTextField: {
        root: {
          color: targetThemeValues.palette.text.primary,
          '&.dark-variant': {
            color: `${targetThemeValues.palette.dark.contrastText} !important`
          }
        }
      },
      MuiInput: {
        root: {
          color: 'inherit',
          position: 'relative',
          transition: 'border-bottom 0.2s ease',
          fontSize: '18px'
        },
        underline: {
          '&:before': {
            borderBottomWidth: '2px',
            borderBottomColor: `inherit !important`
          },
          '&:hover:before': {
            borderBottomWidth: '2px',
            borderBottomColor: `inherit !important`
          },
          '&$focused:after': {
            transform: 'none',
            borderBottomColor: `${targetThemeValues.palette.primary.main} !important`
          }
        }
      },
      MuiChip: {
        root: {
          borderRadius: targetThemeValues.customBorderRadius.chip
        }
      },
      MuiPaper: {
        rounded: {
          borderRadius: targetThemeValues.customBorderRadius.paper
        },
        root: {
          '&.dark-variant': {
            background: targetThemeValues.palette.dark.main,
            color: targetThemeValues.palette.dark.contrastText
          }
        }
      },
      MuiDialog: {
        paper: {
          padding: '0px'
        }
      },
      MuiGrid: {
        root: {
          '&.stat-results': {
            backgroundColor: '#fff0',
            transition: 'all 0.3s ease',
            display: 'flex',
            alignItems: 'center',
            minHeight: 36,
            cursor: 'pointer',
            padding: '0 10px 0 10px',
            borderRadius: 5,
            whiteSpace: 'nowrap',
            fontWeight: '600',
            '&.total': {
              cursor: 'default',
              display: 'flex'
            },
            '&.total-selected': {
              transition: 'all 0.3s ease',
              cursor: 'default',
              color: targetThemeValues.palette.text.active
            },
            '&.selected': {
              transition: 'all 0.3s ease',
              backgroundColor: targetThemeValues.palette.grey.background,
              color: targetThemeValues.palette.text.active
            },
            '&.opacity': {
              filter: 'opacity(0.5)'
            },
            '& .flex-icons': {
              display: 'flex'
            },
            '& .stat-strong-value': {
              display: 'flex',
              justifyContent: 'flex-end'
            }
          }
        }
      },
      MuiFormControlLabel: {
        labelPlacementStart: {
          width: '100%',
          marginLeft: '0px',
          marginRight: '-11px',
          flexDirection: 'row-reverse',
          justifyContent: 'space-between'
        }
      },
      MuiInputLabel: {
        root: {
          color: 'inherit',
          fontSize: '16px'
        },
        shrink: {
          transform: 'translate(0, 1.5px) scale(0.875)'
        }
      },
      MuiFormLabel: {
        root: {
          '&$focused': {
            color: 'inherit'
          }
        },
        focused: {}
      },
      MuiBackdrop: {
        root: {
          backgroundColor: 'rgba(240, 240, 240, 0.7)'
        }
      },
      MuiSelect: {
        select: {
          '&:focus': {
            backgroundColor: 'inherit'
          }
        }
      },
      MuiLinearProgress: {
        root: {
          '&.stat-bar': {
            transition: 'all 0.3s ease',
            backgroundColor: targetThemeValues.palette.grey[200],
            height: 10,
            borderRadius: 5,
            width: '100%'
          },
          '&.stat-bar.thin': {
            transition: 'all 0.3s ease',
            height: 5,
            marginBottom: 5
          },
          '&.stat-bar.selected': {
            transition: 'all 0.3s ease',
            color: targetThemeValues.palette.text.active,
            backgroundColor: targetThemeValues.palette.grey.selected
          },
          '&.stat-bar.thin.selected': {
            backgroundColor: targetThemeValues.palette.grey.selected
          }
        }
      },
      MuiTypography: {
        root: {
          '&.percentage': {
            padding: '0px 0px 0px 12px',
            filter: 'opacity(0.6)'
          },
          '&.amount': {
            padding: '0px 0px 0px 12px',
            color: targetThemeValues.palette.text.active
          },
          '&.header-stats': {
            margintBottom: 30
          },
          '&.text-overflow': {
            whiteSpace: 'nowrap',
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            fontWeight: 600
          }
        }
      }
    },
    shadows: ['none', '0px 2px 1px -1px rgba(0,0,0,0.1),0px 1px 1px 0px rgba(0,0,0,0.05),0px 1px 3px 0px rgba(0,0,0,0.08)', '0px 3px 1px -2px rgba(0,0,0,0.1),0px 2px 2px 0px rgba(0,0,0,0.05),0px 1px 5px 0px rgba(0,0,0,0.08)', '0px 3px 3px -2px rgba(0,0,0,0.1),0px 3px 4px 0px rgba(0,0,0,0.05),0px 1px 8px 0px rgba(0,0,0,0.08)', '0px 2px 4px -1px rgba(0,0,0,0.1),0px 4px 5px 0px rgba(0,0,0,0.05),0px 1px 10px 0px rgba(0,0,0,0.08)', '0px 3px 5px -1px rgba(0,0,0,0.1),0px 5px 8px 0px rgba(0,0,0,0.05),0px 1px 14px 0px rgba(0,0,0,0.08)', '0px 3px 5px -1px rgba(0,0,0,0.1),0px 6px 10px 0px rgba(0,0,0,0.05),0px 1px 18px 0px rgba(0,0,0,0.08)', '0px 4px 5px -2px rgba(0,0,0,0.1),0px 7px 10px 1px rgba(0,0,0,0.05),0px 2px 16px 1px rgba(0,0,0,0.08)', '0px 5px 5px -3px rgba(0,0,0,0.1),0px 8px 10px 1px rgba(0,0,0,0.05),0px 3px 14px 2px rgba(0,0,0,0.08)', '0px 5px 6px -3px rgba(0,0,0,0.1),0px 9px 12px 1px rgba(0,0,0,0.05),0px 3px 16px 2px rgba(0,0,0,0.08)', '0px 6px 6px -3px rgba(0,0,0,0.1),0px 10px 14px 1px rgba(0,0,0,0.05),0px 4px 18px 3px rgba(0,0,0,0.08)', '0px 6px 7px -4px rgba(0,0,0,0.1),0px 11px 15px 1px rgba(0,0,0,0.05),0px 4px 20px 3px rgba(0,0,0,0.08)', '0px 7px 8px -4px rgba(0,0,0,0.1),0px 12px 17px 2px rgba(0,0,0,0.05),0px 5px 22px 4px rgba(0,0,0,0.08)', '0px 7px 8px -4px rgba(0,0,0,0.1),0px 13px 19px 2px rgba(0,0,0,0.05),0px 5px 24px 4px rgba(0,0,0,0.08)', '0px 7px 9px -4px rgba(0,0,0,0.1),0px 14px 21px 2px rgba(0,0,0,0.05),0px 5px 26px 4px rgba(0,0,0,0.08)', '0px 8px 9px -5px rgba(0,0,0,0.1),0px 15px 22px 2px rgba(0,0,0,0.05),0px 6px 28px 5px rgba(0,0,0,0.08)', '0px 8px 10px -5px rgba(0,0,0,0.1),0px 16px 24px 2px rgba(0,0,0,0.05),0px 6px 30px 5px rgba(0,0,0,0.08)', '0px 8px 11px -5px rgba(0,0,0,0.1),0px 17px 26px 2px rgba(0,0,0,0.05),0px 6px 32px 5px rgba(0,0,0,0.08)', '0px 9px 11px -5px rgba(0,0,0,0.1),0px 18px 28px 2px rgba(0,0,0,0.05),0px 7px 34px 6px rgba(0,0,0,0.08)', '0px 9px 12px -6px rgba(0,0,0,0.1),0px 19px 29px 2px rgba(0,0,0,0.05),0px 7px 36px 6px rgba(0,0,0,0.08)', '0px 10px 13px -6px rgba(0,0,0,0.1),0px 20px 31px 3px rgba(0,0,0,0.05),0px 8px 38px 7px rgba(0,0,0,0.08)', '0px 10px 13px -6px rgba(0,0,0,0.1),0px 21px 33px 3px rgba(0,0,0,0.05),0px 8px 40px 7px rgba(0,0,0,0.08)', '0px 10px 14px -6px rgba(0,0,0,0.1),0px 22px 35px 3px rgba(0,0,0,0.05),0px 8px 42px 7px rgba(0,0,0,0.08)', '0px 11px 14px -7px rgba(0,0,0,0.1),0px 23px 36px 3px rgba(0,0,0,0.05),0px 9px 44px 8px rgba(0,0,0,0.08)', '0px 11px 15px -7px rgba(0,0,0,0.1),0px 24px 38px 3px rgba(0,0,0,0.05),0px 9px 46px 8px rgba(0,0,0,0.08)']
  };
  return mergeDeep(baseThemeConstruction, targetThemeValues);
};

const createCustomTheme = newCustomizableValues => {
  return styles$1.createMuiTheme(setThemeWithCustomizableValues(newCustomizableValues));
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".styles_table__2y8yf.styles_sortable__1cuKh thead {\n  cursor: pointer; }\n\n.styles_table__2y8yf td {\n  vertical-align: middle !important; }\n\n.styles_MuiTableCell-root__2ZK-z {\n  -webkit-font-feature-settings: \"lnum\";\n  -moz-font-feature-settings: \"lnum\";\n  font-feature-settings: \"lnum\"; }\n  .styles_MuiTableCell-root__2ZK-z .styles_detailsPanel__3Euvb {\n    background: #f5f5f5;\n    position: relative;\n    padding: 20px 20px 20px 60px; }\n  .styles_MuiTableCell-root__2ZK-z .styles_detailsPanel__3Euvb:after {\n    content: \" \";\n    position: absolute;\n    border-radius: 0 0 30px 30px;\n    width: 32px;\n    border-left: 15px solid transparent;\n    border-right: 15px solid transparent;\n    border-top: 12px solid white;\n    height: 0px;\n    left: 6px;\n    top: 0; }\n\n.styles_MuiToolbar-root__24kKN {\n  color: #08404d; }\n  .styles_MuiToolbar-root__24kKN h1, .styles_MuiToolbar-root__24kKN h2, .styles_MuiToolbar-root__24kKN h3, .styles_MuiToolbar-root__24kKN h4, .styles_MuiToolbar-root__24kKN h5, .styles_MuiToolbar-root__24kKN h6 {\n    font-weight: bold; }\n    .styles_MuiToolbar-root__24kKN h1 .styles_material-icons__2PCno, .styles_MuiToolbar-root__24kKN h2 .styles_material-icons__2PCno, .styles_MuiToolbar-root__24kKN h3 .styles_material-icons__2PCno, .styles_MuiToolbar-root__24kKN h4 .styles_material-icons__2PCno, .styles_MuiToolbar-root__24kKN h5 .styles_material-icons__2PCno, .styles_MuiToolbar-root__24kKN h6 .styles_material-icons__2PCno {\n      font-weight: lighter; }\n\n.styles_segment-color-gold__1VA9g {\n  color: #d2b77f; }\n\n.styles_segment-color-platinum__1oEEl {\n  color: #addacc; }\n\n.styles_segment-color-diamond__1aqKz {\n  color: #4ddbe9; }\n\n.styles_segment-color-super_diamond__1dc-i {\n  color: #46c2d1;\n  text-shadow: 0px 1px 10px #10eaff; }\n";
styleInject(css);

class TableMui extends React.Component {
  render() {
    const _this$props = this.props,
          columns = _this$props.columns,
          data = _this$props.data,
          title = _this$props.title,
          options = _this$props.options,
          localization = _this$props.localization,
          rest = _objectWithoutProperties(_this$props, ["columns", "data", "title", "options", "localization"]);

    return /*#__PURE__*/React__default.createElement(MaterialTable, _extends({
      columns: columns,
      data: data,
      title: title,
      options: options,
      localization: localization,
      components: {
        Container: props => /*#__PURE__*/React__default.createElement("div", props)
      }
    }, rest));
  }

}

_defineProperty(TableMui, "propTypes", {
  columns: PropTypes__default.arrayOf(PropTypes__default.object).isRequired,
  data: PropTypes__default.arrayOf(PropTypes__default.object).isRequired
});

_defineProperty(TableMui, "defaultProps", {
  title: '',
  style: {
    borderRadius: '15px',
    padding: '0px 15px'
  },
  options: {
    headerStyle: {
      fontWeight: 'bold'
    },
    searchFieldStyle: {
      "& MuiInputunderline:after": {
        display: 'none'
      }
    }
  },
  localization: {
    body: {
      emptyDataSourceMessage: 'No hay resultados que mostrar'
    },
    toolbar: {
      searchTooltip: 'Buscar',
      searchPlaceholder: 'Buscar'
    },
    header: {
      actions: ''
    },
    pagination: {
      labelRowsSelect: 'filas',
      labelDisplayedRows: ' {from}-{to} de {count}',
      firstTooltip: 'Primera página',
      previousTooltip: 'Página anterior',
      nextTooltip: 'Página siguiente',
      lastTooltip: 'Última página'
    }
  }
});

class Header extends React.Component {
  render() {
    const _this$props = this.props,
          logged = _this$props.logged,
          children = _this$props.children,
          className = _this$props.className,
          bottomMenuVariant = _this$props.bottomMenuVariant,
          logo = _this$props.logo,
          rest = _objectWithoutProperties(_this$props, ["logged", "children", "className", "bottomMenuVariant", "logo"]);

    return /*#__PURE__*/React__default.createElement("div", {
      className: className
    }, bottomMenuVariant ? /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(AppBar, {
      position: "fixed",
      color: "transparent",
      style: {
        bottom: 0,
        top: 'auto'
      }
    }, children), /*#__PURE__*/React__default.createElement(Paper, {
      square: true,
      elevation: 6,
      style: {
        height: '80px',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: '30px'
      }
    }, logo)) : /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(AppBar, {
      position: "fixed",
      color: "transparent",
      style: {
        top: 0,
        height: '80px',
        display: 'flex',
        justifyContent: 'center'
      }
    }, /*#__PURE__*/React__default.createElement(Container, null, /*#__PURE__*/React__default.createElement(Toolbar, null, logo, children))), /*#__PURE__*/React__default.createElement("div", {
      style: {
        paddingTop: '130px'
      }
    })));
  }

}

_defineProperty(Header, "propTypes", {
  id: PropTypes__default.string,
  label: PropTypes__default.string
});

function Themer(props) {
  const children = props.children,
        theme = props.theme;
  return /*#__PURE__*/React__default.createElement(styles.ThemeProvider, {
    theme: createCustomTheme(theme)
  }, children);
}

function CircularProgressWithLabel(props) {
  const value = props.value,
        subCircleValue = props.subCircleValue,
        subCircleClassName = props.subCircleClassName,
        size = props.size,
        options = props.options,
        label = props.label,
        _props$subCircleStyle = props.subCircleStyle,
        subCircleStyle = _props$subCircleStyle === void 0 ? {} : _props$subCircleStyle;
  const wrapCircleSizePx = `${size - 6}px`;
  return /*#__PURE__*/React__default.createElement(Box, {
    position: "relative",
    display: "inline-flex"
  }, !!subCircleValue && /*#__PURE__*/React__default.createElement(CircularProgress, _extends({
    variant: "static",
    value: subCircleValue,
    size: size,
    thickness: 1.5
  }, options, {
    className: subCircleClassName || '',
    style: {
      position: 'absolute',
      ...subCircleStyle
    }
  })), /*#__PURE__*/React__default.createElement(CircularProgress, _extends({
    variant: "static",
    value: value,
    size: size,
    thickness: 1.5
  }, options)), /*#__PURE__*/React__default.createElement("div", {
    className: 'wrap-circle',
    style: {
      "borderRadius": "30px",
      "boxShadow": "0 0 10px #0006",
      "height": wrapCircleSizePx,
      "position": "absolute",
      "width": wrapCircleSizePx,
      "top": "3px",
      "left": "3px"
    }
  }), /*#__PURE__*/React__default.createElement(Box, {
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    position: "absolute",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    style: {
      lineHeight: "0px"
    }
  }, label || value));
}
CircularProgressWithLabel.propTypes = {
  options: PropTypes__default.object,
  subCircleClassName: PropTypes__default.string,
  subCircleValue: PropTypes__default.number,
  value: PropTypes__default.number.isRequired
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule$1(fn, basedir, module) {
	return module = {
	  path: basedir,
	  exports: {},
	  require: function (path, base) {
      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    }
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var moment = createCommonjsModule$1(function (module, exports) {
(function (global, factory) {
     module.exports = factory() ;
}(commonjsGlobal, (function () {
    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key;
                for (i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i;
            for (i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                    matched,
                    p1,
                    p2,
                    p3,
                    p4
                ) {
                    return p1 || p2 || p3 || p4;
                })
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
            '_'
        ),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            'object' !== 'undefined' &&
            module &&
            module.exports
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = commonjsRequire;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^)]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged and will be removed in an upcoming major release. Please refer to ' +
            'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
        input,
        array,
        config,
        token
    ) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) {
            getParsingFlags(config).era = era;
        } else {
            getParsingFlags(config).invalidEra = input;
        }
    });

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
        input,
        week,
        config,
        token
    ) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.28.0';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));
});

var Chart = createCommonjsModule$1(function (module, exports) {
/*!
 * Chart.js v2.9.3
 * https://www.chartjs.org
 * (c) 2019 Chart.js Contributors
 * Released under the MIT License
 */
(function (global, factory) {
 module.exports = factory(function() { try { return moment; } catch(e) { } }()) ;
}(commonjsGlobal, (function (moment) {
moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var colorName = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

var conversions = createCommonjsModule(function (module) {
/* MIT license */


// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in colorName) {
	if (colorName.hasOwnProperty(key)) {
		reverseKeywords[colorName[key]] = key;
	}
}

var convert = module.exports = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

// hide .channels and .labels properties
for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var rdif;
	var gdif;
	var bdif;
	var h;
	var s;

	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var v = Math.max(r, g, b);
	var diff = v - Math.min(r, g, b);
	var diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}
		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
	return (
		Math.pow(x[0] - y[0], 2) +
		Math.pow(x[1] - y[1], 2) +
		Math.pow(x[2] - y[2], 2)
	);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in colorName) {
		if (colorName.hasOwnProperty(keyword)) {
			var value = colorName[keyword];

			// Compute comparative distance
			var distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return colorName[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};
});
var conversions_1 = conversions.rgb;
var conversions_2 = conversions.hsl;
var conversions_3 = conversions.hsv;
var conversions_4 = conversions.hwb;
var conversions_5 = conversions.cmyk;
var conversions_6 = conversions.xyz;
var conversions_7 = conversions.lab;
var conversions_8 = conversions.lch;
var conversions_9 = conversions.hex;
var conversions_10 = conversions.keyword;
var conversions_11 = conversions.ansi16;
var conversions_12 = conversions.ansi256;
var conversions_13 = conversions.hcg;
var conversions_14 = conversions.apple;
var conversions_15 = conversions.gray;

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	var graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	var models = Object.keys(conversions);

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

var route = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

var colorConvert = convert;

var colorName$1 = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

/* MIT license */


var colorString = {
   getRgba: getRgba,
   getHsla: getHsla,
   getRgb: getRgb,
   getHsl: getHsl,
   getHwb: getHwb,
   getAlpha: getAlpha,

   hexString: hexString,
   rgbString: rgbString,
   rgbaString: rgbaString,
   percentString: percentString,
   percentaString: percentaString,
   hslString: hslString,
   hslaString: hslaString,
   hwbString: hwbString,
   keyword: keyword
};

function getRgba(string) {
   if (!string) {
      return;
   }
   var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
       hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
       rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
       per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
       keyword = /(\w+)/;

   var rgb = [0, 0, 0],
       a = 1,
       match = string.match(abbr),
       hexAlpha = "";
   if (match) {
      match = match[1];
      hexAlpha = match[3];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i] + match[i], 16);
      }
      if (hexAlpha) {
         a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
      }
   }
   else if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
      }
      if (hexAlpha) {
         a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
      }
   }
   else if (match = string.match(rgba)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = parseInt(match[i + 1]);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(per)) {
      for (var i = 0; i < rgb.length; i++) {
         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }
      a = parseFloat(match[4]);
   }
   else if (match = string.match(keyword)) {
      if (match[1] == "transparent") {
         return [0, 0, 0, 0];
      }
      rgb = colorName$1[match[1]];
      if (!rgb) {
         return;
      }
   }

   for (var i = 0; i < rgb.length; i++) {
      rgb[i] = scale(rgb[i], 0, 255);
   }
   if (!a && a != 0) {
      a = 1;
   }
   else {
      a = scale(a, 0, 1);
   }
   rgb[3] = a;
   return rgb;
}

function getHsla(string) {
   if (!string) {
      return;
   }
   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hsl);
   if (match) {
      var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          s = scale(parseFloat(match[2]), 0, 100),
          l = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
   }
}

function getHwb(string) {
   if (!string) {
      return;
   }
   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
   var match = string.match(hwb);
   if (match) {
    var alpha = parseFloat(match[4]);
      var h = scale(parseInt(match[1]), 0, 360),
          w = scale(parseFloat(match[2]), 0, 100),
          b = scale(parseFloat(match[3]), 0, 100),
          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
   }
}

function getRgb(string) {
   var rgba = getRgba(string);
   return rgba && rgba.slice(0, 3);
}

function getHsl(string) {
  var hsla = getHsla(string);
  return hsla && hsla.slice(0, 3);
}

function getAlpha(string) {
   var vals = getRgba(string);
   if (vals) {
      return vals[3];
   }
   else if (vals = getHsla(string)) {
      return vals[3];
   }
   else if (vals = getHwb(string)) {
      return vals[3];
   }
}

// generators
function hexString(rgba, a) {
   var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
   return "#" + hexDouble(rgba[0]) 
              + hexDouble(rgba[1])
              + hexDouble(rgba[2])
              + (
                 (a >= 0 && a < 1)
                 ? hexDouble(Math.round(a * 255))
                 : ""
              );
}

function rgbString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return rgbaString(rgba, alpha);
   }
   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
}

function rgbaString(rgba, alpha) {
   if (alpha === undefined) {
      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
   }
   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
           + ", " + alpha + ")";
}

function percentString(rgba, alpha) {
   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
      return percentaString(rgba, alpha);
   }
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);

   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
}

function percentaString(rgba, alpha) {
   var r = Math.round(rgba[0]/255 * 100),
       g = Math.round(rgba[1]/255 * 100),
       b = Math.round(rgba[2]/255 * 100);
   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
}

function hslString(hsla, alpha) {
   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
      return hslaString(hsla, alpha);
   }
   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
}

function hslaString(hsla, alpha) {
   if (alpha === undefined) {
      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
   }
   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
           + alpha + ")";
}

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
function hwbString(hwb, alpha) {
   if (alpha === undefined) {
      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
   }
   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
}

function keyword(rgb) {
  return reverseNames[rgb.slice(0, 3)];
}

// helpers
function scale(num, min, max) {
   return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
  var str = num.toString(16).toUpperCase();
  return (str.length < 2) ? "0" + str : str;
}


//create a list of reverse color names
var reverseNames = {};
for (var name in colorName$1) {
   reverseNames[colorName$1[name]] = name;
}

/* MIT license */



var Color = function (obj) {
	if (obj instanceof Color) {
		return obj;
	}
	if (!(this instanceof Color)) {
		return new Color(obj);
	}

	this.valid = false;
	this.values = {
		rgb: [0, 0, 0],
		hsl: [0, 0, 0],
		hsv: [0, 0, 0],
		hwb: [0, 0, 0],
		cmyk: [0, 0, 0, 0],
		alpha: 1
	};

	// parse Color() argument
	var vals;
	if (typeof obj === 'string') {
		vals = colorString.getRgba(obj);
		if (vals) {
			this.setValues('rgb', vals);
		} else if (vals = colorString.getHsla(obj)) {
			this.setValues('hsl', vals);
		} else if (vals = colorString.getHwb(obj)) {
			this.setValues('hwb', vals);
		}
	} else if (typeof obj === 'object') {
		vals = obj;
		if (vals.r !== undefined || vals.red !== undefined) {
			this.setValues('rgb', vals);
		} else if (vals.l !== undefined || vals.lightness !== undefined) {
			this.setValues('hsl', vals);
		} else if (vals.v !== undefined || vals.value !== undefined) {
			this.setValues('hsv', vals);
		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
			this.setValues('hwb', vals);
		} else if (vals.c !== undefined || vals.cyan !== undefined) {
			this.setValues('cmyk', vals);
		}
	}
};

Color.prototype = {
	isValid: function () {
		return this.valid;
	},
	rgb: function () {
		return this.setSpace('rgb', arguments);
	},
	hsl: function () {
		return this.setSpace('hsl', arguments);
	},
	hsv: function () {
		return this.setSpace('hsv', arguments);
	},
	hwb: function () {
		return this.setSpace('hwb', arguments);
	},
	cmyk: function () {
		return this.setSpace('cmyk', arguments);
	},

	rgbArray: function () {
		return this.values.rgb;
	},
	hslArray: function () {
		return this.values.hsl;
	},
	hsvArray: function () {
		return this.values.hsv;
	},
	hwbArray: function () {
		var values = this.values;
		if (values.alpha !== 1) {
			return values.hwb.concat([values.alpha]);
		}
		return values.hwb;
	},
	cmykArray: function () {
		return this.values.cmyk;
	},
	rgbaArray: function () {
		var values = this.values;
		return values.rgb.concat([values.alpha]);
	},
	hslaArray: function () {
		var values = this.values;
		return values.hsl.concat([values.alpha]);
	},
	alpha: function (val) {
		if (val === undefined) {
			return this.values.alpha;
		}
		this.setValues('alpha', val);
		return this;
	},

	red: function (val) {
		return this.setChannel('rgb', 0, val);
	},
	green: function (val) {
		return this.setChannel('rgb', 1, val);
	},
	blue: function (val) {
		return this.setChannel('rgb', 2, val);
	},
	hue: function (val) {
		if (val) {
			val %= 360;
			val = val < 0 ? 360 + val : val;
		}
		return this.setChannel('hsl', 0, val);
	},
	saturation: function (val) {
		return this.setChannel('hsl', 1, val);
	},
	lightness: function (val) {
		return this.setChannel('hsl', 2, val);
	},
	saturationv: function (val) {
		return this.setChannel('hsv', 1, val);
	},
	whiteness: function (val) {
		return this.setChannel('hwb', 1, val);
	},
	blackness: function (val) {
		return this.setChannel('hwb', 2, val);
	},
	value: function (val) {
		return this.setChannel('hsv', 2, val);
	},
	cyan: function (val) {
		return this.setChannel('cmyk', 0, val);
	},
	magenta: function (val) {
		return this.setChannel('cmyk', 1, val);
	},
	yellow: function (val) {
		return this.setChannel('cmyk', 2, val);
	},
	black: function (val) {
		return this.setChannel('cmyk', 3, val);
	},

	hexString: function () {
		return colorString.hexString(this.values.rgb);
	},
	rgbString: function () {
		return colorString.rgbString(this.values.rgb, this.values.alpha);
	},
	rgbaString: function () {
		return colorString.rgbaString(this.values.rgb, this.values.alpha);
	},
	percentString: function () {
		return colorString.percentString(this.values.rgb, this.values.alpha);
	},
	hslString: function () {
		return colorString.hslString(this.values.hsl, this.values.alpha);
	},
	hslaString: function () {
		return colorString.hslaString(this.values.hsl, this.values.alpha);
	},
	hwbString: function () {
		return colorString.hwbString(this.values.hwb, this.values.alpha);
	},
	keyword: function () {
		return colorString.keyword(this.values.rgb, this.values.alpha);
	},

	rgbNumber: function () {
		var rgb = this.values.rgb;
		return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
	},

	luminosity: function () {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		var rgb = this.values.rgb;
		var lum = [];
		for (var i = 0; i < rgb.length; i++) {
			var chan = rgb[i] / 255;
			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
		}
		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast: function (color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		var lum1 = this.luminosity();
		var lum2 = color2.luminosity();
		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}
		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level: function (color2) {
		var contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7.1) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	dark: function () {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		var rgb = this.values.rgb;
		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
		return yiq < 128;
	},

	light: function () {
		return !this.dark();
	},

	negate: function () {
		var rgb = [];
		for (var i = 0; i < 3; i++) {
			rgb[i] = 255 - this.values.rgb[i];
		}
		this.setValues('rgb', rgb);
		return this;
	},

	lighten: function (ratio) {
		var hsl = this.values.hsl;
		hsl[2] += hsl[2] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	darken: function (ratio) {
		var hsl = this.values.hsl;
		hsl[2] -= hsl[2] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	saturate: function (ratio) {
		var hsl = this.values.hsl;
		hsl[1] += hsl[1] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	desaturate: function (ratio) {
		var hsl = this.values.hsl;
		hsl[1] -= hsl[1] * ratio;
		this.setValues('hsl', hsl);
		return this;
	},

	whiten: function (ratio) {
		var hwb = this.values.hwb;
		hwb[1] += hwb[1] * ratio;
		this.setValues('hwb', hwb);
		return this;
	},

	blacken: function (ratio) {
		var hwb = this.values.hwb;
		hwb[2] += hwb[2] * ratio;
		this.setValues('hwb', hwb);
		return this;
	},

	greyscale: function () {
		var rgb = this.values.rgb;
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		this.setValues('rgb', [val, val, val]);
		return this;
	},

	clearer: function (ratio) {
		var alpha = this.values.alpha;
		this.setValues('alpha', alpha - (alpha * ratio));
		return this;
	},

	opaquer: function (ratio) {
		var alpha = this.values.alpha;
		this.setValues('alpha', alpha + (alpha * ratio));
		return this;
	},

	rotate: function (degrees) {
		var hsl = this.values.hsl;
		var hue = (hsl[0] + degrees) % 360;
		hsl[0] = hue < 0 ? 360 + hue : hue;
		this.setValues('hsl', hsl);
		return this;
	},

	/**
	 * Ported from sass implementation in C
	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
	 */
	mix: function (mixinColor, weight) {
		var color1 = this;
		var color2 = mixinColor;
		var p = weight === undefined ? 0.5 : weight;

		var w = 2 * p - 1;
		var a = color1.alpha() - color2.alpha();

		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
		var w2 = 1 - w1;

		return this
			.rgb(
				w1 * color1.red() + w2 * color2.red(),
				w1 * color1.green() + w2 * color2.green(),
				w1 * color1.blue() + w2 * color2.blue()
			)
			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
	},

	toJSON: function () {
		return this.rgb();
	},

	clone: function () {
		// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
		// making the final build way to big to embed in Chart.js. So let's do it manually,
		// assuming that values to clone are 1 dimension arrays containing only numbers,
		// except 'alpha' which is a number.
		var result = new Color();
		var source = this.values;
		var target = result.values;
		var value, type;

		for (var prop in source) {
			if (source.hasOwnProperty(prop)) {
				value = source[prop];
				type = ({}).toString.call(value);
				if (type === '[object Array]') {
					target[prop] = value.slice(0);
				} else if (type === '[object Number]') {
					target[prop] = value;
				} else {
					console.error('unexpected color value:', value);
				}
			}
		}

		return result;
	}
};

Color.prototype.spaces = {
	rgb: ['red', 'green', 'blue'],
	hsl: ['hue', 'saturation', 'lightness'],
	hsv: ['hue', 'saturation', 'value'],
	hwb: ['hue', 'whiteness', 'blackness'],
	cmyk: ['cyan', 'magenta', 'yellow', 'black']
};

Color.prototype.maxes = {
	rgb: [255, 255, 255],
	hsl: [360, 100, 100],
	hsv: [360, 100, 100],
	hwb: [360, 100, 100],
	cmyk: [100, 100, 100, 100]
};

Color.prototype.getValues = function (space) {
	var values = this.values;
	var vals = {};

	for (var i = 0; i < space.length; i++) {
		vals[space.charAt(i)] = values[space][i];
	}

	if (values.alpha !== 1) {
		vals.a = values.alpha;
	}

	// {r: 255, g: 255, b: 255, a: 0.4}
	return vals;
};

Color.prototype.setValues = function (space, vals) {
	var values = this.values;
	var spaces = this.spaces;
	var maxes = this.maxes;
	var alpha = 1;
	var i;

	this.valid = true;

	if (space === 'alpha') {
		alpha = vals;
	} else if (vals.length) {
		// [10, 10, 10]
		values[space] = vals.slice(0, space.length);
		alpha = vals[space.length];
	} else if (vals[space.charAt(0)] !== undefined) {
		// {r: 10, g: 10, b: 10}
		for (i = 0; i < space.length; i++) {
			values[space][i] = vals[space.charAt(i)];
		}

		alpha = vals.a;
	} else if (vals[spaces[space][0]] !== undefined) {
		// {red: 10, green: 10, blue: 10}
		var chans = spaces[space];

		for (i = 0; i < space.length; i++) {
			values[space][i] = vals[chans[i]];
		}

		alpha = vals.alpha;
	}

	values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

	if (space === 'alpha') {
		return false;
	}

	var capped;

	// cap values of the space prior converting all values
	for (i = 0; i < space.length; i++) {
		capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
		values[space][i] = Math.round(capped);
	}

	// convert to all the other color spaces
	for (var sname in spaces) {
		if (sname !== space) {
			values[sname] = colorConvert[space][sname](values[space]);
		}
	}

	return true;
};

Color.prototype.setSpace = function (space, args) {
	var vals = args[0];

	if (vals === undefined) {
		// color.rgb()
		return this.getValues(space);
	}

	// color.rgb(10, 10, 10)
	if (typeof vals === 'number') {
		vals = Array.prototype.slice.call(args);
	}

	this.setValues(space, vals);
	return this;
};

Color.prototype.setChannel = function (space, index, val) {
	var svalues = this.values[space];
	if (val === undefined) {
		// color.red()
		return svalues[index];
	} else if (val === svalues[index]) {
		// color.red(color.red())
		return this;
	}

	// color.red(100)
	svalues[index] = val;
	this.setValues(space, svalues);

	return this;
};

if (typeof window !== 'undefined') {
	window.Color = Color;
}

var chartjsColor = Color;

/**
 * @namespace Chart.helpers
 */
var helpers = {
	/**
	 * An empty function that can be used, for example, for optional callback.
	 */
	noop: function() {},

	/**
	 * Returns a unique id, sequentially generated from a global variable.
	 * @returns {number}
	 * @function
	 */
	uid: (function() {
		var id = 0;
		return function() {
			return id++;
		};
	}()),

	/**
	 * Returns true if `value` is neither null nor undefined, else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @since 2.7.0
	 */
	isNullOrUndef: function(value) {
		return value === null || typeof value === 'undefined';
	},

	/**
	 * Returns true if `value` is an array (including typed arrays), else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @function
	 */
	isArray: function(value) {
		if (Array.isArray && Array.isArray(value)) {
			return true;
		}
		var type = Object.prototype.toString.call(value);
		if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
			return true;
		}
		return false;
	},

	/**
	 * Returns true if `value` is an object (excluding null), else returns false.
	 * @param {*} value - The value to test.
	 * @returns {boolean}
	 * @since 2.7.0
	 */
	isObject: function(value) {
		return value !== null && Object.prototype.toString.call(value) === '[object Object]';
	},

	/**
	 * Returns true if `value` is a finite number, else returns false
	 * @param {*} value  - The value to test.
	 * @returns {boolean}
	 */
	isFinite: function(value) {
		return (typeof value === 'number' || value instanceof Number) && isFinite(value);
	},

	/**
	 * Returns `value` if defined, else returns `defaultValue`.
	 * @param {*} value - The value to return if defined.
	 * @param {*} defaultValue - The value to return if `value` is undefined.
	 * @returns {*}
	 */
	valueOrDefault: function(value, defaultValue) {
		return typeof value === 'undefined' ? defaultValue : value;
	},

	/**
	 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
	 * @param {Array} value - The array to lookup for value at `index`.
	 * @param {number} index - The index in `value` to lookup for value.
	 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
	 * @returns {*}
	 */
	valueAtIndexOrDefault: function(value, index, defaultValue) {
		return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
	},

	/**
	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
	 * @param {function} fn - The function to call.
	 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
	 * @returns {*}
	 */
	callback: function(fn, args, thisArg) {
		if (fn && typeof fn.call === 'function') {
			return fn.apply(thisArg, args);
		}
	},

	/**
	 * Note(SB) for performance sake, this method should only be used when loopable type
	 * is unknown or in none intensive code (not called often and small loopable). Else
	 * it's preferable to use a regular for() loop and save extra function calls.
	 * @param {object|Array} loopable - The object or array to be iterated.
	 * @param {function} fn - The function to call for each item.
	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
	 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
	 */
	each: function(loopable, fn, thisArg, reverse) {
		var i, len, keys;
		if (helpers.isArray(loopable)) {
			len = loopable.length;
			if (reverse) {
				for (i = len - 1; i >= 0; i--) {
					fn.call(thisArg, loopable[i], i);
				}
			} else {
				for (i = 0; i < len; i++) {
					fn.call(thisArg, loopable[i], i);
				}
			}
		} else if (helpers.isObject(loopable)) {
			keys = Object.keys(loopable);
			len = keys.length;
			for (i = 0; i < len; i++) {
				fn.call(thisArg, loopable[keys[i]], keys[i]);
			}
		}
	},

	/**
	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
	 * @see https://stackoverflow.com/a/14853974
	 * @param {Array} a0 - The array to compare
	 * @param {Array} a1 - The array to compare
	 * @returns {boolean}
	 */
	arrayEquals: function(a0, a1) {
		var i, ilen, v0, v1;

		if (!a0 || !a1 || a0.length !== a1.length) {
			return false;
		}

		for (i = 0, ilen = a0.length; i < ilen; ++i) {
			v0 = a0[i];
			v1 = a1[i];

			if (v0 instanceof Array && v1 instanceof Array) {
				if (!helpers.arrayEquals(v0, v1)) {
					return false;
				}
			} else if (v0 !== v1) {
				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
				return false;
			}
		}

		return true;
	},

	/**
	 * Returns a deep copy of `source` without keeping references on objects and arrays.
	 * @param {*} source - The value to clone.
	 * @returns {*}
	 */
	clone: function(source) {
		if (helpers.isArray(source)) {
			return source.map(helpers.clone);
		}

		if (helpers.isObject(source)) {
			var target = {};
			var keys = Object.keys(source);
			var klen = keys.length;
			var k = 0;

			for (; k < klen; ++k) {
				target[keys[k]] = helpers.clone(source[keys[k]]);
			}

			return target;
		}

		return source;
	},

	/**
	 * The default merger when Chart.helpers.merge is called without merger option.
	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
	 * @private
	 */
	_merger: function(key, target, source, options) {
		var tval = target[key];
		var sval = source[key];

		if (helpers.isObject(tval) && helpers.isObject(sval)) {
			helpers.merge(tval, sval, options);
		} else {
			target[key] = helpers.clone(sval);
		}
	},

	/**
	 * Merges source[key] in target[key] only if target[key] is undefined.
	 * @private
	 */
	_mergerIf: function(key, target, source) {
		var tval = target[key];
		var sval = source[key];

		if (helpers.isObject(tval) && helpers.isObject(sval)) {
			helpers.mergeIf(tval, sval);
		} else if (!target.hasOwnProperty(key)) {
			target[key] = helpers.clone(sval);
		}
	},

	/**
	 * Recursively deep copies `source` properties into `target` with the given `options`.
	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
	 * @param {object} target - The target object in which all sources are merged into.
	 * @param {object|object[]} source - Object(s) to merge into `target`.
	 * @param {object} [options] - Merging options:
	 * @param {function} [options.merger] - The merge method (key, target, source, options)
	 * @returns {object} The `target` object.
	 */
	merge: function(target, source, options) {
		var sources = helpers.isArray(source) ? source : [source];
		var ilen = sources.length;
		var merge, i, keys, klen, k;

		if (!helpers.isObject(target)) {
			return target;
		}

		options = options || {};
		merge = options.merger || helpers._merger;

		for (i = 0; i < ilen; ++i) {
			source = sources[i];
			if (!helpers.isObject(source)) {
				continue;
			}

			keys = Object.keys(source);
			for (k = 0, klen = keys.length; k < klen; ++k) {
				merge(keys[k], target, source, options);
			}
		}

		return target;
	},

	/**
	 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
	 * @param {object} target - The target object in which all sources are merged into.
	 * @param {object|object[]} source - Object(s) to merge into `target`.
	 * @returns {object} The `target` object.
	 */
	mergeIf: function(target, source) {
		return helpers.merge(target, source, {merger: helpers._mergerIf});
	},

	/**
	 * Applies the contents of two or more objects together into the first object.
	 * @param {object} target - The target object in which all objects are merged into.
	 * @param {object} arg1 - Object containing additional properties to merge in target.
	 * @param {object} argN - Additional objects containing properties to merge in target.
	 * @returns {object} The `target` object.
	 */
	extend: Object.assign || function(target) {
		return helpers.merge(target, [].slice.call(arguments, 1), {
			merger: function(key, dst, src) {
				dst[key] = src[key];
			}
		});
	},

	/**
	 * Basic javascript inheritance based on the model created in Backbone.js
	 */
	inherits: function(extensions) {
		var me = this;
		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
			return me.apply(this, arguments);
		};

		var Surrogate = function() {
			this.constructor = ChartElement;
		};

		Surrogate.prototype = me.prototype;
		ChartElement.prototype = new Surrogate();
		ChartElement.extend = helpers.inherits;

		if (extensions) {
			helpers.extend(ChartElement.prototype, extensions);
		}

		ChartElement.__super__ = me.prototype;
		return ChartElement;
	},

	_deprecated: function(scope, value, previous, current) {
		if (value !== undefined) {
			console.warn(scope + ': "' + previous +
				'" is deprecated. Please use "' + current + '" instead');
		}
	}
};

var helpers_core = helpers;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.callback instead.
 * @function Chart.helpers.callCallback
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 * @private
 */
helpers.callCallback = helpers.callback;

/**
 * Provided for backward compatibility, use Array.prototype.indexOf instead.
 * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
 * @function Chart.helpers.indexOf
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.indexOf = function(array, item, fromIndex) {
	return Array.prototype.indexOf.call(array, item, fromIndex);
};

/**
 * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
 * @function Chart.helpers.getValueOrDefault
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.getValueOrDefault = helpers.valueOrDefault;

/**
 * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
 * @function Chart.helpers.getValueAtIndexOrDefault
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;

/**
 * Easing functions adapted from Robert Penner's easing equations.
 * @namespace Chart.helpers.easingEffects
 * @see http://www.robertpenner.com/easing/
 */
var effects = {
	linear: function(t) {
		return t;
	},

	easeInQuad: function(t) {
		return t * t;
	},

	easeOutQuad: function(t) {
		return -t * (t - 2);
	},

	easeInOutQuad: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t;
		}
		return -0.5 * ((--t) * (t - 2) - 1);
	},

	easeInCubic: function(t) {
		return t * t * t;
	},

	easeOutCubic: function(t) {
		return (t = t - 1) * t * t + 1;
	},

	easeInOutCubic: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t;
		}
		return 0.5 * ((t -= 2) * t * t + 2);
	},

	easeInQuart: function(t) {
		return t * t * t * t;
	},

	easeOutQuart: function(t) {
		return -((t = t - 1) * t * t * t - 1);
	},

	easeInOutQuart: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t * t;
		}
		return -0.5 * ((t -= 2) * t * t * t - 2);
	},

	easeInQuint: function(t) {
		return t * t * t * t * t;
	},

	easeOutQuint: function(t) {
		return (t = t - 1) * t * t * t * t + 1;
	},

	easeInOutQuint: function(t) {
		if ((t /= 0.5) < 1) {
			return 0.5 * t * t * t * t * t;
		}
		return 0.5 * ((t -= 2) * t * t * t * t + 2);
	},

	easeInSine: function(t) {
		return -Math.cos(t * (Math.PI / 2)) + 1;
	},

	easeOutSine: function(t) {
		return Math.sin(t * (Math.PI / 2));
	},

	easeInOutSine: function(t) {
		return -0.5 * (Math.cos(Math.PI * t) - 1);
	},

	easeInExpo: function(t) {
		return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
	},

	easeOutExpo: function(t) {
		return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
	},

	easeInOutExpo: function(t) {
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if ((t /= 0.5) < 1) {
			return 0.5 * Math.pow(2, 10 * (t - 1));
		}
		return 0.5 * (-Math.pow(2, -10 * --t) + 2);
	},

	easeInCirc: function(t) {
		if (t >= 1) {
			return t;
		}
		return -(Math.sqrt(1 - t * t) - 1);
	},

	easeOutCirc: function(t) {
		return Math.sqrt(1 - (t = t - 1) * t);
	},

	easeInOutCirc: function(t) {
		if ((t /= 0.5) < 1) {
			return -0.5 * (Math.sqrt(1 - t * t) - 1);
		}
		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
	},

	easeInElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if (!p) {
			p = 0.3;
		}
		{
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
	},

	easeOutElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if (t === 1) {
			return 1;
		}
		if (!p) {
			p = 0.3;
		}
		{
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
	},

	easeInOutElastic: function(t) {
		var s = 1.70158;
		var p = 0;
		var a = 1;
		if (t === 0) {
			return 0;
		}
		if ((t /= 0.5) === 2) {
			return 1;
		}
		if (!p) {
			p = 0.45;
		}
		{
			s = p / (2 * Math.PI) * Math.asin(1 / a);
		}
		if (t < 1) {
			return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
		}
		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
	},
	easeInBack: function(t) {
		var s = 1.70158;
		return t * t * ((s + 1) * t - s);
	},

	easeOutBack: function(t) {
		var s = 1.70158;
		return (t = t - 1) * t * ((s + 1) * t + s) + 1;
	},

	easeInOutBack: function(t) {
		var s = 1.70158;
		if ((t /= 0.5) < 1) {
			return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
		}
		return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
	},

	easeInBounce: function(t) {
		return 1 - effects.easeOutBounce(1 - t);
	},

	easeOutBounce: function(t) {
		if (t < (1 / 2.75)) {
			return 7.5625 * t * t;
		}
		if (t < (2 / 2.75)) {
			return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
		}
		if (t < (2.5 / 2.75)) {
			return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
		}
		return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
	},

	easeInOutBounce: function(t) {
		if (t < 0.5) {
			return effects.easeInBounce(t * 2) * 0.5;
		}
		return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
	}
};

var helpers_easing = {
	effects: effects
};

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
 * @function Chart.helpers.easingEffects
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.easingEffects = effects;

var PI = Math.PI;
var RAD_PER_DEG = PI / 180;
var DOUBLE_PI = PI * 2;
var HALF_PI = PI / 2;
var QUARTER_PI = PI / 4;
var TWO_THIRDS_PI = PI * 2 / 3;

/**
 * @namespace Chart.helpers.canvas
 */
var exports$1 = {
	/**
	 * Clears the entire canvas associated to the given `chart`.
	 * @param {Chart} chart - The chart for which to clear the canvas.
	 */
	clear: function(chart) {
		chart.ctx.clearRect(0, 0, chart.width, chart.height);
	},

	/**
	 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
	 * given size (width, height) and the same `radius` for all corners.
	 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
	 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
	 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
	 * @param {number} width - The rectangle's width.
	 * @param {number} height - The rectangle's height.
	 * @param {number} radius - The rounded amount (in pixels) for the four corners.
	 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
	 */
	roundedRect: function(ctx, x, y, width, height, radius) {
		if (radius) {
			var r = Math.min(radius, height / 2, width / 2);
			var left = x + r;
			var top = y + r;
			var right = x + width - r;
			var bottom = y + height - r;

			ctx.moveTo(x, top);
			if (left < right && top < bottom) {
				ctx.arc(left, top, r, -PI, -HALF_PI);
				ctx.arc(right, top, r, -HALF_PI, 0);
				ctx.arc(right, bottom, r, 0, HALF_PI);
				ctx.arc(left, bottom, r, HALF_PI, PI);
			} else if (left < right) {
				ctx.moveTo(left, y);
				ctx.arc(right, top, r, -HALF_PI, HALF_PI);
				ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
			} else if (top < bottom) {
				ctx.arc(left, top, r, -PI, 0);
				ctx.arc(left, bottom, r, 0, PI);
			} else {
				ctx.arc(left, top, r, -PI, PI);
			}
			ctx.closePath();
			ctx.moveTo(x, y);
		} else {
			ctx.rect(x, y, width, height);
		}
	},

	drawPoint: function(ctx, style, radius, x, y, rotation) {
		var type, xOffset, yOffset, size, cornerRadius;
		var rad = (rotation || 0) * RAD_PER_DEG;

		if (style && typeof style === 'object') {
			type = style.toString();
			if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
				ctx.save();
				ctx.translate(x, y);
				ctx.rotate(rad);
				ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
				ctx.restore();
				return;
			}
		}

		if (isNaN(radius) || radius <= 0) {
			return;
		}

		ctx.beginPath();

		switch (style) {
		// Default includes circle
		default:
			ctx.arc(x, y, radius, 0, DOUBLE_PI);
			ctx.closePath();
			break;
		case 'triangle':
			ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			rad += TWO_THIRDS_PI;
			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			rad += TWO_THIRDS_PI;
			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
			ctx.closePath();
			break;
		case 'rectRounded':
			// NOTE: the rounded rect implementation changed to use `arc` instead of
			// `quadraticCurveTo` since it generates better results when rect is
			// almost a circle. 0.516 (instead of 0.5) produces results with visually
			// closer proportion to the previous impl and it is inscribed in the
			// circle with `radius`. For more details, see the following PRs:
			// https://github.com/chartjs/Chart.js/issues/5597
			// https://github.com/chartjs/Chart.js/issues/5858
			cornerRadius = radius * 0.516;
			size = radius - cornerRadius;
			xOffset = Math.cos(rad + QUARTER_PI) * size;
			yOffset = Math.sin(rad + QUARTER_PI) * size;
			ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
			ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
			ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
			ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
			ctx.closePath();
			break;
		case 'rect':
			if (!rotation) {
				size = Math.SQRT1_2 * radius;
				ctx.rect(x - size, y - size, 2 * size, 2 * size);
				break;
			}
			rad += QUARTER_PI;
			/* falls through */
		case 'rectRot':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + yOffset, y - xOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			ctx.closePath();
			break;
		case 'crossRot':
			rad += QUARTER_PI;
			/* falls through */
		case 'cross':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			break;
		case 'star':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			rad += QUARTER_PI;
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			ctx.moveTo(x + yOffset, y - xOffset);
			ctx.lineTo(x - yOffset, y + xOffset);
			break;
		case 'line':
			xOffset = Math.cos(rad) * radius;
			yOffset = Math.sin(rad) * radius;
			ctx.moveTo(x - xOffset, y - yOffset);
			ctx.lineTo(x + xOffset, y + yOffset);
			break;
		case 'dash':
			ctx.moveTo(x, y);
			ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
			break;
		}

		ctx.fill();
		ctx.stroke();
	},

	/**
	 * Returns true if the point is inside the rectangle
	 * @param {object} point - The point to test
	 * @param {object} area - The rectangle
	 * @returns {boolean}
	 * @private
	 */
	_isPointInArea: function(point, area) {
		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

		return point.x > area.left - epsilon && point.x < area.right + epsilon &&
			point.y > area.top - epsilon && point.y < area.bottom + epsilon;
	},

	clipArea: function(ctx, area) {
		ctx.save();
		ctx.beginPath();
		ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
		ctx.clip();
	},

	unclipArea: function(ctx) {
		ctx.restore();
	},

	lineTo: function(ctx, previous, target, flip) {
		var stepped = target.steppedLine;
		if (stepped) {
			if (stepped === 'middle') {
				var midpoint = (previous.x + target.x) / 2.0;
				ctx.lineTo(midpoint, flip ? target.y : previous.y);
				ctx.lineTo(midpoint, flip ? previous.y : target.y);
			} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
				ctx.lineTo(previous.x, target.y);
			} else {
				ctx.lineTo(target.x, previous.y);
			}
			ctx.lineTo(target.x, target.y);
			return;
		}

		if (!target.tension) {
			ctx.lineTo(target.x, target.y);
			return;
		}

		ctx.bezierCurveTo(
			flip ? previous.controlPointPreviousX : previous.controlPointNextX,
			flip ? previous.controlPointPreviousY : previous.controlPointNextY,
			flip ? target.controlPointNextX : target.controlPointPreviousX,
			flip ? target.controlPointNextY : target.controlPointPreviousY,
			target.x,
			target.y);
	}
};

var helpers_canvas = exports$1;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
 * @namespace Chart.helpers.clear
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.clear = exports$1.clear;

/**
 * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
 * @namespace Chart.helpers.drawRoundedRectangle
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers_core.drawRoundedRectangle = function(ctx) {
	ctx.beginPath();
	exports$1.roundedRect.apply(exports$1, arguments);
};

var defaults = {
	/**
	 * @private
	 */
	_set: function(scope, values) {
		return helpers_core.merge(this[scope] || (this[scope] = {}), values);
	}
};

// TODO(v3): remove 'global' from namespace.  all default are global and
// there's inconsistency around which options are under 'global'
defaults._set('global', {
	defaultColor: 'rgba(0,0,0,0.1)',
	defaultFontColor: '#666',
	defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
	defaultFontSize: 12,
	defaultFontStyle: 'normal',
	defaultLineHeight: 1.2,
	showLines: true
});

var core_defaults = defaults;

var valueOrDefault = helpers_core.valueOrDefault;

/**
 * Converts the given font object into a CSS font string.
 * @param {object} font - A font object.
 * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
 * @private
 */
function toFontString(font) {
	if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
		return null;
	}

	return (font.style ? font.style + ' ' : '')
		+ (font.weight ? font.weight + ' ' : '')
		+ font.size + 'px '
		+ font.family;
}

/**
 * @alias Chart.helpers.options
 * @namespace
 */
var helpers_options = {
	/**
	 * Converts the given line height `value` in pixels for a specific font `size`.
	 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
	 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
	 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
	 * @since 2.7.0
	 */
	toLineHeight: function(value, size) {
		var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
		if (!matches || matches[1] === 'normal') {
			return size * 1.2;
		}

		value = +matches[2];

		switch (matches[3]) {
		case 'px':
			return value;
		case '%':
			value /= 100;
			break;
		}

		return size * value;
	},

	/**
	 * Converts the given value into a padding object with pre-computed width/height.
	 * @param {number|object} value - If a number, set the value to all TRBL component,
	 *  else, if and object, use defined properties and sets undefined ones to 0.
	 * @returns {object} The padding values (top, right, bottom, left, width, height)
	 * @since 2.7.0
	 */
	toPadding: function(value) {
		var t, r, b, l;

		if (helpers_core.isObject(value)) {
			t = +value.top || 0;
			r = +value.right || 0;
			b = +value.bottom || 0;
			l = +value.left || 0;
		} else {
			t = r = b = l = +value || 0;
		}

		return {
			top: t,
			right: r,
			bottom: b,
			left: l,
			height: t + b,
			width: l + r
		};
	},

	/**
	 * Parses font options and returns the font object.
	 * @param {object} options - A object that contains font options to be parsed.
	 * @return {object} The font object.
	 * @todo Support font.* options and renamed to toFont().
	 * @private
	 */
	_parseFont: function(options) {
		var globalDefaults = core_defaults.global;
		var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
		var font = {
			family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
			lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
			size: size,
			style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
			weight: null,
			string: ''
		};

		font.string = toFontString(font);
		return font;
	},

	/**
	 * Evaluates the given `inputs` sequentially and returns the first defined value.
	 * @param {Array} inputs - An array of values, falling back to the last value.
	 * @param {object} [context] - If defined and the current value is a function, the value
	 * is called with `context` as first argument and the result becomes the new input.
	 * @param {number} [index] - If defined and the current value is an array, the value
	 * at `index` become the new input.
	 * @param {object} [info] - object to return information about resolution in
	 * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
	 * @since 2.7.0
	 */
	resolve: function(inputs, context, index, info) {
		var cacheable = true;
		var i, ilen, value;

		for (i = 0, ilen = inputs.length; i < ilen; ++i) {
			value = inputs[i];
			if (value === undefined) {
				continue;
			}
			if (context !== undefined && typeof value === 'function') {
				value = value(context);
				cacheable = false;
			}
			if (index !== undefined && helpers_core.isArray(value)) {
				value = value[index];
				cacheable = false;
			}
			if (value !== undefined) {
				if (info && !cacheable) {
					info.cacheable = false;
				}
				return value;
			}
		}
	}
};

/**
 * @alias Chart.helpers.math
 * @namespace
 */
var exports$2 = {
	/**
	 * Returns an array of factors sorted from 1 to sqrt(value)
	 * @private
	 */
	_factorize: function(value) {
		var result = [];
		var sqrt = Math.sqrt(value);
		var i;

		for (i = 1; i < sqrt; i++) {
			if (value % i === 0) {
				result.push(i);
				result.push(value / i);
			}
		}
		if (sqrt === (sqrt | 0)) { // if value is a square number
			result.push(sqrt);
		}

		result.sort(function(a, b) {
			return a - b;
		}).pop();
		return result;
	},

	log10: Math.log10 || function(x) {
		var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
		// Check for whole powers of 10,
		// which due to floating point rounding error should be corrected.
		var powerOf10 = Math.round(exponent);
		var isPowerOf10 = x === Math.pow(10, powerOf10);

		return isPowerOf10 ? powerOf10 : exponent;
	}
};

var helpers_math = exports$2;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
 * @namespace Chart.helpers.log10
 * @deprecated since version 2.9.0
 * @todo remove at version 3
 * @private
 */
helpers_core.log10 = exports$2.log10;

var getRtlAdapter = function(rectX, width) {
	return {
		x: function(x) {
			return rectX + rectX + width - x;
		},
		setWidth: function(w) {
			width = w;
		},
		textAlign: function(align) {
			if (align === 'center') {
				return align;
			}
			return align === 'right' ? 'left' : 'right';
		},
		xPlus: function(x, value) {
			return x - value;
		},
		leftForLtr: function(x, itemWidth) {
			return x - itemWidth;
		},
	};
};

var getLtrAdapter = function() {
	return {
		x: function(x) {
			return x;
		},
		setWidth: function(w) { // eslint-disable-line no-unused-vars
		},
		textAlign: function(align) {
			return align;
		},
		xPlus: function(x, value) {
			return x + value;
		},
		leftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars
			return x;
		},
	};
};

var getAdapter = function(rtl, rectX, width) {
	return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
};

var overrideTextDirection = function(ctx, direction) {
	var style, original;
	if (direction === 'ltr' || direction === 'rtl') {
		style = ctx.canvas.style;
		original = [
			style.getPropertyValue('direction'),
			style.getPropertyPriority('direction'),
		];

		style.setProperty('direction', direction, 'important');
		ctx.prevTextDirection = original;
	}
};

var restoreTextDirection = function(ctx) {
	var original = ctx.prevTextDirection;
	if (original !== undefined) {
		delete ctx.prevTextDirection;
		ctx.canvas.style.setProperty('direction', original[0], original[1]);
	}
};

var helpers_rtl = {
	getRtlAdapter: getAdapter,
	overrideTextDirection: overrideTextDirection,
	restoreTextDirection: restoreTextDirection,
};

var helpers$1 = helpers_core;
var easing = helpers_easing;
var canvas = helpers_canvas;
var options = helpers_options;
var math = helpers_math;
var rtl = helpers_rtl;
helpers$1.easing = easing;
helpers$1.canvas = canvas;
helpers$1.options = options;
helpers$1.math = math;
helpers$1.rtl = rtl;

function interpolate(start, view, model, ease) {
	var keys = Object.keys(model);
	var i, ilen, key, actual, origin, target, type, c0, c1;

	for (i = 0, ilen = keys.length; i < ilen; ++i) {
		key = keys[i];

		target = model[key];

		// if a value is added to the model after pivot() has been called, the view
		// doesn't contain it, so let's initialize the view to the target value.
		if (!view.hasOwnProperty(key)) {
			view[key] = target;
		}

		actual = view[key];

		if (actual === target || key[0] === '_') {
			continue;
		}

		if (!start.hasOwnProperty(key)) {
			start[key] = actual;
		}

		origin = start[key];

		type = typeof target;

		if (type === typeof origin) {
			if (type === 'string') {
				c0 = chartjsColor(origin);
				if (c0.valid) {
					c1 = chartjsColor(target);
					if (c1.valid) {
						view[key] = c1.mix(c0, ease).rgbString();
						continue;
					}
				}
			} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
				view[key] = origin + (target - origin) * ease;
				continue;
			}
		}

		view[key] = target;
	}
}

var Element = function(configuration) {
	helpers$1.extend(this, configuration);
	this.initialize.apply(this, arguments);
};

helpers$1.extend(Element.prototype, {
	_type: undefined,

	initialize: function() {
		this.hidden = false;
	},

	pivot: function() {
		var me = this;
		if (!me._view) {
			me._view = helpers$1.extend({}, me._model);
		}
		me._start = {};
		return me;
	},

	transition: function(ease) {
		var me = this;
		var model = me._model;
		var start = me._start;
		var view = me._view;

		// No animation -> No Transition
		if (!model || ease === 1) {
			me._view = helpers$1.extend({}, model);
			me._start = null;
			return me;
		}

		if (!view) {
			view = me._view = {};
		}

		if (!start) {
			start = me._start = {};
		}

		interpolate(start, view, model, ease);

		return me;
	},

	tooltipPosition: function() {
		return {
			x: this._model.x,
			y: this._model.y
		};
	},

	hasValue: function() {
		return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
	}
});

Element.extend = helpers$1.inherits;

var core_element = Element;

var exports$3 = core_element.extend({
	chart: null, // the animation associated chart instance
	currentStep: 0, // the current animation step
	numSteps: 60, // default number of steps
	easing: '', // the easing to use for this animation
	render: null, // render function used by the animation service

	onAnimationProgress: null, // user specified callback to fire on each step of the animation
	onAnimationComplete: null, // user specified callback to fire when the animation finishes
});

var core_animation = exports$3;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart.Animation instead
 * @prop Chart.Animation#animationObject
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 */
Object.defineProperty(exports$3.prototype, 'animationObject', {
	get: function() {
		return this;
	}
});

/**
 * Provided for backward compatibility, use Chart.Animation#chart instead
 * @prop Chart.Animation#chartInstance
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 */
Object.defineProperty(exports$3.prototype, 'chartInstance', {
	get: function() {
		return this.chart;
	},
	set: function(value) {
		this.chart = value;
	}
});

core_defaults._set('global', {
	animation: {
		duration: 1000,
		easing: 'easeOutQuart',
		onProgress: helpers$1.noop,
		onComplete: helpers$1.noop
	}
});

var core_animations = {
	animations: [],
	request: null,

	/**
	 * @param {Chart} chart - The chart to animate.
	 * @param {Chart.Animation} animation - The animation that we will animate.
	 * @param {number} duration - The animation duration in ms.
	 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
	 */
	addAnimation: function(chart, animation, duration, lazy) {
		var animations = this.animations;
		var i, ilen;

		animation.chart = chart;
		animation.startTime = Date.now();
		animation.duration = duration;

		if (!lazy) {
			chart.animating = true;
		}

		for (i = 0, ilen = animations.length; i < ilen; ++i) {
			if (animations[i].chart === chart) {
				animations[i] = animation;
				return;
			}
		}

		animations.push(animation);

		// If there are no animations queued, manually kickstart a digest, for lack of a better word
		if (animations.length === 1) {
			this.requestAnimationFrame();
		}
	},

	cancelAnimation: function(chart) {
		var index = helpers$1.findIndex(this.animations, function(animation) {
			return animation.chart === chart;
		});

		if (index !== -1) {
			this.animations.splice(index, 1);
			chart.animating = false;
		}
	},

	requestAnimationFrame: function() {
		var me = this;
		if (me.request === null) {
			// Skip animation frame requests until the active one is executed.
			// This can happen when processing mouse events, e.g. 'mousemove'
			// and 'mouseout' events will trigger multiple renders.
			me.request = helpers$1.requestAnimFrame.call(window, function() {
				me.request = null;
				me.startDigest();
			});
		}
	},

	/**
	 * @private
	 */
	startDigest: function() {
		var me = this;

		me.advance();

		// Do we have more stuff to animate?
		if (me.animations.length > 0) {
			me.requestAnimationFrame();
		}
	},

	/**
	 * @private
	 */
	advance: function() {
		var animations = this.animations;
		var animation, chart, numSteps, nextStep;
		var i = 0;

		// 1 animation per chart, so we are looping charts here
		while (i < animations.length) {
			animation = animations[i];
			chart = animation.chart;
			numSteps = animation.numSteps;

			// Make sure that currentStep starts at 1
			// https://github.com/chartjs/Chart.js/issues/6104
			nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
			animation.currentStep = Math.min(nextStep, numSteps);

			helpers$1.callback(animation.render, [chart, animation], chart);
			helpers$1.callback(animation.onAnimationProgress, [animation], chart);

			if (animation.currentStep >= numSteps) {
				helpers$1.callback(animation.onAnimationComplete, [animation], chart);
				chart.animating = false;
				animations.splice(i, 1);
			} else {
				++i;
			}
		}
	}
};

var resolve = helpers$1.options.resolve;

var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

/**
 * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
 * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
 * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
 */
function listenArrayEvents(array, listener) {
	if (array._chartjs) {
		array._chartjs.listeners.push(listener);
		return;
	}

	Object.defineProperty(array, '_chartjs', {
		configurable: true,
		enumerable: false,
		value: {
			listeners: [listener]
		}
	});

	arrayEvents.forEach(function(key) {
		var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
		var base = array[key];

		Object.defineProperty(array, key, {
			configurable: true,
			enumerable: false,
			value: function() {
				var args = Array.prototype.slice.call(arguments);
				var res = base.apply(this, args);

				helpers$1.each(array._chartjs.listeners, function(object) {
					if (typeof object[method] === 'function') {
						object[method].apply(object, args);
					}
				});

				return res;
			}
		});
	});
}

/**
 * Removes the given array event listener and cleanup extra attached properties (such as
 * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
 */
function unlistenArrayEvents(array, listener) {
	var stub = array._chartjs;
	if (!stub) {
		return;
	}

	var listeners = stub.listeners;
	var index = listeners.indexOf(listener);
	if (index !== -1) {
		listeners.splice(index, 1);
	}

	if (listeners.length > 0) {
		return;
	}

	arrayEvents.forEach(function(key) {
		delete array[key];
	});

	delete array._chartjs;
}

// Base class for all dataset controllers (line, bar, etc)
var DatasetController = function(chart, datasetIndex) {
	this.initialize(chart, datasetIndex);
};

helpers$1.extend(DatasetController.prototype, {

	/**
	 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
	 * @type {Chart.core.element}
	 */
	datasetElementType: null,

	/**
	 * Element type used to generate a meta data (e.g. Chart.element.Point).
	 * @type {Chart.core.element}
	 */
	dataElementType: null,

	/**
	 * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
	 * A derived controller may override this to resolve controller-specific options.
	 * The keys defined here are for backward compatibility for legend styles.
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderCapStyle',
		'borderColor',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'borderWidth'
	],

	/**
	 * Data element option keys to be resolved in _resolveDataElementOptions.
	 * A derived controller may override this to resolve controller-specific options.
	 * The keys defined here are for backward compatibility for legend styles.
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'pointStyle'
	],

	initialize: function(chart, datasetIndex) {
		var me = this;
		me.chart = chart;
		me.index = datasetIndex;
		me.linkScales();
		me.addElements();
		me._type = me.getMeta().type;
	},

	updateIndex: function(datasetIndex) {
		this.index = datasetIndex;
	},

	linkScales: function() {
		var me = this;
		var meta = me.getMeta();
		var chart = me.chart;
		var scales = chart.scales;
		var dataset = me.getDataset();
		var scalesOpts = chart.options.scales;

		if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
			meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
		}
		if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
			meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
		}
	},

	getDataset: function() {
		return this.chart.data.datasets[this.index];
	},

	getMeta: function() {
		return this.chart.getDatasetMeta(this.index);
	},

	getScaleForId: function(scaleID) {
		return this.chart.scales[scaleID];
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.getMeta().yAxisID;
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.getMeta().xAxisID;
	},

	/**
	 * @private
	 */
	_getValueScale: function() {
		return this.getScaleForId(this._getValueScaleId());
	},

	/**
	 * @private
	 */
	_getIndexScale: function() {
		return this.getScaleForId(this._getIndexScaleId());
	},

	reset: function() {
		this._update(true);
	},

	/**
	 * @private
	 */
	destroy: function() {
		if (this._data) {
			unlistenArrayEvents(this._data, this);
		}
	},

	createMetaDataset: function() {
		var me = this;
		var type = me.datasetElementType;
		return type && new type({
			_chart: me.chart,
			_datasetIndex: me.index
		});
	},

	createMetaData: function(index) {
		var me = this;
		var type = me.dataElementType;
		return type && new type({
			_chart: me.chart,
			_datasetIndex: me.index,
			_index: index
		});
	},

	addElements: function() {
		var me = this;
		var meta = me.getMeta();
		var data = me.getDataset().data || [];
		var metaData = meta.data;
		var i, ilen;

		for (i = 0, ilen = data.length; i < ilen; ++i) {
			metaData[i] = metaData[i] || me.createMetaData(i);
		}

		meta.dataset = meta.dataset || me.createMetaDataset();
	},

	addElementAndReset: function(index) {
		var element = this.createMetaData(index);
		this.getMeta().data.splice(index, 0, element);
		this.updateElement(element, index, true);
	},

	buildOrUpdateElements: function() {
		var me = this;
		var dataset = me.getDataset();
		var data = dataset.data || (dataset.data = []);

		// In order to correctly handle data addition/deletion animation (an thus simulate
		// real-time charts), we need to monitor these data modifications and synchronize
		// the internal meta data accordingly.
		if (me._data !== data) {
			if (me._data) {
				// This case happens when the user replaced the data array instance.
				unlistenArrayEvents(me._data, me);
			}

			if (data && Object.isExtensible(data)) {
				listenArrayEvents(data, me);
			}
			me._data = data;
		}

		// Re-sync meta data in case the user replaced the data array or if we missed
		// any updates and so make sure that we handle number of datapoints changing.
		me.resyncElements();
	},

	/**
	 * Returns the merged user-supplied and default dataset-level options
	 * @private
	 */
	_configure: function() {
		var me = this;
		me._config = helpers$1.merge({}, [
			me.chart.options.datasets[me._type],
			me.getDataset(),
		], {
			merger: function(key, target, source) {
				if (key !== '_meta' && key !== 'data') {
					helpers$1._merger(key, target, source);
				}
			}
		});
	},

	_update: function(reset) {
		var me = this;
		me._configure();
		me._cachedDataOpts = null;
		me.update(reset);
	},

	update: helpers$1.noop,

	transition: function(easingValue) {
		var meta = this.getMeta();
		var elements = meta.data || [];
		var ilen = elements.length;
		var i = 0;

		for (; i < ilen; ++i) {
			elements[i].transition(easingValue);
		}

		if (meta.dataset) {
			meta.dataset.transition(easingValue);
		}
	},

	draw: function() {
		var meta = this.getMeta();
		var elements = meta.data || [];
		var ilen = elements.length;
		var i = 0;

		if (meta.dataset) {
			meta.dataset.draw();
		}

		for (; i < ilen; ++i) {
			elements[i].draw();
		}
	},

	/**
	 * Returns a set of predefined style properties that should be used to represent the dataset
	 * or the data if the index is specified
	 * @param {number} index - data index
	 * @return {IStyleInterface} style object
	 */
	getStyle: function(index) {
		var me = this;
		var meta = me.getMeta();
		var dataset = meta.dataset;
		var style;

		me._configure();
		if (dataset && index === undefined) {
			style = me._resolveDatasetElementOptions(dataset || {});
		} else {
			index = index || 0;
			style = me._resolveDataElementOptions(meta.data[index] || {}, index);
		}

		if (style.fill === false || style.fill === null) {
			style.backgroundColor = style.borderColor;
		}

		return style;
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function(element, hover) {
		var me = this;
		var chart = me.chart;
		var datasetOpts = me._config;
		var custom = element.custom || {};
		var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
		var elementOptions = me._datasetElementOptions;
		var values = {};
		var i, ilen, key, readKey;

		// Scriptable options
		var context = {
			chart: chart,
			dataset: me.getDataset(),
			datasetIndex: me.index,
			hover: hover
		};

		for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
			key = elementOptions[i];
			readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
			values[key] = resolve([
				custom[readKey],
				datasetOpts[readKey],
				options[readKey]
			], context);
		}

		return values;
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function(element, index) {
		var me = this;
		var custom = element && element.custom;
		var cached = me._cachedDataOpts;
		if (cached && !custom) {
			return cached;
		}
		var chart = me.chart;
		var datasetOpts = me._config;
		var options = chart.options.elements[me.dataElementType.prototype._type] || {};
		var elementOptions = me._dataElementOptions;
		var values = {};

		// Scriptable options
		var context = {
			chart: chart,
			dataIndex: index,
			dataset: me.getDataset(),
			datasetIndex: me.index
		};

		// `resolve` sets cacheable to `false` if any option is indexed or scripted
		var info = {cacheable: !custom};

		var keys, i, ilen, key;

		custom = custom || {};

		if (helpers$1.isArray(elementOptions)) {
			for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
				key = elementOptions[i];
				values[key] = resolve([
					custom[key],
					datasetOpts[key],
					options[key]
				], context, index, info);
			}
		} else {
			keys = Object.keys(elementOptions);
			for (i = 0, ilen = keys.length; i < ilen; ++i) {
				key = keys[i];
				values[key] = resolve([
					custom[key],
					datasetOpts[elementOptions[key]],
					datasetOpts[key],
					options[key]
				], context, index, info);
			}
		}

		if (info.cacheable) {
			me._cachedDataOpts = Object.freeze(values);
		}

		return values;
	},

	removeHoverStyle: function(element) {
		helpers$1.merge(element._model, element.$previousStyle || {});
		delete element.$previousStyle;
	},

	setHoverStyle: function(element) {
		var dataset = this.chart.data.datasets[element._datasetIndex];
		var index = element._index;
		var custom = element.custom || {};
		var model = element._model;
		var getHoverColor = helpers$1.getHoverColor;

		element.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth
		};

		model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
		model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
		model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
	},

	/**
	 * @private
	 */
	_removeDatasetHoverStyle: function() {
		var element = this.getMeta().dataset;

		if (element) {
			this.removeHoverStyle(element);
		}
	},

	/**
	 * @private
	 */
	_setDatasetHoverStyle: function() {
		var element = this.getMeta().dataset;
		var prev = {};
		var i, ilen, key, keys, hoverOptions, model;

		if (!element) {
			return;
		}

		model = element._model;
		hoverOptions = this._resolveDatasetElementOptions(element, true);

		keys = Object.keys(hoverOptions);
		for (i = 0, ilen = keys.length; i < ilen; ++i) {
			key = keys[i];
			prev[key] = model[key];
			model[key] = hoverOptions[key];
		}

		element.$previousStyle = prev;
	},

	/**
	 * @private
	 */
	resyncElements: function() {
		var me = this;
		var meta = me.getMeta();
		var data = me.getDataset().data;
		var numMeta = meta.data.length;
		var numData = data.length;

		if (numData < numMeta) {
			meta.data.splice(numData, numMeta - numData);
		} else if (numData > numMeta) {
			me.insertElements(numMeta, numData - numMeta);
		}
	},

	/**
	 * @private
	 */
	insertElements: function(start, count) {
		for (var i = 0; i < count; ++i) {
			this.addElementAndReset(start + i);
		}
	},

	/**
	 * @private
	 */
	onDataPush: function() {
		var count = arguments.length;
		this.insertElements(this.getDataset().data.length - count, count);
	},

	/**
	 * @private
	 */
	onDataPop: function() {
		this.getMeta().data.pop();
	},

	/**
	 * @private
	 */
	onDataShift: function() {
		this.getMeta().data.shift();
	},

	/**
	 * @private
	 */
	onDataSplice: function(start, count) {
		this.getMeta().data.splice(start, count);
		this.insertElements(start, arguments.length - 2);
	},

	/**
	 * @private
	 */
	onDataUnshift: function() {
		this.insertElements(0, arguments.length);
	}
});

DatasetController.extend = helpers$1.inherits;

var core_datasetController = DatasetController;

var TAU = Math.PI * 2;

core_defaults._set('global', {
	elements: {
		arc: {
			backgroundColor: core_defaults.global.defaultColor,
			borderColor: '#fff',
			borderWidth: 2,
			borderAlign: 'center'
		}
	}
});

function clipArc(ctx, arc) {
	var startAngle = arc.startAngle;
	var endAngle = arc.endAngle;
	var pixelMargin = arc.pixelMargin;
	var angleMargin = pixelMargin / arc.outerRadius;
	var x = arc.x;
	var y = arc.y;

	// Draw an inner border by cliping the arc and drawing a double-width border
	// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
	ctx.beginPath();
	ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
	if (arc.innerRadius > pixelMargin) {
		angleMargin = pixelMargin / arc.innerRadius;
		ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
	} else {
		ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
	}
	ctx.closePath();
	ctx.clip();
}

function drawFullCircleBorders(ctx, vm, arc, inner) {
	var endAngle = arc.endAngle;
	var i;

	if (inner) {
		arc.endAngle = arc.startAngle + TAU;
		clipArc(ctx, arc);
		arc.endAngle = endAngle;
		if (arc.endAngle === arc.startAngle && arc.fullCircles) {
			arc.endAngle += TAU;
			arc.fullCircles--;
		}
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
	for (i = 0; i < arc.fullCircles; ++i) {
		ctx.stroke();
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
	for (i = 0; i < arc.fullCircles; ++i) {
		ctx.stroke();
	}
}

function drawBorder(ctx, vm, arc) {
	var inner = vm.borderAlign === 'inner';

	if (inner) {
		ctx.lineWidth = vm.borderWidth * 2;
		ctx.lineJoin = 'round';
	} else {
		ctx.lineWidth = vm.borderWidth;
		ctx.lineJoin = 'bevel';
	}

	if (arc.fullCircles) {
		drawFullCircleBorders(ctx, vm, arc, inner);
	}

	if (inner) {
		clipArc(ctx, arc);
	}

	ctx.beginPath();
	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
	ctx.closePath();
	ctx.stroke();
}

var element_arc = core_element.extend({
	_type: 'arc',

	inLabelRange: function(mouseX) {
		var vm = this._view;

		if (vm) {
			return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
		}
		return false;
	},

	inRange: function(chartX, chartY) {
		var vm = this._view;

		if (vm) {
			var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
			var angle = pointRelativePosition.angle;
			var distance = pointRelativePosition.distance;

			// Sanitise angle range
			var startAngle = vm.startAngle;
			var endAngle = vm.endAngle;
			while (endAngle < startAngle) {
				endAngle += TAU;
			}
			while (angle > endAngle) {
				angle -= TAU;
			}
			while (angle < startAngle) {
				angle += TAU;
			}

			// Check if within the range of the open/close angle
			var betweenAngles = (angle >= startAngle && angle <= endAngle);
			var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

			return (betweenAngles && withinRadius);
		}
		return false;
	},

	getCenterPoint: function() {
		var vm = this._view;
		var halfAngle = (vm.startAngle + vm.endAngle) / 2;
		var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
		return {
			x: vm.x + Math.cos(halfAngle) * halfRadius,
			y: vm.y + Math.sin(halfAngle) * halfRadius
		};
	},

	getArea: function() {
		var vm = this._view;
		return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
	},

	tooltipPosition: function() {
		var vm = this._view;
		var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
		var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;

		return {
			x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
			y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
		};
	},

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
		var arc = {
			x: vm.x,
			y: vm.y,
			innerRadius: vm.innerRadius,
			outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
			pixelMargin: pixelMargin,
			startAngle: vm.startAngle,
			endAngle: vm.endAngle,
			fullCircles: Math.floor(vm.circumference / TAU)
		};
		var i;

		ctx.save();

		ctx.fillStyle = vm.backgroundColor;
		ctx.strokeStyle = vm.borderColor;

		if (arc.fullCircles) {
			arc.endAngle = arc.startAngle + TAU;
			ctx.beginPath();
			ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
			ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
			ctx.closePath();
			for (i = 0; i < arc.fullCircles; ++i) {
				ctx.fill();
			}
			arc.endAngle = arc.startAngle + vm.circumference % TAU;
		}

		ctx.beginPath();
		ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
		ctx.closePath();
		ctx.fill();

		if (vm.borderWidth) {
			drawBorder(ctx, vm, arc);
		}

		ctx.restore();
	}
});

var valueOrDefault$1 = helpers$1.valueOrDefault;

var defaultColor = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		line: {
			tension: 0.4,
			backgroundColor: defaultColor,
			borderWidth: 3,
			borderColor: defaultColor,
			borderCapStyle: 'butt',
			borderDash: [],
			borderDashOffset: 0.0,
			borderJoinStyle: 'miter',
			capBezierPoints: true,
			fill: true, // do we fill in the area between the line and its base axis
		}
	}
});

var element_line = core_element.extend({
	_type: 'line',

	draw: function() {
		var me = this;
		var vm = me._view;
		var ctx = me._chart.ctx;
		var spanGaps = vm.spanGaps;
		var points = me._children.slice(); // clone array
		var globalDefaults = core_defaults.global;
		var globalOptionLineElements = globalDefaults.elements.line;
		var lastDrawnIndex = -1;
		var closePath = me._loop;
		var index, previous, currentVM;

		if (!points.length) {
			return;
		}

		if (me._loop) {
			for (index = 0; index < points.length; ++index) {
				previous = helpers$1.previousItem(points, index);
				// If the line has an open path, shift the point array
				if (!points[index]._view.skip && previous._view.skip) {
					points = points.slice(index).concat(points.slice(0, index));
					closePath = spanGaps;
					break;
				}
			}
			// If the line has a close path, add the first point again
			if (closePath) {
				points.push(points[0]);
			}
		}

		ctx.save();

		// Stroke Line Options
		ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

		// IE 9 and 10 do not support line dash
		if (ctx.setLineDash) {
			ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
		}

		ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
		ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
		ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
		ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

		// Stroke Line
		ctx.beginPath();

		// First point moves to it's starting position no matter what
		currentVM = points[0]._view;
		if (!currentVM.skip) {
			ctx.moveTo(currentVM.x, currentVM.y);
			lastDrawnIndex = 0;
		}

		for (index = 1; index < points.length; ++index) {
			currentVM = points[index]._view;
			previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];

			if (!currentVM.skip) {
				if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
					// There was a gap and this is the first point after the gap
					ctx.moveTo(currentVM.x, currentVM.y);
				} else {
					// Line to next point
					helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
				}
				lastDrawnIndex = index;
			}
		}

		if (closePath) {
			ctx.closePath();
		}

		ctx.stroke();
		ctx.restore();
	}
});

var valueOrDefault$2 = helpers$1.valueOrDefault;

var defaultColor$1 = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		point: {
			radius: 3,
			pointStyle: 'circle',
			backgroundColor: defaultColor$1,
			borderColor: defaultColor$1,
			borderWidth: 1,
			// Hover
			hitRadius: 1,
			hoverRadius: 4,
			hoverBorderWidth: 1
		}
	}
});

function xRange(mouseX) {
	var vm = this._view;
	return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
}

function yRange(mouseY) {
	var vm = this._view;
	return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
}

var element_point = core_element.extend({
	_type: 'point',

	inRange: function(mouseX, mouseY) {
		var vm = this._view;
		return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
	},

	inLabelRange: xRange,
	inXRange: xRange,
	inYRange: yRange,

	getCenterPoint: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y
		};
	},

	getArea: function() {
		return Math.PI * Math.pow(this._view.radius, 2);
	},

	tooltipPosition: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y,
			padding: vm.radius + vm.borderWidth
		};
	},

	draw: function(chartArea) {
		var vm = this._view;
		var ctx = this._chart.ctx;
		var pointStyle = vm.pointStyle;
		var rotation = vm.rotation;
		var radius = vm.radius;
		var x = vm.x;
		var y = vm.y;
		var globalDefaults = core_defaults.global;
		var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

		if (vm.skip) {
			return;
		}

		// Clipping for Points.
		if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
			ctx.strokeStyle = vm.borderColor || defaultColor;
			ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
			ctx.fillStyle = vm.backgroundColor || defaultColor;
			helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
		}
	}
});

var defaultColor$2 = core_defaults.global.defaultColor;

core_defaults._set('global', {
	elements: {
		rectangle: {
			backgroundColor: defaultColor$2,
			borderColor: defaultColor$2,
			borderSkipped: 'bottom',
			borderWidth: 0
		}
	}
});

function isVertical(vm) {
	return vm && vm.width !== undefined;
}

/**
 * Helper function to get the bounds of the bar regardless of the orientation
 * @param bar {Chart.Element.Rectangle} the bar
 * @return {Bounds} bounds of the bar
 * @private
 */
function getBarBounds(vm) {
	var x1, x2, y1, y2, half;

	if (isVertical(vm)) {
		half = vm.width / 2;
		x1 = vm.x - half;
		x2 = vm.x + half;
		y1 = Math.min(vm.y, vm.base);
		y2 = Math.max(vm.y, vm.base);
	} else {
		half = vm.height / 2;
		x1 = Math.min(vm.x, vm.base);
		x2 = Math.max(vm.x, vm.base);
		y1 = vm.y - half;
		y2 = vm.y + half;
	}

	return {
		left: x1,
		top: y1,
		right: x2,
		bottom: y2
	};
}

function swap(orig, v1, v2) {
	return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}

function parseBorderSkipped(vm) {
	var edge = vm.borderSkipped;
	var res = {};

	if (!edge) {
		return res;
	}

	if (vm.horizontal) {
		if (vm.base > vm.x) {
			edge = swap(edge, 'left', 'right');
		}
	} else if (vm.base < vm.y) {
		edge = swap(edge, 'bottom', 'top');
	}

	res[edge] = true;
	return res;
}

function parseBorderWidth(vm, maxW, maxH) {
	var value = vm.borderWidth;
	var skip = parseBorderSkipped(vm);
	var t, r, b, l;

	if (helpers$1.isObject(value)) {
		t = +value.top || 0;
		r = +value.right || 0;
		b = +value.bottom || 0;
		l = +value.left || 0;
	} else {
		t = r = b = l = +value || 0;
	}

	return {
		t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
		r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
		b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
		l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
	};
}

function boundingRects(vm) {
	var bounds = getBarBounds(vm);
	var width = bounds.right - bounds.left;
	var height = bounds.bottom - bounds.top;
	var border = parseBorderWidth(vm, width / 2, height / 2);

	return {
		outer: {
			x: bounds.left,
			y: bounds.top,
			w: width,
			h: height
		},
		inner: {
			x: bounds.left + border.l,
			y: bounds.top + border.t,
			w: width - border.l - border.r,
			h: height - border.t - border.b
		}
	};
}

function inRange(vm, x, y) {
	var skipX = x === null;
	var skipY = y === null;
	var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);

	return bounds
		&& (skipX || x >= bounds.left && x <= bounds.right)
		&& (skipY || y >= bounds.top && y <= bounds.bottom);
}

var element_rectangle = core_element.extend({
	_type: 'rectangle',

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var rects = boundingRects(vm);
		var outer = rects.outer;
		var inner = rects.inner;

		ctx.fillStyle = vm.backgroundColor;
		ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

		if (outer.w === inner.w && outer.h === inner.h) {
			return;
		}

		ctx.save();
		ctx.beginPath();
		ctx.rect(outer.x, outer.y, outer.w, outer.h);
		ctx.clip();
		ctx.fillStyle = vm.borderColor;
		ctx.rect(inner.x, inner.y, inner.w, inner.h);
		ctx.fill('evenodd');
		ctx.restore();
	},

	height: function() {
		var vm = this._view;
		return vm.base - vm.y;
	},

	inRange: function(mouseX, mouseY) {
		return inRange(this._view, mouseX, mouseY);
	},

	inLabelRange: function(mouseX, mouseY) {
		var vm = this._view;
		return isVertical(vm)
			? inRange(vm, mouseX, null)
			: inRange(vm, null, mouseY);
	},

	inXRange: function(mouseX) {
		return inRange(this._view, mouseX, null);
	},

	inYRange: function(mouseY) {
		return inRange(this._view, null, mouseY);
	},

	getCenterPoint: function() {
		var vm = this._view;
		var x, y;
		if (isVertical(vm)) {
			x = vm.x;
			y = (vm.y + vm.base) / 2;
		} else {
			x = (vm.x + vm.base) / 2;
			y = vm.y;
		}

		return {x: x, y: y};
	},

	getArea: function() {
		var vm = this._view;

		return isVertical(vm)
			? vm.width * Math.abs(vm.y - vm.base)
			: vm.height * Math.abs(vm.x - vm.base);
	},

	tooltipPosition: function() {
		var vm = this._view;
		return {
			x: vm.x,
			y: vm.y
		};
	}
});

var elements = {};
var Arc = element_arc;
var Line = element_line;
var Point = element_point;
var Rectangle = element_rectangle;
elements.Arc = Arc;
elements.Line = Line;
elements.Point = Point;
elements.Rectangle = Rectangle;

var deprecated = helpers$1._deprecated;
var valueOrDefault$3 = helpers$1.valueOrDefault;

core_defaults._set('bar', {
	hover: {
		mode: 'label'
	},

	scales: {
		xAxes: [{
			type: 'category',
			offset: true,
			gridLines: {
				offsetGridLines: true
			}
		}],

		yAxes: [{
			type: 'linear'
		}]
	}
});

core_defaults._set('global', {
	datasets: {
		bar: {
			categoryPercentage: 0.8,
			barPercentage: 0.9
		}
	}
});

/**
 * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
 * @private
 */
function computeMinSampleSize(scale, pixels) {
	var min = scale._length;
	var prev, curr, i, ilen;

	for (i = 1, ilen = pixels.length; i < ilen; ++i) {
		min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
	}

	for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
		curr = scale.getPixelForTick(i);
		min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
		prev = curr;
	}

	return min;
}

/**
 * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
 * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
 * mode currently always generates bars equally sized (until we introduce scriptable options?).
 * @private
 */
function computeFitCategoryTraits(index, ruler, options) {
	var thickness = options.barThickness;
	var count = ruler.stackCount;
	var curr = ruler.pixels[index];
	var min = helpers$1.isNullOrUndef(thickness)
		? computeMinSampleSize(ruler.scale, ruler.pixels)
		: -1;
	var size, ratio;

	if (helpers$1.isNullOrUndef(thickness)) {
		size = min * options.categoryPercentage;
		ratio = options.barPercentage;
	} else {
		// When bar thickness is enforced, category and bar percentages are ignored.
		// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
		// and deprecate barPercentage since this value is ignored when thickness is absolute.
		size = thickness * count;
		ratio = 1;
	}

	return {
		chunk: size / count,
		ratio: ratio,
		start: curr - (size / 2)
	};
}

/**
 * Computes an "optimal" category that globally arranges bars side by side (no gap when
 * percentage options are 1), based on the previous and following categories. This mode
 * generates bars with different widths when data are not evenly spaced.
 * @private
 */
function computeFlexCategoryTraits(index, ruler, options) {
	var pixels = ruler.pixels;
	var curr = pixels[index];
	var prev = index > 0 ? pixels[index - 1] : null;
	var next = index < pixels.length - 1 ? pixels[index + 1] : null;
	var percent = options.categoryPercentage;
	var start, size;

	if (prev === null) {
		// first data: its size is double based on the next point or,
		// if it's also the last data, we use the scale size.
		prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
	}

	if (next === null) {
		// last data: its size is also double based on the previous point.
		next = curr + curr - prev;
	}

	start = curr - (curr - Math.min(prev, next)) / 2 * percent;
	size = Math.abs(next - prev) / 2 * percent;

	return {
		chunk: size / ruler.stackCount,
		ratio: options.barPercentage,
		start: start
	};
}

var controller_bar = core_datasetController.extend({

	dataElementType: elements.Rectangle,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderSkipped',
		'borderWidth',
		'barPercentage',
		'barThickness',
		'categoryPercentage',
		'maxBarThickness',
		'minBarLength'
	],

	initialize: function() {
		var me = this;
		var meta, scaleOpts;

		core_datasetController.prototype.initialize.apply(me, arguments);

		meta = me.getMeta();
		meta.stack = me.getDataset().stack;
		meta.bar = true;

		scaleOpts = me._getIndexScale().options;
		deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
		deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
		deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
		deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
		deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
	},

	update: function(reset) {
		var me = this;
		var rects = me.getMeta().data;
		var i, ilen;

		me._ruler = me.getRuler();

		for (i = 0, ilen = rects.length; i < ilen; ++i) {
			me.updateElement(rects[i], i, reset);
		}
	},

	updateElement: function(rectangle, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var dataset = me.getDataset();
		var options = me._resolveDataElementOptions(rectangle, index);

		rectangle._xScale = me.getScaleForId(meta.xAxisID);
		rectangle._yScale = me.getScaleForId(meta.yAxisID);
		rectangle._datasetIndex = me.index;
		rectangle._index = index;
		rectangle._model = {
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderSkipped: options.borderSkipped,
			borderWidth: options.borderWidth,
			datasetLabel: dataset.label,
			label: me.chart.data.labels[index]
		};

		if (helpers$1.isArray(dataset.data[index])) {
			rectangle._model.borderSkipped = null;
		}

		me._updateElementGeometry(rectangle, index, reset, options);

		rectangle.pivot();
	},

	/**
	 * @private
	 */
	_updateElementGeometry: function(rectangle, index, reset, options) {
		var me = this;
		var model = rectangle._model;
		var vscale = me._getValueScale();
		var base = vscale.getBasePixel();
		var horizontal = vscale.isHorizontal();
		var ruler = me._ruler || me.getRuler();
		var vpixels = me.calculateBarValuePixels(me.index, index, options);
		var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);

		model.horizontal = horizontal;
		model.base = reset ? base : vpixels.base;
		model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
		model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
		model.height = horizontal ? ipixels.size : undefined;
		model.width = horizontal ? undefined : ipixels.size;
	},

	/**
	 * Returns the stacks based on groups and bar visibility.
	 * @param {number} [last] - The dataset index
	 * @returns {string[]} The list of stack IDs
	 * @private
	 */
	_getStacks: function(last) {
		var me = this;
		var scale = me._getIndexScale();
		var metasets = scale._getMatchingVisibleMetas(me._type);
		var stacked = scale.options.stacked;
		var ilen = metasets.length;
		var stacks = [];
		var i, meta;

		for (i = 0; i < ilen; ++i) {
			meta = metasets[i];
			// stacked   | meta.stack
			//           | found | not found | undefined
			// false     |   x   |     x     |     x
			// true      |       |     x     |
			// undefined |       |     x     |     x
			if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
				(stacked === undefined && meta.stack === undefined)) {
				stacks.push(meta.stack);
			}
			if (meta.index === last) {
				break;
			}
		}

		return stacks;
	},

	/**
	 * Returns the effective number of stacks based on groups and bar visibility.
	 * @private
	 */
	getStackCount: function() {
		return this._getStacks().length;
	},

	/**
	 * Returns the stack index for the given dataset based on groups and bar visibility.
	 * @param {number} [datasetIndex] - The dataset index
	 * @param {string} [name] - The stack name to find
	 * @returns {number} The stack index
	 * @private
	 */
	getStackIndex: function(datasetIndex, name) {
		var stacks = this._getStacks(datasetIndex);
		var index = (name !== undefined)
			? stacks.indexOf(name)
			: -1; // indexOf returns -1 if element is not present

		return (index === -1)
			? stacks.length - 1
			: index;
	},

	/**
	 * @private
	 */
	getRuler: function() {
		var me = this;
		var scale = me._getIndexScale();
		var pixels = [];
		var i, ilen;

		for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
			pixels.push(scale.getPixelForValue(null, i, me.index));
		}

		return {
			pixels: pixels,
			start: scale._startPixel,
			end: scale._endPixel,
			stackCount: me.getStackCount(),
			scale: scale
		};
	},

	/**
	 * Note: pixel values are not clamped to the scale area.
	 * @private
	 */
	calculateBarValuePixels: function(datasetIndex, index, options) {
		var me = this;
		var chart = me.chart;
		var scale = me._getValueScale();
		var isHorizontal = scale.isHorizontal();
		var datasets = chart.data.datasets;
		var metasets = scale._getMatchingVisibleMetas(me._type);
		var value = scale._parseValue(datasets[datasetIndex].data[index]);
		var minBarLength = options.minBarLength;
		var stacked = scale.options.stacked;
		var stack = me.getMeta().stack;
		var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
		var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
		var ilen = metasets.length;
		var i, imeta, ivalue, base, head, size, stackLength;

		if (stacked || (stacked === undefined && stack !== undefined)) {
			for (i = 0; i < ilen; ++i) {
				imeta = metasets[i];

				if (imeta.index === datasetIndex) {
					break;
				}

				if (imeta.stack === stack) {
					stackLength = scale._parseValue(datasets[imeta.index].data[index]);
					ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;

					if ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {
						start += ivalue;
					}
				}
			}
		}

		base = scale.getPixelForValue(start);
		head = scale.getPixelForValue(start + length);
		size = head - base;

		if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
			size = minBarLength;
			if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
				head = base - minBarLength;
			} else {
				head = base + minBarLength;
			}
		}

		return {
			size: size,
			base: base,
			head: head,
			center: head + size / 2
		};
	},

	/**
	 * @private
	 */
	calculateBarIndexPixels: function(datasetIndex, index, ruler, options) {
		var me = this;
		var range = options.barThickness === 'flex'
			? computeFlexCategoryTraits(index, ruler, options)
			: computeFitCategoryTraits(index, ruler, options);

		var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
		var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
		var size = Math.min(
			valueOrDefault$3(options.maxBarThickness, Infinity),
			range.chunk * range.ratio);

		return {
			base: center - size / 2,
			head: center + size / 2,
			center: center,
			size: size
		};
	},

	draw: function() {
		var me = this;
		var chart = me.chart;
		var scale = me._getValueScale();
		var rects = me.getMeta().data;
		var dataset = me.getDataset();
		var ilen = rects.length;
		var i = 0;

		helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

		for (; i < ilen; ++i) {
			var val = scale._parseValue(dataset.data[i]);
			if (!isNaN(val.min) && !isNaN(val.max)) {
				rects[i].draw();
			}
		}

		helpers$1.canvas.unclipArea(chart.ctx);
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function() {
		var me = this;
		var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
		var indexOpts = me._getIndexScale().options;
		var valueOpts = me._getValueScale().options;

		values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
		values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
		values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
		values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
		values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);

		return values;
	}

});

var valueOrDefault$4 = helpers$1.valueOrDefault;
var resolve$1 = helpers$1.options.resolve;

core_defaults._set('bubble', {
	hover: {
		mode: 'single'
	},

	scales: {
		xAxes: [{
			type: 'linear', // bubble should probably use a linear scale by default
			position: 'bottom',
			id: 'x-axis-0' // need an ID so datasets can reference the scale
		}],
		yAxes: [{
			type: 'linear',
			position: 'left',
			id: 'y-axis-0'
		}]
	},

	tooltips: {
		callbacks: {
			title: function() {
				// Title doesn't make sense for scatter since we format the data as a point
				return '';
			},
			label: function(item, data) {
				var datasetLabel = data.datasets[item.datasetIndex].label || '';
				var dataPoint = data.datasets[item.datasetIndex].data[item.index];
				return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
			}
		}
	}
});

var controller_bubble = core_datasetController.extend({
	/**
	 * @protected
	 */
	dataElementType: elements.Point,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
		'hoverRadius',
		'hitRadius',
		'pointStyle',
		'rotation'
	],

	/**
	 * @protected
	 */
	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var points = meta.data;

		// Update Points
		helpers$1.each(points, function(point, index) {
			me.updateElement(point, index, reset);
		});
	},

	/**
	 * @protected
	 */
	updateElement: function(point, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var custom = point.custom || {};
		var xScale = me.getScaleForId(meta.xAxisID);
		var yScale = me.getScaleForId(meta.yAxisID);
		var options = me._resolveDataElementOptions(point, index);
		var data = me.getDataset().data[index];
		var dsIndex = me.index;

		var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
		var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);

		point._xScale = xScale;
		point._yScale = yScale;
		point._options = options;
		point._datasetIndex = dsIndex;
		point._index = index;
		point._model = {
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			hitRadius: options.hitRadius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			radius: reset ? 0 : options.radius,
			skip: custom.skip || isNaN(x) || isNaN(y),
			x: x,
			y: y,
		};

		point.pivot();
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
		model.radius = options.radius + options.hoverRadius;
	},

	/**
	 * @private
	 */
	_resolveDataElementOptions: function(point, index) {
		var me = this;
		var chart = me.chart;
		var dataset = me.getDataset();
		var custom = point.custom || {};
		var data = dataset.data[index] || {};
		var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);

		// Scriptable options
		var context = {
			chart: chart,
			dataIndex: index,
			dataset: dataset,
			datasetIndex: me.index
		};

		// In case values were cached (and thus frozen), we need to clone the values
		if (me._cachedDataOpts === values) {
			values = helpers$1.extend({}, values);
		}

		// Custom radius resolution
		values.radius = resolve$1([
			custom.radius,
			data.r,
			me._config.radius,
			chart.options.elements.point.radius
		], context, index);

		return values;
	}
});

var valueOrDefault$5 = helpers$1.valueOrDefault;

var PI$1 = Math.PI;
var DOUBLE_PI$1 = PI$1 * 2;
var HALF_PI$1 = PI$1 / 2;

core_defaults._set('doughnut', {
	animation: {
		// Boolean - Whether we animate the rotation of the Doughnut
		animateRotate: true,
		// Boolean - Whether we animate scaling the Doughnut from the centre
		animateScale: false
	},
	hover: {
		mode: 'single'
	},
	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var data = chart.data;
		var datasets = data.datasets;
		var labels = data.labels;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');
		if (datasets.length) {
			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
				listItem = list.appendChild(document.createElement('li'));
				listItemSpan = listItem.appendChild(document.createElement('span'));
				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
				if (labels[i]) {
					listItem.appendChild(document.createTextNode(labels[i]));
				}
			}
		}

		return list.outerHTML;
	},
	legend: {
		labels: {
			generateLabels: function(chart) {
				var data = chart.data;
				if (data.labels.length && data.datasets.length) {
					return data.labels.map(function(label, i) {
						var meta = chart.getDatasetMeta(0);
						var style = meta.controller.getStyle(i);

						return {
							text: label,
							fillStyle: style.backgroundColor,
							strokeStyle: style.borderColor,
							lineWidth: style.borderWidth,
							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

							// Extra data used for toggling the correct item
							index: i
						};
					});
				}
				return [];
			}
		},

		onClick: function(e, legendItem) {
			var index = legendItem.index;
			var chart = this.chart;
			var i, ilen, meta;

			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
				meta = chart.getDatasetMeta(i);
				// toggle visibility of index if exists
				if (meta.data[index]) {
					meta.data[index].hidden = !meta.data[index].hidden;
				}
			}

			chart.update();
		}
	},

	// The percentage of the chart that we cut out of the middle.
	cutoutPercentage: 50,

	// The rotation of the chart, where the first data arc begins.
	rotation: -HALF_PI$1,

	// The total circumference of the chart.
	circumference: DOUBLE_PI$1,

	// Need to override these to give a nice default
	tooltips: {
		callbacks: {
			title: function() {
				return '';
			},
			label: function(tooltipItem, data) {
				var dataLabel = data.labels[tooltipItem.index];
				var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

				if (helpers$1.isArray(dataLabel)) {
					// show value on first line of multiline label
					// need to clone because we are changing the value
					dataLabel = dataLabel.slice();
					dataLabel[0] += value;
				} else {
					dataLabel += value;
				}

				return dataLabel;
			}
		}
	}
});

var controller_doughnut = core_datasetController.extend({

	dataElementType: elements.Arc,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'borderAlign',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
	],

	// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
	getRingIndex: function(datasetIndex) {
		var ringIndex = 0;

		for (var j = 0; j < datasetIndex; ++j) {
			if (this.chart.isDatasetVisible(j)) {
				++ringIndex;
			}
		}

		return ringIndex;
	},

	update: function(reset) {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var ratioX = 1;
		var ratioY = 1;
		var offsetX = 0;
		var offsetY = 0;
		var meta = me.getMeta();
		var arcs = meta.data;
		var cutout = opts.cutoutPercentage / 100 || 0;
		var circumference = opts.circumference;
		var chartWeight = me._getRingWeight(me.index);
		var maxWidth, maxHeight, i, ilen;

		// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc
		if (circumference < DOUBLE_PI$1) {
			var startAngle = opts.rotation % DOUBLE_PI$1;
			startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
			var endAngle = startAngle + circumference;
			var startX = Math.cos(startAngle);
			var startY = Math.sin(startAngle);
			var endX = Math.cos(endAngle);
			var endY = Math.sin(endAngle);
			var contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;
			var contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
			var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
			var contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;
			var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
			var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
			var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
			var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
			ratioX = (maxX - minX) / 2;
			ratioY = (maxY - minY) / 2;
			offsetX = -(maxX + minX) / 2;
			offsetY = -(maxY + minY) / 2;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
		}

		chart.borderWidth = me.getMaxBorderWidth();
		maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
		maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
		chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
		chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
		chart.offsetX = offsetX * chart.outerRadius;
		chart.offsetY = offsetY * chart.outerRadius;

		meta.total = me.calculateTotal();

		me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
		me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			me.updateElement(arcs[i], i, reset);
		}
	},

	updateElement: function(arc, index, reset) {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var animationOpts = opts.animation;
		var centerX = (chartArea.left + chartArea.right) / 2;
		var centerY = (chartArea.top + chartArea.bottom) / 2;
		var startAngle = opts.rotation; // non reset case handled later
		var endAngle = opts.rotation; // non reset case handled later
		var dataset = me.getDataset();
		var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
		var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
		var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
		var options = arc._options || {};

		helpers$1.extend(arc, {
			// Utility
			_datasetIndex: me.index,
			_index: index,

			// Desired view properties
			_model: {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				borderAlign: options.borderAlign,
				x: centerX + chart.offsetX,
				y: centerY + chart.offsetY,
				startAngle: startAngle,
				endAngle: endAngle,
				circumference: circumference,
				outerRadius: outerRadius,
				innerRadius: innerRadius,
				label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
			}
		});

		var model = arc._model;

		// Set correct angles if not resetting
		if (!reset || !animationOpts.animateRotate) {
			if (index === 0) {
				model.startAngle = opts.rotation;
			} else {
				model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
			}

			model.endAngle = model.startAngle + model.circumference;
		}

		arc.pivot();
	},

	calculateTotal: function() {
		var dataset = this.getDataset();
		var meta = this.getMeta();
		var total = 0;
		var value;

		helpers$1.each(meta.data, function(element, index) {
			value = dataset.data[index];
			if (!isNaN(value) && !element.hidden) {
				total += Math.abs(value);
			}
		});

		/* if (total === 0) {
			total = NaN;
		}*/

		return total;
	},

	calculateCircumference: function(value) {
		var total = this.getMeta().total;
		if (total > 0 && !isNaN(value)) {
			return DOUBLE_PI$1 * (Math.abs(value) / total);
		}
		return 0;
	},

	// gets the max border or hover width to properly scale pie charts
	getMaxBorderWidth: function(arcs) {
		var me = this;
		var max = 0;
		var chart = me.chart;
		var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

		if (!arcs) {
			// Find the outmost visible dataset
			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
				if (chart.isDatasetVisible(i)) {
					meta = chart.getDatasetMeta(i);
					arcs = meta.data;
					if (i !== me.index) {
						controller = meta.controller;
					}
					break;
				}
			}
		}

		if (!arcs) {
			return 0;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arc = arcs[i];
			if (controller) {
				controller._configure();
				options = controller._resolveDataElementOptions(arc, i);
			} else {
				options = arc._options;
			}
			if (options.borderAlign !== 'inner') {
				borderWidth = options.borderWidth;
				hoverWidth = options.hoverBorderWidth;

				max = borderWidth > max ? borderWidth : max;
				max = hoverWidth > max ? hoverWidth : max;
			}
		}
		return max;
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(arc) {
		var model = arc._model;
		var options = arc._options;
		var getHoverColor = helpers$1.getHoverColor;

		arc.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
		};

		model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
	},

	/**
	 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
	 * @private
	 */
	_getRingWeightOffset: function(datasetIndex) {
		var ringWeightOffset = 0;

		for (var i = 0; i < datasetIndex; ++i) {
			if (this.chart.isDatasetVisible(i)) {
				ringWeightOffset += this._getRingWeight(i);
			}
		}

		return ringWeightOffset;
	},

	/**
	 * @private
	 */
	_getRingWeight: function(dataSetIndex) {
		return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
	},

	/**
	 * Returns the sum of all visibile data set weights.  This value can be 0.
	 * @private
	 */
	_getVisibleDatasetWeightTotal: function() {
		return this._getRingWeightOffset(this.chart.data.datasets.length);
	}
});

core_defaults._set('horizontalBar', {
	hover: {
		mode: 'index',
		axis: 'y'
	},

	scales: {
		xAxes: [{
			type: 'linear',
			position: 'bottom'
		}],

		yAxes: [{
			type: 'category',
			position: 'left',
			offset: true,
			gridLines: {
				offsetGridLines: true
			}
		}]
	},

	elements: {
		rectangle: {
			borderSkipped: 'left'
		}
	},

	tooltips: {
		mode: 'index',
		axis: 'y'
	}
});

core_defaults._set('global', {
	datasets: {
		horizontalBar: {
			categoryPercentage: 0.8,
			barPercentage: 0.9
		}
	}
});

var controller_horizontalBar = controller_bar.extend({
	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.getMeta().xAxisID;
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.getMeta().yAxisID;
	}
});

var valueOrDefault$6 = helpers$1.valueOrDefault;
var resolve$2 = helpers$1.options.resolve;
var isPointInArea = helpers$1.canvas._isPointInArea;

core_defaults._set('line', {
	showLines: true,
	spanGaps: false,

	hover: {
		mode: 'label'
	},

	scales: {
		xAxes: [{
			type: 'category',
			id: 'x-axis-0'
		}],
		yAxes: [{
			type: 'linear',
			id: 'y-axis-0'
		}]
	}
});

function scaleClip(scale, halfBorderWidth) {
	var tickOpts = scale && scale.options.ticks || {};
	var reverse = tickOpts.reverse;
	var min = tickOpts.min === undefined ? halfBorderWidth : 0;
	var max = tickOpts.max === undefined ? halfBorderWidth : 0;
	return {
		start: reverse ? max : min,
		end: reverse ? min : max
	};
}

function defaultClip(xScale, yScale, borderWidth) {
	var halfBorderWidth = borderWidth / 2;
	var x = scaleClip(xScale, halfBorderWidth);
	var y = scaleClip(yScale, halfBorderWidth);

	return {
		top: y.end,
		right: x.end,
		bottom: y.start,
		left: x.start
	};
}

function toClip(value) {
	var t, r, b, l;

	if (helpers$1.isObject(value)) {
		t = value.top;
		r = value.right;
		b = value.bottom;
		l = value.left;
	} else {
		t = r = b = l = value;
	}

	return {
		top: t,
		right: r,
		bottom: b,
		left: l
	};
}


var controller_line = core_datasetController.extend({

	datasetElementType: elements.Line,

	dataElementType: elements.Point,

	/**
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderCapStyle',
		'borderColor',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'borderWidth',
		'cubicInterpolationMode',
		'fill'
	],

	/**
	 * @private
	 */
	_dataElementOptions: {
		backgroundColor: 'pointBackgroundColor',
		borderColor: 'pointBorderColor',
		borderWidth: 'pointBorderWidth',
		hitRadius: 'pointHitRadius',
		hoverBackgroundColor: 'pointHoverBackgroundColor',
		hoverBorderColor: 'pointHoverBorderColor',
		hoverBorderWidth: 'pointHoverBorderWidth',
		hoverRadius: 'pointHoverRadius',
		pointStyle: 'pointStyle',
		radius: 'pointRadius',
		rotation: 'pointRotation'
	},

	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var line = meta.dataset;
		var points = meta.data || [];
		var options = me.chart.options;
		var config = me._config;
		var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
		var i, ilen;

		me._xScale = me.getScaleForId(meta.xAxisID);
		me._yScale = me.getScaleForId(meta.yAxisID);

		// Update Line
		if (showLine) {
			// Compatibility: If the properties are defined with only the old name, use those values
			if (config.tension !== undefined && config.lineTension === undefined) {
				config.lineTension = config.tension;
			}

			// Utility
			line._scale = me._yScale;
			line._datasetIndex = me.index;
			// Data
			line._children = points;
			// Model
			line._model = me._resolveDatasetElementOptions(line);

			line.pivot();
		}

		// Update Points
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			me.updateElement(points[i], i, reset);
		}

		if (showLine && line._model.tension !== 0) {
			me.updateBezierControlPoints();
		}

		// Now pivot the point for animation
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			points[i].pivot();
		}
	},

	updateElement: function(point, index, reset) {
		var me = this;
		var meta = me.getMeta();
		var custom = point.custom || {};
		var dataset = me.getDataset();
		var datasetIndex = me.index;
		var value = dataset.data[index];
		var xScale = me._xScale;
		var yScale = me._yScale;
		var lineModel = meta.dataset._model;
		var x, y;

		var options = me._resolveDataElementOptions(point, index);

		x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
		y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

		// Utility
		point._xScale = xScale;
		point._yScale = yScale;
		point._options = options;
		point._datasetIndex = datasetIndex;
		point._index = index;

		// Desired view properties
		point._model = {
			x: x,
			y: y,
			skip: custom.skip || isNaN(x) || isNaN(y),
			// Appearance
			radius: options.radius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
			steppedLine: lineModel ? lineModel.steppedLine : false,
			// Tooltip
			hitRadius: options.hitRadius
		};
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function(element) {
		var me = this;
		var config = me._config;
		var custom = element.custom || {};
		var options = me.chart.options;
		var lineOptions = options.elements.line;
		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

		// The default behavior of lines is to break at null values, according
		// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
		// This option gives lines the ability to span gaps
		values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
		values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
		values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
		values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));

		return values;
	},

	calculatePointY: function(value, index, datasetIndex) {
		var me = this;
		var chart = me.chart;
		var yScale = me._yScale;
		var sumPos = 0;
		var sumNeg = 0;
		var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;

		if (yScale.options.stacked) {
			rightValue = +yScale.getRightValue(value);
			metasets = chart._getSortedVisibleDatasetMetas();
			ilen = metasets.length;

			for (i = 0; i < ilen; ++i) {
				dsMeta = metasets[i];
				if (dsMeta.index === datasetIndex) {
					break;
				}

				ds = chart.data.datasets[dsMeta.index];
				if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
					stackedRightValue = +yScale.getRightValue(ds.data[index]);
					if (stackedRightValue < 0) {
						sumNeg += stackedRightValue || 0;
					} else {
						sumPos += stackedRightValue || 0;
					}
				}
			}

			if (rightValue < 0) {
				return yScale.getPixelForValue(sumNeg + rightValue);
			}
			return yScale.getPixelForValue(sumPos + rightValue);
		}
		return yScale.getPixelForValue(value);
	},

	updateBezierControlPoints: function() {
		var me = this;
		var chart = me.chart;
		var meta = me.getMeta();
		var lineModel = meta.dataset._model;
		var area = chart.chartArea;
		var points = meta.data || [];
		var i, ilen, model, controlPoints;

		// Only consider points that are drawn in case the spanGaps option is used
		if (lineModel.spanGaps) {
			points = points.filter(function(pt) {
				return !pt._model.skip;
			});
		}

		function capControlPoint(pt, min, max) {
			return Math.max(Math.min(pt, max), min);
		}

		if (lineModel.cubicInterpolationMode === 'monotone') {
			helpers$1.splineCurveMonotone(points);
		} else {
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				model = points[i]._model;
				controlPoints = helpers$1.splineCurve(
					helpers$1.previousItem(points, i)._model,
					model,
					helpers$1.nextItem(points, i)._model,
					lineModel.tension
				);
				model.controlPointPreviousX = controlPoints.previous.x;
				model.controlPointPreviousY = controlPoints.previous.y;
				model.controlPointNextX = controlPoints.next.x;
				model.controlPointNextY = controlPoints.next.y;
			}
		}

		if (chart.options.elements.line.capBezierPoints) {
			for (i = 0, ilen = points.length; i < ilen; ++i) {
				model = points[i]._model;
				if (isPointInArea(model, area)) {
					if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
					}
					if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
					}
				}
			}
		}
	},

	draw: function() {
		var me = this;
		var chart = me.chart;
		var meta = me.getMeta();
		var points = meta.data || [];
		var area = chart.chartArea;
		var canvas = chart.canvas;
		var i = 0;
		var ilen = points.length;
		var clip;

		if (me._showLine) {
			clip = meta.dataset._model.clip;

			helpers$1.canvas.clipArea(chart.ctx, {
				left: clip.left === false ? 0 : area.left - clip.left,
				right: clip.right === false ? canvas.width : area.right + clip.right,
				top: clip.top === false ? 0 : area.top - clip.top,
				bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
			});

			meta.dataset.draw();

			helpers$1.canvas.unclipArea(chart.ctx);
		}

		// Draw the points
		for (; i < ilen; ++i) {
			points[i].draw(area);
		}
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
		model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
	},
});

var resolve$3 = helpers$1.options.resolve;

core_defaults._set('polarArea', {
	scale: {
		type: 'radialLinear',
		angleLines: {
			display: false
		},
		gridLines: {
			circular: true
		},
		pointLabels: {
			display: false
		},
		ticks: {
			beginAtZero: true
		}
	},

	// Boolean - Whether to animate the rotation of the chart
	animation: {
		animateRotate: true,
		animateScale: true
	},

	startAngle: -0.5 * Math.PI,
	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var data = chart.data;
		var datasets = data.datasets;
		var labels = data.labels;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');
		if (datasets.length) {
			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
				listItem = list.appendChild(document.createElement('li'));
				listItemSpan = listItem.appendChild(document.createElement('span'));
				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
				if (labels[i]) {
					listItem.appendChild(document.createTextNode(labels[i]));
				}
			}
		}

		return list.outerHTML;
	},
	legend: {
		labels: {
			generateLabels: function(chart) {
				var data = chart.data;
				if (data.labels.length && data.datasets.length) {
					return data.labels.map(function(label, i) {
						var meta = chart.getDatasetMeta(0);
						var style = meta.controller.getStyle(i);

						return {
							text: label,
							fillStyle: style.backgroundColor,
							strokeStyle: style.borderColor,
							lineWidth: style.borderWidth,
							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

							// Extra data used for toggling the correct item
							index: i
						};
					});
				}
				return [];
			}
		},

		onClick: function(e, legendItem) {
			var index = legendItem.index;
			var chart = this.chart;
			var i, ilen, meta;

			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
				meta = chart.getDatasetMeta(i);
				meta.data[index].hidden = !meta.data[index].hidden;
			}

			chart.update();
		}
	},

	// Need to override these to give a nice default
	tooltips: {
		callbacks: {
			title: function() {
				return '';
			},
			label: function(item, data) {
				return data.labels[item.index] + ': ' + item.yLabel;
			}
		}
	}
});

var controller_polarArea = core_datasetController.extend({

	dataElementType: elements.Arc,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_dataElementOptions: [
		'backgroundColor',
		'borderColor',
		'borderWidth',
		'borderAlign',
		'hoverBackgroundColor',
		'hoverBorderColor',
		'hoverBorderWidth',
	],

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.chart.scale.id;
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.chart.scale.id;
	},

	update: function(reset) {
		var me = this;
		var dataset = me.getDataset();
		var meta = me.getMeta();
		var start = me.chart.options.startAngle || 0;
		var starts = me._starts = [];
		var angles = me._angles = [];
		var arcs = meta.data;
		var i, ilen, angle;

		me._updateRadius();

		meta.count = me.countVisibleElements();

		for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
			starts[i] = start;
			angle = me._computeAngle(i);
			angles[i] = angle;
			start += angle;
		}

		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
			me.updateElement(arcs[i], i, reset);
		}
	},

	/**
	 * @private
	 */
	_updateRadius: function() {
		var me = this;
		var chart = me.chart;
		var chartArea = chart.chartArea;
		var opts = chart.options;
		var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);

		chart.outerRadius = Math.max(minSize / 2, 0);
		chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

		me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
		me.innerRadius = me.outerRadius - chart.radiusLength;
	},

	updateElement: function(arc, index, reset) {
		var me = this;
		var chart = me.chart;
		var dataset = me.getDataset();
		var opts = chart.options;
		var animationOpts = opts.animation;
		var scale = chart.scale;
		var labels = chart.data.labels;

		var centerX = scale.xCenter;
		var centerY = scale.yCenter;

		// var negHalfPI = -0.5 * Math.PI;
		var datasetStartAngle = opts.startAngle;
		var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
		var startAngle = me._starts[index];
		var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);

		var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
		var options = arc._options || {};

		helpers$1.extend(arc, {
			// Utility
			_datasetIndex: me.index,
			_index: index,
			_scale: scale,

			// Desired view properties
			_model: {
				backgroundColor: options.backgroundColor,
				borderColor: options.borderColor,
				borderWidth: options.borderWidth,
				borderAlign: options.borderAlign,
				x: centerX,
				y: centerY,
				innerRadius: 0,
				outerRadius: reset ? resetRadius : distance,
				startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
				endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
				label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
			}
		});

		arc.pivot();
	},

	countVisibleElements: function() {
		var dataset = this.getDataset();
		var meta = this.getMeta();
		var count = 0;

		helpers$1.each(meta.data, function(element, index) {
			if (!isNaN(dataset.data[index]) && !element.hidden) {
				count++;
			}
		});

		return count;
	},

	/**
	 * @protected
	 */
	setHoverStyle: function(arc) {
		var model = arc._model;
		var options = arc._options;
		var getHoverColor = helpers$1.getHoverColor;
		var valueOrDefault = helpers$1.valueOrDefault;

		arc.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
		};

		model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
	},

	/**
	 * @private
	 */
	_computeAngle: function(index) {
		var me = this;
		var count = this.getMeta().count;
		var dataset = me.getDataset();
		var meta = me.getMeta();

		if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
			return 0;
		}

		// Scriptable options
		var context = {
			chart: me.chart,
			dataIndex: index,
			dataset: dataset,
			datasetIndex: me.index
		};

		return resolve$3([
			me.chart.options.elements.arc.angle,
			(2 * Math.PI) / count
		], context, index);
	}
});

core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
core_defaults._set('pie', {
	cutoutPercentage: 0
});

// Pie charts are Doughnut chart with different defaults
var controller_pie = controller_doughnut;

var valueOrDefault$7 = helpers$1.valueOrDefault;

core_defaults._set('radar', {
	spanGaps: false,
	scale: {
		type: 'radialLinear'
	},
	elements: {
		line: {
			fill: 'start',
			tension: 0 // no bezier in radar
		}
	}
});

var controller_radar = core_datasetController.extend({
	datasetElementType: elements.Line,

	dataElementType: elements.Point,

	linkScales: helpers$1.noop,

	/**
	 * @private
	 */
	_datasetElementOptions: [
		'backgroundColor',
		'borderWidth',
		'borderColor',
		'borderCapStyle',
		'borderDash',
		'borderDashOffset',
		'borderJoinStyle',
		'fill'
	],

	/**
	 * @private
	 */
	_dataElementOptions: {
		backgroundColor: 'pointBackgroundColor',
		borderColor: 'pointBorderColor',
		borderWidth: 'pointBorderWidth',
		hitRadius: 'pointHitRadius',
		hoverBackgroundColor: 'pointHoverBackgroundColor',
		hoverBorderColor: 'pointHoverBorderColor',
		hoverBorderWidth: 'pointHoverBorderWidth',
		hoverRadius: 'pointHoverRadius',
		pointStyle: 'pointStyle',
		radius: 'pointRadius',
		rotation: 'pointRotation'
	},

	/**
	 * @private
	 */
	_getIndexScaleId: function() {
		return this.chart.scale.id;
	},

	/**
	 * @private
	 */
	_getValueScaleId: function() {
		return this.chart.scale.id;
	},

	update: function(reset) {
		var me = this;
		var meta = me.getMeta();
		var line = meta.dataset;
		var points = meta.data || [];
		var scale = me.chart.scale;
		var config = me._config;
		var i, ilen;

		// Compatibility: If the properties are defined with only the old name, use those values
		if (config.tension !== undefined && config.lineTension === undefined) {
			config.lineTension = config.tension;
		}

		// Utility
		line._scale = scale;
		line._datasetIndex = me.index;
		// Data
		line._children = points;
		line._loop = true;
		// Model
		line._model = me._resolveDatasetElementOptions(line);

		line.pivot();

		// Update Points
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			me.updateElement(points[i], i, reset);
		}

		// Update bezier control points
		me.updateBezierControlPoints();

		// Now pivot the point for animation
		for (i = 0, ilen = points.length; i < ilen; ++i) {
			points[i].pivot();
		}
	},

	updateElement: function(point, index, reset) {
		var me = this;
		var custom = point.custom || {};
		var dataset = me.getDataset();
		var scale = me.chart.scale;
		var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
		var options = me._resolveDataElementOptions(point, index);
		var lineModel = me.getMeta().dataset._model;
		var x = reset ? scale.xCenter : pointPosition.x;
		var y = reset ? scale.yCenter : pointPosition.y;

		// Utility
		point._scale = scale;
		point._options = options;
		point._datasetIndex = me.index;
		point._index = index;

		// Desired view properties
		point._model = {
			x: x, // value not used in dataset scale, but we want a consistent API between scales
			y: y,
			skip: custom.skip || isNaN(x) || isNaN(y),
			// Appearance
			radius: options.radius,
			pointStyle: options.pointStyle,
			rotation: options.rotation,
			backgroundColor: options.backgroundColor,
			borderColor: options.borderColor,
			borderWidth: options.borderWidth,
			tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),

			// Tooltip
			hitRadius: options.hitRadius
		};
	},

	/**
	 * @private
	 */
	_resolveDatasetElementOptions: function() {
		var me = this;
		var config = me._config;
		var options = me.chart.options;
		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

		values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
		values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);

		return values;
	},

	updateBezierControlPoints: function() {
		var me = this;
		var meta = me.getMeta();
		var area = me.chart.chartArea;
		var points = meta.data || [];
		var i, ilen, model, controlPoints;

		// Only consider points that are drawn in case the spanGaps option is used
		if (meta.dataset._model.spanGaps) {
			points = points.filter(function(pt) {
				return !pt._model.skip;
			});
		}

		function capControlPoint(pt, min, max) {
			return Math.max(Math.min(pt, max), min);
		}

		for (i = 0, ilen = points.length; i < ilen; ++i) {
			model = points[i]._model;
			controlPoints = helpers$1.splineCurve(
				helpers$1.previousItem(points, i, true)._model,
				model,
				helpers$1.nextItem(points, i, true)._model,
				model.tension
			);

			// Prevent the bezier going outside of the bounds of the graph
			model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
			model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
			model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
			model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
		}
	},

	setHoverStyle: function(point) {
		var model = point._model;
		var options = point._options;
		var getHoverColor = helpers$1.getHoverColor;

		point.$previousStyle = {
			backgroundColor: model.backgroundColor,
			borderColor: model.borderColor,
			borderWidth: model.borderWidth,
			radius: model.radius
		};

		model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
		model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
		model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
		model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
	}
});

core_defaults._set('scatter', {
	hover: {
		mode: 'single'
	},

	scales: {
		xAxes: [{
			id: 'x-axis-1',    // need an ID so datasets can reference the scale
			type: 'linear',    // scatter should not use a category axis
			position: 'bottom'
		}],
		yAxes: [{
			id: 'y-axis-1',
			type: 'linear',
			position: 'left'
		}]
	},

	tooltips: {
		callbacks: {
			title: function() {
				return '';     // doesn't make sense for scatter since data are formatted as a point
			},
			label: function(item) {
				return '(' + item.xLabel + ', ' + item.yLabel + ')';
			}
		}
	}
});

core_defaults._set('global', {
	datasets: {
		scatter: {
			showLine: false
		}
	}
});

// Scatter charts use line controllers
var controller_scatter = controller_line;

// NOTE export a map in which the key represents the controller type, not
// the class, and so must be CamelCase in order to be correctly retrieved
// by the controller in core.controller.js (`controllers[meta.type]`).

var controllers = {
	bar: controller_bar,
	bubble: controller_bubble,
	doughnut: controller_doughnut,
	horizontalBar: controller_horizontalBar,
	line: controller_line,
	polarArea: controller_polarArea,
	pie: controller_pie,
	radar: controller_radar,
	scatter: controller_scatter
};

/**
 * Helper function to get relative position for an event
 * @param {Event|IEvent} event - The event to get the position for
 * @param {Chart} chart - The chart
 * @returns {object} the event position
 */
function getRelativePosition(e, chart) {
	if (e.native) {
		return {
			x: e.x,
			y: e.y
		};
	}

	return helpers$1.getRelativePosition(e, chart);
}

/**
 * Helper function to traverse all of the visible elements in the chart
 * @param {Chart} chart - the chart
 * @param {function} handler - the callback to execute for each visible item
 */
function parseVisibleItems(chart, handler) {
	var metasets = chart._getSortedVisibleDatasetMetas();
	var metadata, i, j, ilen, jlen, element;

	for (i = 0, ilen = metasets.length; i < ilen; ++i) {
		metadata = metasets[i].data;
		for (j = 0, jlen = metadata.length; j < jlen; ++j) {
			element = metadata[j];
			if (!element._view.skip) {
				handler(element);
			}
		}
	}
}

/**
 * Helper function to get the items that intersect the event position
 * @param {ChartElement[]} items - elements to filter
 * @param {object} position - the point to be nearest to
 * @return {ChartElement[]} the nearest items
 */
function getIntersectItems(chart, position) {
	var elements = [];

	parseVisibleItems(chart, function(element) {
		if (element.inRange(position.x, position.y)) {
			elements.push(element);
		}
	});

	return elements;
}

/**
 * Helper function to get the items nearest to the event position considering all visible items in teh chart
 * @param {Chart} chart - the chart to look at elements from
 * @param {object} position - the point to be nearest to
 * @param {boolean} intersect - if true, only consider items that intersect the position
 * @param {function} distanceMetric - function to provide the distance between points
 * @return {ChartElement[]} the nearest items
 */
function getNearestItems(chart, position, intersect, distanceMetric) {
	var minDistance = Number.POSITIVE_INFINITY;
	var nearestItems = [];

	parseVisibleItems(chart, function(element) {
		if (intersect && !element.inRange(position.x, position.y)) {
			return;
		}

		var center = element.getCenterPoint();
		var distance = distanceMetric(position, center);
		if (distance < minDistance) {
			nearestItems = [element];
			minDistance = distance;
		} else if (distance === minDistance) {
			// Can have multiple items at the same distance in which case we sort by size
			nearestItems.push(element);
		}
	});

	return nearestItems;
}

/**
 * Get a distance metric function for two points based on the
 * axis mode setting
 * @param {string} axis - the axis mode. x|y|xy
 */
function getDistanceMetricForAxis(axis) {
	var useX = axis.indexOf('x') !== -1;
	var useY = axis.indexOf('y') !== -1;

	return function(pt1, pt2) {
		var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
		var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	};
}

function indexMode(chart, e, options) {
	var position = getRelativePosition(e, chart);
	// Default axis for index mode is 'x' to match old behaviour
	options.axis = options.axis || 'x';
	var distanceMetric = getDistanceMetricForAxis(options.axis);
	var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
	var elements = [];

	if (!items.length) {
		return [];
	}

	chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
		var element = meta.data[items[0]._index];

		// don't count items that are skipped (null data)
		if (element && !element._view.skip) {
			elements.push(element);
		}
	});

	return elements;
}

/**
 * @interface IInteractionOptions
 */
/**
 * If true, only consider items that intersect the point
 * @name IInterfaceOptions#boolean
 * @type Boolean
 */

/**
 * Contains interaction related functions
 * @namespace Chart.Interaction
 */
var core_interaction = {
	// Helper function for different modes
	modes: {
		single: function(chart, e) {
			var position = getRelativePosition(e, chart);
			var elements = [];

			parseVisibleItems(chart, function(element) {
				if (element.inRange(position.x, position.y)) {
					elements.push(element);
					return elements;
				}
			});

			return elements.slice(0, 1);
		},

		/**
		 * @function Chart.Interaction.modes.label
		 * @deprecated since version 2.4.0
		 * @todo remove at version 3
		 * @private
		 */
		label: indexMode,

		/**
		 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
		 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
		 * @function Chart.Interaction.modes.index
		 * @since v2.4.0
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use during interaction
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		index: indexMode,

		/**
		 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
		 * If the options.intersect is false, we find the nearest item and return the items in that dataset
		 * @function Chart.Interaction.modes.dataset
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use during interaction
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		dataset: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			options.axis = options.axis || 'xy';
			var distanceMetric = getDistanceMetricForAxis(options.axis);
			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

			if (items.length > 0) {
				items = chart.getDatasetMeta(items[0]._datasetIndex).data;
			}

			return items;
		},

		/**
		 * @function Chart.Interaction.modes.x-axis
		 * @deprecated since version 2.4.0. Use index mode and intersect == true
		 * @todo remove at version 3
		 * @private
		 */
		'x-axis': function(chart, e) {
			return indexMode(chart, e, {intersect: false});
		},

		/**
		 * Point mode returns all elements that hit test based on the event position
		 * of the event
		 * @function Chart.Interaction.modes.intersect
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		point: function(chart, e) {
			var position = getRelativePosition(e, chart);
			return getIntersectItems(chart, position);
		},

		/**
		 * nearest mode returns the element closest to the point
		 * @function Chart.Interaction.modes.intersect
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		nearest: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			options.axis = options.axis || 'xy';
			var distanceMetric = getDistanceMetricForAxis(options.axis);
			return getNearestItems(chart, position, options.intersect, distanceMetric);
		},

		/**
		 * x mode returns the elements that hit-test at the current x coordinate
		 * @function Chart.Interaction.modes.x
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		x: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			var items = [];
			var intersectsItem = false;

			parseVisibleItems(chart, function(element) {
				if (element.inXRange(position.x)) {
					items.push(element);
				}

				if (element.inRange(position.x, position.y)) {
					intersectsItem = true;
				}
			});

			// If we want to trigger on an intersect and we don't have any items
			// that intersect the position, return nothing
			if (options.intersect && !intersectsItem) {
				items = [];
			}
			return items;
		},

		/**
		 * y mode returns the elements that hit-test at the current y coordinate
		 * @function Chart.Interaction.modes.y
		 * @param {Chart} chart - the chart we are returning items from
		 * @param {Event} e - the event we are find things at
		 * @param {IInteractionOptions} options - options to use
		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
		 */
		y: function(chart, e, options) {
			var position = getRelativePosition(e, chart);
			var items = [];
			var intersectsItem = false;

			parseVisibleItems(chart, function(element) {
				if (element.inYRange(position.y)) {
					items.push(element);
				}

				if (element.inRange(position.x, position.y)) {
					intersectsItem = true;
				}
			});

			// If we want to trigger on an intersect and we don't have any items
			// that intersect the position, return nothing
			if (options.intersect && !intersectsItem) {
				items = [];
			}
			return items;
		}
	}
};

var extend = helpers$1.extend;

function filterByPosition(array, position) {
	return helpers$1.where(array, function(v) {
		return v.pos === position;
	});
}

function sortByWeight(array, reverse) {
	return array.sort(function(a, b) {
		var v0 = reverse ? b : a;
		var v1 = reverse ? a : b;
		return v0.weight === v1.weight ?
			v0.index - v1.index :
			v0.weight - v1.weight;
	});
}

function wrapBoxes(boxes) {
	var layoutBoxes = [];
	var i, ilen, box;

	for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
		box = boxes[i];
		layoutBoxes.push({
			index: i,
			box: box,
			pos: box.position,
			horizontal: box.isHorizontal(),
			weight: box.weight
		});
	}
	return layoutBoxes;
}

function setLayoutDims(layouts, params) {
	var i, ilen, layout;
	for (i = 0, ilen = layouts.length; i < ilen; ++i) {
		layout = layouts[i];
		// store width used instead of chartArea.w in fitBoxes
		layout.width = layout.horizontal
			? layout.box.fullWidth && params.availableWidth
			: params.vBoxMaxWidth;
		// store height used instead of chartArea.h in fitBoxes
		layout.height = layout.horizontal && params.hBoxMaxHeight;
	}
}

function buildLayoutBoxes(boxes) {
	var layoutBoxes = wrapBoxes(boxes);
	var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
	var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
	var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
	var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));

	return {
		leftAndTop: left.concat(top),
		rightAndBottom: right.concat(bottom),
		chartArea: filterByPosition(layoutBoxes, 'chartArea'),
		vertical: left.concat(right),
		horizontal: top.concat(bottom)
	};
}

function getCombinedMax(maxPadding, chartArea, a, b) {
	return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}

function updateDims(chartArea, params, layout) {
	var box = layout.box;
	var maxPadding = chartArea.maxPadding;
	var newWidth, newHeight;

	if (layout.size) {
		// this layout was already counted for, lets first reduce old size
		chartArea[layout.pos] -= layout.size;
	}
	layout.size = layout.horizontal ? box.height : box.width;
	chartArea[layout.pos] += layout.size;

	if (box.getPadding) {
		var boxPadding = box.getPadding();
		maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
		maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
		maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
		maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
	}

	newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
	newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');

	if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
		chartArea.w = newWidth;
		chartArea.h = newHeight;

		// return true if chart area changed in layout's direction
		return layout.horizontal ? newWidth !== chartArea.w : newHeight !== chartArea.h;
	}
}

function handleMaxPadding(chartArea) {
	var maxPadding = chartArea.maxPadding;

	function updatePos(pos) {
		var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
		chartArea[pos] += change;
		return change;
	}
	chartArea.y += updatePos('top');
	chartArea.x += updatePos('left');
	updatePos('right');
	updatePos('bottom');
}

function getMargins(horizontal, chartArea) {
	var maxPadding = chartArea.maxPadding;

	function marginForPositions(positions) {
		var margin = {left: 0, top: 0, right: 0, bottom: 0};
		positions.forEach(function(pos) {
			margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
		});
		return margin;
	}

	return horizontal
		? marginForPositions(['left', 'right'])
		: marginForPositions(['top', 'bottom']);
}

function fitBoxes(boxes, chartArea, params) {
	var refitBoxes = [];
	var i, ilen, layout, box, refit, changed;

	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
		layout = boxes[i];
		box = layout.box;

		box.update(
			layout.width || chartArea.w,
			layout.height || chartArea.h,
			getMargins(layout.horizontal, chartArea)
		);
		if (updateDims(chartArea, params, layout)) {
			changed = true;
			if (refitBoxes.length) {
				// Dimensions changed and there were non full width boxes before this
				// -> we have to refit those
				refit = true;
			}
		}
		if (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case
			refitBoxes.push(layout);
		}
	}

	return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
}

function placeBoxes(boxes, chartArea, params) {
	var userPadding = params.padding;
	var x = chartArea.x;
	var y = chartArea.y;
	var i, ilen, layout, box;

	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
		layout = boxes[i];
		box = layout.box;
		if (layout.horizontal) {
			box.left = box.fullWidth ? userPadding.left : chartArea.left;
			box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
			box.top = y;
			box.bottom = y + box.height;
			box.width = box.right - box.left;
			y = box.bottom;
		} else {
			box.left = x;
			box.right = x + box.width;
			box.top = chartArea.top;
			box.bottom = chartArea.top + chartArea.h;
			box.height = box.bottom - box.top;
			x = box.right;
		}
	}

	chartArea.x = x;
	chartArea.y = y;
}

core_defaults._set('global', {
	layout: {
		padding: {
			top: 0,
			right: 0,
			bottom: 0,
			left: 0
		}
	}
});

/**
 * @interface ILayoutItem
 * @prop {string} position - The position of the item in the chart layout. Possible values are
 * 'left', 'top', 'right', 'bottom', and 'chartArea'
 * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
 * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
 * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
 * @prop {function} update - Takes two parameters: width and height. Returns size of item
 * @prop {function} getPadding -  Returns an object with padding on the edges
 * @prop {number} width - Width of item. Must be valid after update()
 * @prop {number} height - Height of item. Must be valid after update()
 * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
 * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
 * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
 * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
 */

// The layout service is very self explanatory.  It's responsible for the layout within a chart.
// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
// It is this service's responsibility of carrying out that layout.
var core_layouts = {
	defaults: {},

	/**
	 * Register a box to a chart.
	 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
	 * @param {Chart} chart - the chart to use
	 * @param {ILayoutItem} item - the item to add to be layed out
	 */
	addBox: function(chart, item) {
		if (!chart.boxes) {
			chart.boxes = [];
		}

		// initialize item with default values
		item.fullWidth = item.fullWidth || false;
		item.position = item.position || 'top';
		item.weight = item.weight || 0;
		item._layers = item._layers || function() {
			return [{
				z: 0,
				draw: function() {
					item.draw.apply(item, arguments);
				}
			}];
		};

		chart.boxes.push(item);
	},

	/**
	 * Remove a layoutItem from a chart
	 * @param {Chart} chart - the chart to remove the box from
	 * @param {ILayoutItem} layoutItem - the item to remove from the layout
	 */
	removeBox: function(chart, layoutItem) {
		var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
		if (index !== -1) {
			chart.boxes.splice(index, 1);
		}
	},

	/**
	 * Sets (or updates) options on the given `item`.
	 * @param {Chart} chart - the chart in which the item lives (or will be added to)
	 * @param {ILayoutItem} item - the item to configure with the given options
	 * @param {object} options - the new item options.
	 */
	configure: function(chart, item, options) {
		var props = ['fullWidth', 'position', 'weight'];
		var ilen = props.length;
		var i = 0;
		var prop;

		for (; i < ilen; ++i) {
			prop = props[i];
			if (options.hasOwnProperty(prop)) {
				item[prop] = options[prop];
			}
		}
	},

	/**
	 * Fits boxes of the given chart into the given size by having each box measure itself
	 * then running a fitting algorithm
	 * @param {Chart} chart - the chart
	 * @param {number} width - the width to fit into
	 * @param {number} height - the height to fit into
	 */
	update: function(chart, width, height) {
		if (!chart) {
			return;
		}

		var layoutOptions = chart.options.layout || {};
		var padding = helpers$1.options.toPadding(layoutOptions.padding);

		var availableWidth = width - padding.width;
		var availableHeight = height - padding.height;
		var boxes = buildLayoutBoxes(chart.boxes);
		var verticalBoxes = boxes.vertical;
		var horizontalBoxes = boxes.horizontal;

		// Essentially we now have any number of boxes on each of the 4 sides.
		// Our canvas looks like the following.
		// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
		// B1 is the bottom axis
		// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
		// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
		// an error will be thrown.
		//
		// |----------------------------------------------------|
		// |                  T1 (Full Width)                   |
		// |----------------------------------------------------|
		// |    |    |                 T2                  |    |
		// |    |----|-------------------------------------|----|
		// |    |    | C1 |                           | C2 |    |
		// |    |    |----|                           |----|    |
		// |    |    |                                     |    |
		// | L1 | L2 |           ChartArea (C0)            | R1 |
		// |    |    |                                     |    |
		// |    |    |----|                           |----|    |
		// |    |    | C3 |                           | C4 |    |
		// |    |----|-------------------------------------|----|
		// |    |    |                 B1                  |    |
		// |----------------------------------------------------|
		// |                  B2 (Full Width)                   |
		// |----------------------------------------------------|
		//

		var params = Object.freeze({
			outerWidth: width,
			outerHeight: height,
			padding: padding,
			availableWidth: availableWidth,
			vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
			hBoxMaxHeight: availableHeight / 2
		});
		var chartArea = extend({
			maxPadding: extend({}, padding),
			w: availableWidth,
			h: availableHeight,
			x: padding.left,
			y: padding.top
		}, padding);

		setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);

		// First fit vertical boxes
		fitBoxes(verticalBoxes, chartArea, params);

		// Then fit horizontal boxes
		if (fitBoxes(horizontalBoxes, chartArea, params)) {
			// if the area changed, re-fit vertical boxes
			fitBoxes(verticalBoxes, chartArea, params);
		}

		handleMaxPadding(chartArea);

		// Finally place the boxes to correct coordinates
		placeBoxes(boxes.leftAndTop, chartArea, params);

		// Move to opposite side of chart
		chartArea.x += chartArea.w;
		chartArea.y += chartArea.h;

		placeBoxes(boxes.rightAndBottom, chartArea, params);

		chart.chartArea = {
			left: chartArea.left,
			top: chartArea.top,
			right: chartArea.left + chartArea.w,
			bottom: chartArea.top + chartArea.h
		};

		// Finally update boxes in chartArea (radial scale for example)
		helpers$1.each(boxes.chartArea, function(layout) {
			var box = layout.box;
			extend(box, chart.chartArea);
			box.update(chartArea.w, chartArea.h);
		});
	}
};

/**
 * Platform fallback implementation (minimal).
 * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
 */

var platform_basic = {
	acquireContext: function(item) {
		if (item && item.canvas) {
			// Support for any object associated to a canvas (including a context2d)
			item = item.canvas;
		}

		return item && item.getContext('2d') || null;
	}
};

var platform_dom = "/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n";

var platform_dom$1 = /*#__PURE__*/Object.freeze({
__proto__: null,
'default': platform_dom
});

var stylesheet = getCjsExportFromNamespace(platform_dom$1);

var EXPANDO_KEY = '$chartjs';
var CSS_PREFIX = 'chartjs-';
var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];

/**
 * DOM event types -> Chart.js event types.
 * Note: only events with different types are mapped.
 * @see https://developer.mozilla.org/en-US/docs/Web/Events
 */
var EVENT_TYPES = {
	touchstart: 'mousedown',
	touchmove: 'mousemove',
	touchend: 'mouseup',
	pointerenter: 'mouseenter',
	pointerdown: 'mousedown',
	pointermove: 'mousemove',
	pointerup: 'mouseup',
	pointerleave: 'mouseout',
	pointerout: 'mouseout'
};

/**
 * The "used" size is the final value of a dimension property after all calculations have
 * been performed. This method uses the computed style of `element` but returns undefined
 * if the computed style is not expressed in pixels. That can happen in some cases where
 * `element` has a size relative to its parent and this last one is not yet displayed,
 * for example because of `display: none` on a parent node.
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
 * @returns {number} Size in pixels or undefined if unknown.
 */
function readUsedSize(element, property) {
	var value = helpers$1.getStyle(element, property);
	var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
	return matches ? Number(matches[1]) : undefined;
}

/**
 * Initializes the canvas style and render size without modifying the canvas display size,
 * since responsiveness is handled by the controller.resize() method. The config is used
 * to determine the aspect ratio to apply in case no explicit height has been specified.
 */
function initCanvas(canvas, config) {
	var style = canvas.style;

	// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
	// returns null or '' if no explicit value has been set to the canvas attribute.
	var renderHeight = canvas.getAttribute('height');
	var renderWidth = canvas.getAttribute('width');

	// Chart.js modifies some canvas values that we want to restore on destroy
	canvas[EXPANDO_KEY] = {
		initial: {
			height: renderHeight,
			width: renderWidth,
			style: {
				display: style.display,
				height: style.height,
				width: style.width
			}
		}
	};

	// Force canvas to display as block to avoid extra space caused by inline
	// elements, which would interfere with the responsive resize process.
	// https://github.com/chartjs/Chart.js/issues/2538
	style.display = style.display || 'block';

	if (renderWidth === null || renderWidth === '') {
		var displayWidth = readUsedSize(canvas, 'width');
		if (displayWidth !== undefined) {
			canvas.width = displayWidth;
		}
	}

	if (renderHeight === null || renderHeight === '') {
		if (canvas.style.height === '') {
			// If no explicit render height and style height, let's apply the aspect ratio,
			// which one can be specified by the user but also by charts as default option
			// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
			canvas.height = canvas.width / (config.options.aspectRatio || 2);
		} else {
			var displayHeight = readUsedSize(canvas, 'height');
			if (displayWidth !== undefined) {
				canvas.height = displayHeight;
			}
		}
	}

	return canvas;
}

/**
 * Detects support for options object argument in addEventListener.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
 * @private
 */
var supportsEventListenerOptions = (function() {
	var supports = false;
	try {
		var options = Object.defineProperty({}, 'passive', {
			// eslint-disable-next-line getter-return
			get: function() {
				supports = true;
			}
		});
		window.addEventListener('e', null, options);
	} catch (e) {
		// continue regardless of error
	}
	return supports;
}());

// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
// https://github.com/chartjs/Chart.js/issues/4287
var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;

function addListener(node, type, listener) {
	node.addEventListener(type, listener, eventListenerOptions);
}

function removeListener(node, type, listener) {
	node.removeEventListener(type, listener, eventListenerOptions);
}

function createEvent(type, chart, x, y, nativeEvent) {
	return {
		type: type,
		chart: chart,
		native: nativeEvent || null,
		x: x !== undefined ? x : null,
		y: y !== undefined ? y : null,
	};
}

function fromNativeEvent(event, chart) {
	var type = EVENT_TYPES[event.type] || event.type;
	var pos = helpers$1.getRelativePosition(event, chart);
	return createEvent(type, chart, pos.x, pos.y, event);
}

function throttled(fn, thisArg) {
	var ticking = false;
	var args = [];

	return function() {
		args = Array.prototype.slice.call(arguments);
		thisArg = thisArg || this;

		if (!ticking) {
			ticking = true;
			helpers$1.requestAnimFrame.call(window, function() {
				ticking = false;
				fn.apply(thisArg, args);
			});
		}
	};
}

function createDiv(cls) {
	var el = document.createElement('div');
	el.className = cls || '';
	return el;
}

// Implementation based on https://github.com/marcj/css-element-queries
function createResizer(handler) {
	var maxSize = 1000000;

	// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
	// https://github.com/chartjs/Chart.js/issues/5902
	var resizer = createDiv(CSS_SIZE_MONITOR);
	var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
	var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');

	expand.appendChild(createDiv());
	shrink.appendChild(createDiv());

	resizer.appendChild(expand);
	resizer.appendChild(shrink);
	resizer._reset = function() {
		expand.scrollLeft = maxSize;
		expand.scrollTop = maxSize;
		shrink.scrollLeft = maxSize;
		shrink.scrollTop = maxSize;
	};

	var onScroll = function() {
		resizer._reset();
		handler();
	};

	addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
	addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));

	return resizer;
}

// https://davidwalsh.name/detect-node-insertion
function watchForRender(node, handler) {
	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
	var proxy = expando.renderProxy = function(e) {
		if (e.animationName === CSS_RENDER_ANIMATION) {
			handler();
		}
	};

	helpers$1.each(ANIMATION_START_EVENTS, function(type) {
		addListener(node, type, proxy);
	});

	// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
	// is removed then added back immediately (same animation frame?). Accessing the
	// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
	// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
	// https://github.com/chartjs/Chart.js/issues/4737
	expando.reflow = !!node.offsetParent;

	node.classList.add(CSS_RENDER_MONITOR);
}

function unwatchForRender(node) {
	var expando = node[EXPANDO_KEY] || {};
	var proxy = expando.renderProxy;

	if (proxy) {
		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
			removeListener(node, type, proxy);
		});

		delete expando.renderProxy;
	}

	node.classList.remove(CSS_RENDER_MONITOR);
}

function addResizeListener(node, listener, chart) {
	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

	// Let's keep track of this added resizer and thus avoid DOM query when removing it.
	var resizer = expando.resizer = createResizer(throttled(function() {
		if (expando.resizer) {
			var container = chart.options.maintainAspectRatio && node.parentNode;
			var w = container ? container.clientWidth : 0;
			listener(createEvent('resize', chart));
			if (container && container.clientWidth < w && chart.canvas) {
				// If the container size shrank during chart resize, let's assume
				// scrollbar appeared. So we resize again with the scrollbar visible -
				// effectively making chart smaller and the scrollbar hidden again.
				// Because we are inside `throttled`, and currently `ticking`, scroll
				// events are ignored during this whole 2 resize process.
				// If we assumed wrong and something else happened, we are resizing
				// twice in a frame (potential performance issue)
				listener(createEvent('resize', chart));
			}
		}
	}));

	// The resizer needs to be attached to the node parent, so we first need to be
	// sure that `node` is attached to the DOM before injecting the resizer element.
	watchForRender(node, function() {
		if (expando.resizer) {
			var container = node.parentNode;
			if (container && container !== resizer.parentNode) {
				container.insertBefore(resizer, container.firstChild);
			}

			// The container size might have changed, let's reset the resizer state.
			resizer._reset();
		}
	});
}

function removeResizeListener(node) {
	var expando = node[EXPANDO_KEY] || {};
	var resizer = expando.resizer;

	delete expando.resizer;
	unwatchForRender(node);

	if (resizer && resizer.parentNode) {
		resizer.parentNode.removeChild(resizer);
	}
}

/**
 * Injects CSS styles inline if the styles are not already present.
 * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
 * @param {string} css - the CSS to be injected.
 */
function injectCSS(rootNode, css) {
	// https://stackoverflow.com/q/3922139
	var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
	if (!expando.containsStyles) {
		expando.containsStyles = true;
		css = '/* Chart.js */\n' + css;
		var style = document.createElement('style');
		style.setAttribute('type', 'text/css');
		style.appendChild(document.createTextNode(css));
		rootNode.appendChild(style);
	}
}

var platform_dom$2 = {
	/**
	 * When `true`, prevents the automatic injection of the stylesheet required to
	 * correctly detect when the chart is added to the DOM and then resized. This
	 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
	 * to be manually imported to make this library compatible with any CSP.
	 * See https://github.com/chartjs/Chart.js/issues/5208
	 */
	disableCSSInjection: false,

	/**
	 * This property holds whether this platform is enabled for the current environment.
	 * Currently used by platform.js to select the proper implementation.
	 * @private
	 */
	_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

	/**
	 * Initializes resources that depend on platform options.
	 * @param {HTMLCanvasElement} canvas - The Canvas element.
	 * @private
	 */
	_ensureLoaded: function(canvas) {
		if (!this.disableCSSInjection) {
			// If the canvas is in a shadow DOM, then the styles must also be inserted
			// into the same shadow DOM.
			// https://github.com/chartjs/Chart.js/issues/5763
			var root = canvas.getRootNode ? canvas.getRootNode() : document;
			var targetNode = root.host ? root : document.head;
			injectCSS(targetNode, stylesheet);
		}
	},

	acquireContext: function(item, config) {
		if (typeof item === 'string') {
			item = document.getElementById(item);
		} else if (item.length) {
			// Support for array based queries (such as jQuery)
			item = item[0];
		}

		if (item && item.canvas) {
			// Support for any object associated to a canvas (including a context2d)
			item = item.canvas;
		}

		// To prevent canvas fingerprinting, some add-ons undefine the getContext
		// method, for example: https://github.com/kkapsner/CanvasBlocker
		// https://github.com/chartjs/Chart.js/issues/2807
		var context = item && item.getContext && item.getContext('2d');

		// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
		// inside an iframe or when running in a protected environment. We could guess the
		// types from their toString() value but let's keep things flexible and assume it's
		// a sufficient condition if the item has a context2D which has item as `canvas`.
		// https://github.com/chartjs/Chart.js/issues/3887
		// https://github.com/chartjs/Chart.js/issues/4102
		// https://github.com/chartjs/Chart.js/issues/4152
		if (context && context.canvas === item) {
			// Load platform resources on first chart creation, to make it possible to
			// import the library before setting platform options.
			this._ensureLoaded(item);
			initCanvas(item, config);
			return context;
		}

		return null;
	},

	releaseContext: function(context) {
		var canvas = context.canvas;
		if (!canvas[EXPANDO_KEY]) {
			return;
		}

		var initial = canvas[EXPANDO_KEY].initial;
		['height', 'width'].forEach(function(prop) {
			var value = initial[prop];
			if (helpers$1.isNullOrUndef(value)) {
				canvas.removeAttribute(prop);
			} else {
				canvas.setAttribute(prop, value);
			}
		});

		helpers$1.each(initial.style || {}, function(value, key) {
			canvas.style[key] = value;
		});

		// The canvas render size might have been changed (and thus the state stack discarded),
		// we can't use save() and restore() to restore the initial state. So make sure that at
		// least the canvas context is reset to the default state by setting the canvas width.
		// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
		// eslint-disable-next-line no-self-assign
		canvas.width = canvas.width;

		delete canvas[EXPANDO_KEY];
	},

	addEventListener: function(chart, type, listener) {
		var canvas = chart.canvas;
		if (type === 'resize') {
			// Note: the resize event is not supported on all browsers.
			addResizeListener(canvas, listener, chart);
			return;
		}

		var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
		var proxies = expando.proxies || (expando.proxies = {});
		var proxy = proxies[chart.id + '_' + type] = function(event) {
			listener(fromNativeEvent(event, chart));
		};

		addListener(canvas, type, proxy);
	},

	removeEventListener: function(chart, type, listener) {
		var canvas = chart.canvas;
		if (type === 'resize') {
			// Note: the resize event is not supported on all browsers.
			removeResizeListener(canvas);
			return;
		}

		var expando = listener[EXPANDO_KEY] || {};
		var proxies = expando.proxies || {};
		var proxy = proxies[chart.id + '_' + type];
		if (!proxy) {
			return;
		}

		removeListener(canvas, type, proxy);
	}
};

// DEPRECATIONS

/**
 * Provided for backward compatibility, use EventTarget.addEventListener instead.
 * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
 * @function Chart.helpers.addEvent
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers$1.addEvent = addListener;

/**
 * Provided for backward compatibility, use EventTarget.removeEventListener instead.
 * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
 * @function Chart.helpers.removeEvent
 * @deprecated since version 2.7.0
 * @todo remove at version 3
 * @private
 */
helpers$1.removeEvent = removeListener;

// @TODO Make possible to select another platform at build time.
var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;

/**
 * @namespace Chart.platform
 * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
 * @since 2.4.0
 */
var platform = helpers$1.extend({
	/**
	 * @since 2.7.0
	 */
	initialize: function() {},

	/**
	 * Called at chart construction time, returns a context2d instance implementing
	 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
	 * @param {*} item - The native item from which to acquire context (platform specific)
	 * @param {object} options - The chart options
	 * @returns {CanvasRenderingContext2D} context2d instance
	 */
	acquireContext: function() {},

	/**
	 * Called at chart destruction time, releases any resources associated to the context
	 * previously returned by the acquireContext() method.
	 * @param {CanvasRenderingContext2D} context - The context2d instance
	 * @returns {boolean} true if the method succeeded, else false
	 */
	releaseContext: function() {},

	/**
	 * Registers the specified listener on the given chart.
	 * @param {Chart} chart - Chart from which to listen for event
	 * @param {string} type - The ({@link IEvent}) type to listen for
	 * @param {function} listener - Receives a notification (an object that implements
	 * the {@link IEvent} interface) when an event of the specified type occurs.
	 */
	addEventListener: function() {},

	/**
	 * Removes the specified listener previously registered with addEventListener.
	 * @param {Chart} chart - Chart from which to remove the listener
	 * @param {string} type - The ({@link IEvent}) type to remove
	 * @param {function} listener - The listener function to remove from the event target.
	 */
	removeEventListener: function() {}

}, implementation);

core_defaults._set('global', {
	plugins: {}
});

/**
 * The plugin service singleton
 * @namespace Chart.plugins
 * @since 2.1.0
 */
var core_plugins = {
	/**
	 * Globally registered plugins.
	 * @private
	 */
	_plugins: [],

	/**
	 * This identifier is used to invalidate the descriptors cache attached to each chart
	 * when a global plugin is registered or unregistered. In this case, the cache ID is
	 * incremented and descriptors are regenerated during following API calls.
	 * @private
	 */
	_cacheId: 0,

	/**
	 * Registers the given plugin(s) if not already registered.
	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
	 */
	register: function(plugins) {
		var p = this._plugins;
		([]).concat(plugins).forEach(function(plugin) {
			if (p.indexOf(plugin) === -1) {
				p.push(plugin);
			}
		});

		this._cacheId++;
	},

	/**
	 * Unregisters the given plugin(s) only if registered.
	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
	 */
	unregister: function(plugins) {
		var p = this._plugins;
		([]).concat(plugins).forEach(function(plugin) {
			var idx = p.indexOf(plugin);
			if (idx !== -1) {
				p.splice(idx, 1);
			}
		});

		this._cacheId++;
	},

	/**
	 * Remove all registered plugins.
	 * @since 2.1.5
	 */
	clear: function() {
		this._plugins = [];
		this._cacheId++;
	},

	/**
	 * Returns the number of registered plugins?
	 * @returns {number}
	 * @since 2.1.5
	 */
	count: function() {
		return this._plugins.length;
	},

	/**
	 * Returns all registered plugin instances.
	 * @returns {IPlugin[]} array of plugin objects.
	 * @since 2.1.5
	 */
	getAll: function() {
		return this._plugins;
	},

	/**
	 * Calls enabled plugins for `chart` on the specified hook and with the given args.
	 * This method immediately returns as soon as a plugin explicitly returns false. The
	 * returned value can be used, for instance, to interrupt the current action.
	 * @param {Chart} chart - The chart instance for which plugins should be called.
	 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
	 * @param {Array} [args] - Extra arguments to apply to the hook call.
	 * @returns {boolean} false if any of the plugins return false, else returns true.
	 */
	notify: function(chart, hook, args) {
		var descriptors = this.descriptors(chart);
		var ilen = descriptors.length;
		var i, descriptor, plugin, params, method;

		for (i = 0; i < ilen; ++i) {
			descriptor = descriptors[i];
			plugin = descriptor.plugin;
			method = plugin[hook];
			if (typeof method === 'function') {
				params = [chart].concat(args || []);
				params.push(descriptor.options);
				if (method.apply(plugin, params) === false) {
					return false;
				}
			}
		}

		return true;
	},

	/**
	 * Returns descriptors of enabled plugins for the given chart.
	 * @returns {object[]} [{ plugin, options }]
	 * @private
	 */
	descriptors: function(chart) {
		var cache = chart.$plugins || (chart.$plugins = {});
		if (cache.id === this._cacheId) {
			return cache.descriptors;
		}

		var plugins = [];
		var descriptors = [];
		var config = (chart && chart.config) || {};
		var options = (config.options && config.options.plugins) || {};

		this._plugins.concat(config.plugins || []).forEach(function(plugin) {
			var idx = plugins.indexOf(plugin);
			if (idx !== -1) {
				return;
			}

			var id = plugin.id;
			var opts = options[id];
			if (opts === false) {
				return;
			}

			if (opts === true) {
				opts = helpers$1.clone(core_defaults.global.plugins[id]);
			}

			plugins.push(plugin);
			descriptors.push({
				plugin: plugin,
				options: opts || {}
			});
		});

		cache.descriptors = descriptors;
		cache.id = this._cacheId;
		return descriptors;
	},

	/**
	 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
	 * but in some cases, this reference can be changed by the user when updating options.
	 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
	 * @private
	 */
	_invalidate: function(chart) {
		delete chart.$plugins;
	}
};

var core_scaleService = {
	// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
	// use the new chart options to grab the correct scale
	constructors: {},
	// Use a registration function so that we can move to an ES6 map when we no longer need to support
	// old browsers

	// Scale config defaults
	defaults: {},
	registerScaleType: function(type, scaleConstructor, scaleDefaults) {
		this.constructors[type] = scaleConstructor;
		this.defaults[type] = helpers$1.clone(scaleDefaults);
	},
	getScaleConstructor: function(type) {
		return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
	},
	getScaleDefaults: function(type) {
		// Return the scale defaults merged with the global settings so that we always use the latest ones
		return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};
	},
	updateScaleDefaults: function(type, additions) {
		var me = this;
		if (me.defaults.hasOwnProperty(type)) {
			me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
		}
	},
	addScalesToLayout: function(chart) {
		// Adds each scale to the chart.boxes array to be sized accordingly
		helpers$1.each(chart.scales, function(scale) {
			// Set ILayoutItem parameters for backwards compatibility
			scale.fullWidth = scale.options.fullWidth;
			scale.position = scale.options.position;
			scale.weight = scale.options.weight;
			core_layouts.addBox(chart, scale);
		});
	}
};

var valueOrDefault$8 = helpers$1.valueOrDefault;
var getRtlHelper = helpers$1.rtl.getRtlAdapter;

core_defaults._set('global', {
	tooltips: {
		enabled: true,
		custom: null,
		mode: 'nearest',
		position: 'average',
		intersect: true,
		backgroundColor: 'rgba(0,0,0,0.8)',
		titleFontStyle: 'bold',
		titleSpacing: 2,
		titleMarginBottom: 6,
		titleFontColor: '#fff',
		titleAlign: 'left',
		bodySpacing: 2,
		bodyFontColor: '#fff',
		bodyAlign: 'left',
		footerFontStyle: 'bold',
		footerSpacing: 2,
		footerMarginTop: 6,
		footerFontColor: '#fff',
		footerAlign: 'left',
		yPadding: 6,
		xPadding: 6,
		caretPadding: 2,
		caretSize: 5,
		cornerRadius: 6,
		multiKeyBackground: '#fff',
		displayColors: true,
		borderColor: 'rgba(0,0,0,0)',
		borderWidth: 0,
		callbacks: {
			// Args are: (tooltipItems, data)
			beforeTitle: helpers$1.noop,
			title: function(tooltipItems, data) {
				var title = '';
				var labels = data.labels;
				var labelCount = labels ? labels.length : 0;

				if (tooltipItems.length > 0) {
					var item = tooltipItems[0];
					if (item.label) {
						title = item.label;
					} else if (item.xLabel) {
						title = item.xLabel;
					} else if (labelCount > 0 && item.index < labelCount) {
						title = labels[item.index];
					}
				}

				return title;
			},
			afterTitle: helpers$1.noop,

			// Args are: (tooltipItems, data)
			beforeBody: helpers$1.noop,

			// Args are: (tooltipItem, data)
			beforeLabel: helpers$1.noop,
			label: function(tooltipItem, data) {
				var label = data.datasets[tooltipItem.datasetIndex].label || '';

				if (label) {
					label += ': ';
				}
				if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
					label += tooltipItem.value;
				} else {
					label += tooltipItem.yLabel;
				}
				return label;
			},
			labelColor: function(tooltipItem, chart) {
				var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
				var activeElement = meta.data[tooltipItem.index];
				var view = activeElement._view;
				return {
					borderColor: view.borderColor,
					backgroundColor: view.backgroundColor
				};
			},
			labelTextColor: function() {
				return this._options.bodyFontColor;
			},
			afterLabel: helpers$1.noop,

			// Args are: (tooltipItems, data)
			afterBody: helpers$1.noop,

			// Args are: (tooltipItems, data)
			beforeFooter: helpers$1.noop,
			footer: helpers$1.noop,
			afterFooter: helpers$1.noop
		}
	}
});

var positioners = {
	/**
	 * Average mode places the tooltip at the average position of the elements shown
	 * @function Chart.Tooltip.positioners.average
	 * @param elements {ChartElement[]} the elements being displayed in the tooltip
	 * @returns {object} tooltip position
	 */
	average: function(elements) {
		if (!elements.length) {
			return false;
		}

		var i, len;
		var x = 0;
		var y = 0;
		var count = 0;

		for (i = 0, len = elements.length; i < len; ++i) {
			var el = elements[i];
			if (el && el.hasValue()) {
				var pos = el.tooltipPosition();
				x += pos.x;
				y += pos.y;
				++count;
			}
		}

		return {
			x: x / count,
			y: y / count
		};
	},

	/**
	 * Gets the tooltip position nearest of the item nearest to the event position
	 * @function Chart.Tooltip.positioners.nearest
	 * @param elements {Chart.Element[]} the tooltip elements
	 * @param eventPosition {object} the position of the event in canvas coordinates
	 * @returns {object} the tooltip position
	 */
	nearest: function(elements, eventPosition) {
		var x = eventPosition.x;
		var y = eventPosition.y;
		var minDistance = Number.POSITIVE_INFINITY;
		var i, len, nearestElement;

		for (i = 0, len = elements.length; i < len; ++i) {
			var el = elements[i];
			if (el && el.hasValue()) {
				var center = el.getCenterPoint();
				var d = helpers$1.distanceBetweenPoints(eventPosition, center);

				if (d < minDistance) {
					minDistance = d;
					nearestElement = el;
				}
			}
		}

		if (nearestElement) {
			var tp = nearestElement.tooltipPosition();
			x = tp.x;
			y = tp.y;
		}

		return {
			x: x,
			y: y
		};
	}
};

// Helper to push or concat based on if the 2nd parameter is an array or not
function pushOrConcat(base, toPush) {
	if (toPush) {
		if (helpers$1.isArray(toPush)) {
			// base = base.concat(toPush);
			Array.prototype.push.apply(base, toPush);
		} else {
			base.push(toPush);
		}
	}

	return base;
}

/**
 * Returns array of strings split by newline
 * @param {string} value - The value to split by newline.
 * @returns {string[]} value if newline present - Returned from String split() method
 * @function
 */
function splitNewlines(str) {
	if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
		return str.split('\n');
	}
	return str;
}


/**
 * Private helper to create a tooltip item model
 * @param element - the chart element (point, arc, bar) to create the tooltip item for
 * @return new tooltip item
 */
function createTooltipItem(element) {
	var xScale = element._xScale;
	var yScale = element._yScale || element._scale; // handle radar || polarArea charts
	var index = element._index;
	var datasetIndex = element._datasetIndex;
	var controller = element._chart.getDatasetMeta(datasetIndex).controller;
	var indexScale = controller._getIndexScale();
	var valueScale = controller._getValueScale();

	return {
		xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
		yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
		label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
		value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
		index: index,
		datasetIndex: datasetIndex,
		x: element._model.x,
		y: element._model.y
	};
}

/**
 * Helper to get the reset model for the tooltip
 * @param tooltipOpts {object} the tooltip options
 */
function getBaseModel(tooltipOpts) {
	var globalDefaults = core_defaults.global;

	return {
		// Positioning
		xPadding: tooltipOpts.xPadding,
		yPadding: tooltipOpts.yPadding,
		xAlign: tooltipOpts.xAlign,
		yAlign: tooltipOpts.yAlign,

		// Drawing direction and text direction
		rtl: tooltipOpts.rtl,
		textDirection: tooltipOpts.textDirection,

		// Body
		bodyFontColor: tooltipOpts.bodyFontColor,
		_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
		_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
		_bodyAlign: tooltipOpts.bodyAlign,
		bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
		bodySpacing: tooltipOpts.bodySpacing,

		// Title
		titleFontColor: tooltipOpts.titleFontColor,
		_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
		_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
		titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
		_titleAlign: tooltipOpts.titleAlign,
		titleSpacing: tooltipOpts.titleSpacing,
		titleMarginBottom: tooltipOpts.titleMarginBottom,

		// Footer
		footerFontColor: tooltipOpts.footerFontColor,
		_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
		_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
		footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
		_footerAlign: tooltipOpts.footerAlign,
		footerSpacing: tooltipOpts.footerSpacing,
		footerMarginTop: tooltipOpts.footerMarginTop,

		// Appearance
		caretSize: tooltipOpts.caretSize,
		cornerRadius: tooltipOpts.cornerRadius,
		backgroundColor: tooltipOpts.backgroundColor,
		opacity: 0,
		legendColorBackground: tooltipOpts.multiKeyBackground,
		displayColors: tooltipOpts.displayColors,
		borderColor: tooltipOpts.borderColor,
		borderWidth: tooltipOpts.borderWidth
	};
}

/**
 * Get the size of the tooltip
 */
function getTooltipSize(tooltip, model) {
	var ctx = tooltip._chart.ctx;

	var height = model.yPadding * 2; // Tooltip Padding
	var width = 0;

	// Count of all lines in the body
	var body = model.body;
	var combinedBodyLength = body.reduce(function(count, bodyItem) {
		return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
	}, 0);
	combinedBodyLength += model.beforeBody.length + model.afterBody.length;

	var titleLineCount = model.title.length;
	var footerLineCount = model.footer.length;
	var titleFontSize = model.titleFontSize;
	var bodyFontSize = model.bodyFontSize;
	var footerFontSize = model.footerFontSize;

	height += titleLineCount * titleFontSize; // Title Lines
	height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
	height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
	height += combinedBodyLength * bodyFontSize; // Body Lines
	height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
	height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
	height += footerLineCount * (footerFontSize); // Footer Lines
	height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

	// Title width
	var widthPadding = 0;
	var maxLineWidth = function(line) {
		width = Math.max(width, ctx.measureText(line).width + widthPadding);
	};

	ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
	helpers$1.each(model.title, maxLineWidth);

	// Body width
	ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
	helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

	// Body lines may include some extra width due to the color box
	widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
	helpers$1.each(body, function(bodyItem) {
		helpers$1.each(bodyItem.before, maxLineWidth);
		helpers$1.each(bodyItem.lines, maxLineWidth);
		helpers$1.each(bodyItem.after, maxLineWidth);
	});

	// Reset back to 0
	widthPadding = 0;

	// Footer width
	ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
	helpers$1.each(model.footer, maxLineWidth);

	// Add padding
	width += 2 * model.xPadding;

	return {
		width: width,
		height: height
	};
}

/**
 * Helper to get the alignment of a tooltip given the size
 */
function determineAlignment(tooltip, size) {
	var model = tooltip._model;
	var chart = tooltip._chart;
	var chartArea = tooltip._chart.chartArea;
	var xAlign = 'center';
	var yAlign = 'center';

	if (model.y < size.height) {
		yAlign = 'top';
	} else if (model.y > (chart.height - size.height)) {
		yAlign = 'bottom';
	}

	var lf, rf; // functions to determine left, right alignment
	var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
	var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
	var midX = (chartArea.left + chartArea.right) / 2;
	var midY = (chartArea.top + chartArea.bottom) / 2;

	if (yAlign === 'center') {
		lf = function(x) {
			return x <= midX;
		};
		rf = function(x) {
			return x > midX;
		};
	} else {
		lf = function(x) {
			return x <= (size.width / 2);
		};
		rf = function(x) {
			return x >= (chart.width - (size.width / 2));
		};
	}

	olf = function(x) {
		return x + size.width + model.caretSize + model.caretPadding > chart.width;
	};
	orf = function(x) {
		return x - size.width - model.caretSize - model.caretPadding < 0;
	};
	yf = function(y) {
		return y <= midY ? 'top' : 'bottom';
	};

	if (lf(model.x)) {
		xAlign = 'left';

		// Is tooltip too wide and goes over the right side of the chart.?
		if (olf(model.x)) {
			xAlign = 'center';
			yAlign = yf(model.y);
		}
	} else if (rf(model.x)) {
		xAlign = 'right';

		// Is tooltip too wide and goes outside left edge of canvas?
		if (orf(model.x)) {
			xAlign = 'center';
			yAlign = yf(model.y);
		}
	}

	var opts = tooltip._options;
	return {
		xAlign: opts.xAlign ? opts.xAlign : xAlign,
		yAlign: opts.yAlign ? opts.yAlign : yAlign
	};
}

/**
 * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
 */
function getBackgroundPoint(vm, size, alignment, chart) {
	// Background Position
	var x = vm.x;
	var y = vm.y;

	var caretSize = vm.caretSize;
	var caretPadding = vm.caretPadding;
	var cornerRadius = vm.cornerRadius;
	var xAlign = alignment.xAlign;
	var yAlign = alignment.yAlign;
	var paddingAndSize = caretSize + caretPadding;
	var radiusAndPadding = cornerRadius + caretPadding;

	if (xAlign === 'right') {
		x -= size.width;
	} else if (xAlign === 'center') {
		x -= (size.width / 2);
		if (x + size.width > chart.width) {
			x = chart.width - size.width;
		}
		if (x < 0) {
			x = 0;
		}
	}

	if (yAlign === 'top') {
		y += paddingAndSize;
	} else if (yAlign === 'bottom') {
		y -= size.height + paddingAndSize;
	} else {
		y -= (size.height / 2);
	}

	if (yAlign === 'center') {
		if (xAlign === 'left') {
			x += paddingAndSize;
		} else if (xAlign === 'right') {
			x -= paddingAndSize;
		}
	} else if (xAlign === 'left') {
		x -= radiusAndPadding;
	} else if (xAlign === 'right') {
		x += radiusAndPadding;
	}

	return {
		x: x,
		y: y
	};
}

function getAlignedX(vm, align) {
	return align === 'center'
		? vm.x + vm.width / 2
		: align === 'right'
			? vm.x + vm.width - vm.xPadding
			: vm.x + vm.xPadding;
}

/**
 * Helper to build before and after body lines
 */
function getBeforeAfterBodyLines(callback) {
	return pushOrConcat([], splitNewlines(callback));
}

var exports$4 = core_element.extend({
	initialize: function() {
		this._model = getBaseModel(this._options);
		this._lastActive = [];
	},

	// Get the title
	// Args are: (tooltipItem, data)
	getTitle: function() {
		var me = this;
		var opts = me._options;
		var callbacks = opts.callbacks;

		var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
		var title = callbacks.title.apply(me, arguments);
		var afterTitle = callbacks.afterTitle.apply(me, arguments);

		var lines = [];
		lines = pushOrConcat(lines, splitNewlines(beforeTitle));
		lines = pushOrConcat(lines, splitNewlines(title));
		lines = pushOrConcat(lines, splitNewlines(afterTitle));

		return lines;
	},

	// Args are: (tooltipItem, data)
	getBeforeBody: function() {
		return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
	},

	// Args are: (tooltipItem, data)
	getBody: function(tooltipItems, data) {
		var me = this;
		var callbacks = me._options.callbacks;
		var bodyItems = [];

		helpers$1.each(tooltipItems, function(tooltipItem) {
			var bodyItem = {
				before: [],
				lines: [],
				after: []
			};
			pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
			pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
			pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));

			bodyItems.push(bodyItem);
		});

		return bodyItems;
	},

	// Args are: (tooltipItem, data)
	getAfterBody: function() {
		return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
	},

	// Get the footer and beforeFooter and afterFooter lines
	// Args are: (tooltipItem, data)
	getFooter: function() {
		var me = this;
		var callbacks = me._options.callbacks;

		var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
		var footer = callbacks.footer.apply(me, arguments);
		var afterFooter = callbacks.afterFooter.apply(me, arguments);

		var lines = [];
		lines = pushOrConcat(lines, splitNewlines(beforeFooter));
		lines = pushOrConcat(lines, splitNewlines(footer));
		lines = pushOrConcat(lines, splitNewlines(afterFooter));

		return lines;
	},

	update: function(changed) {
		var me = this;
		var opts = me._options;

		// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
		// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
		// which breaks any animations.
		var existingModel = me._model;
		var model = me._model = getBaseModel(opts);
		var active = me._active;

		var data = me._data;

		// In the case where active.length === 0 we need to keep these at existing values for good animations
		var alignment = {
			xAlign: existingModel.xAlign,
			yAlign: existingModel.yAlign
		};
		var backgroundPoint = {
			x: existingModel.x,
			y: existingModel.y
		};
		var tooltipSize = {
			width: existingModel.width,
			height: existingModel.height
		};
		var tooltipPosition = {
			x: existingModel.caretX,
			y: existingModel.caretY
		};

		var i, len;

		if (active.length) {
			model.opacity = 1;

			var labelColors = [];
			var labelTextColors = [];
			tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);

			var tooltipItems = [];
			for (i = 0, len = active.length; i < len; ++i) {
				tooltipItems.push(createTooltipItem(active[i]));
			}

			// If the user provided a filter function, use it to modify the tooltip items
			if (opts.filter) {
				tooltipItems = tooltipItems.filter(function(a) {
					return opts.filter(a, data);
				});
			}

			// If the user provided a sorting function, use it to modify the tooltip items
			if (opts.itemSort) {
				tooltipItems = tooltipItems.sort(function(a, b) {
					return opts.itemSort(a, b, data);
				});
			}

			// Determine colors for boxes
			helpers$1.each(tooltipItems, function(tooltipItem) {
				labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
				labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
			});


			// Build the Text Lines
			model.title = me.getTitle(tooltipItems, data);
			model.beforeBody = me.getBeforeBody(tooltipItems, data);
			model.body = me.getBody(tooltipItems, data);
			model.afterBody = me.getAfterBody(tooltipItems, data);
			model.footer = me.getFooter(tooltipItems, data);

			// Initial positioning and colors
			model.x = tooltipPosition.x;
			model.y = tooltipPosition.y;
			model.caretPadding = opts.caretPadding;
			model.labelColors = labelColors;
			model.labelTextColors = labelTextColors;

			// data points
			model.dataPoints = tooltipItems;

			// We need to determine alignment of the tooltip
			tooltipSize = getTooltipSize(this, model);
			alignment = determineAlignment(this, tooltipSize);
			// Final Size and Position
			backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
		} else {
			model.opacity = 0;
		}

		model.xAlign = alignment.xAlign;
		model.yAlign = alignment.yAlign;
		model.x = backgroundPoint.x;
		model.y = backgroundPoint.y;
		model.width = tooltipSize.width;
		model.height = tooltipSize.height;

		// Point where the caret on the tooltip points to
		model.caretX = tooltipPosition.x;
		model.caretY = tooltipPosition.y;

		me._model = model;

		if (changed && opts.custom) {
			opts.custom.call(me, model);
		}

		return me;
	},

	drawCaret: function(tooltipPoint, size) {
		var ctx = this._chart.ctx;
		var vm = this._view;
		var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);

		ctx.lineTo(caretPosition.x1, caretPosition.y1);
		ctx.lineTo(caretPosition.x2, caretPosition.y2);
		ctx.lineTo(caretPosition.x3, caretPosition.y3);
	},
	getCaretPosition: function(tooltipPoint, size, vm) {
		var x1, x2, x3, y1, y2, y3;
		var caretSize = vm.caretSize;
		var cornerRadius = vm.cornerRadius;
		var xAlign = vm.xAlign;
		var yAlign = vm.yAlign;
		var ptX = tooltipPoint.x;
		var ptY = tooltipPoint.y;
		var width = size.width;
		var height = size.height;

		if (yAlign === 'center') {
			y2 = ptY + (height / 2);

			if (xAlign === 'left') {
				x1 = ptX;
				x2 = x1 - caretSize;
				x3 = x1;

				y1 = y2 + caretSize;
				y3 = y2 - caretSize;
			} else {
				x1 = ptX + width;
				x2 = x1 + caretSize;
				x3 = x1;

				y1 = y2 - caretSize;
				y3 = y2 + caretSize;
			}
		} else {
			if (xAlign === 'left') {
				x2 = ptX + cornerRadius + (caretSize);
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			} else if (xAlign === 'right') {
				x2 = ptX + width - cornerRadius - caretSize;
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			} else {
				x2 = vm.caretX;
				x1 = x2 - caretSize;
				x3 = x2 + caretSize;
			}
			if (yAlign === 'top') {
				y1 = ptY;
				y2 = y1 - caretSize;
				y3 = y1;
			} else {
				y1 = ptY + height;
				y2 = y1 + caretSize;
				y3 = y1;
				// invert drawing order
				var tmp = x3;
				x3 = x1;
				x1 = tmp;
			}
		}
		return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
	},

	drawTitle: function(pt, vm, ctx) {
		var title = vm.title;
		var length = title.length;
		var titleFontSize, titleSpacing, i;

		if (length) {
			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

			pt.x = getAlignedX(vm, vm._titleAlign);

			ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
			ctx.textBaseline = 'middle';

			titleFontSize = vm.titleFontSize;
			titleSpacing = vm.titleSpacing;

			ctx.fillStyle = vm.titleFontColor;
			ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

			for (i = 0; i < length; ++i) {
				ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
				pt.y += titleFontSize + titleSpacing; // Line Height and spacing

				if (i + 1 === length) {
					pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
				}
			}
		}
	},

	drawBody: function(pt, vm, ctx) {
		var bodyFontSize = vm.bodyFontSize;
		var bodySpacing = vm.bodySpacing;
		var bodyAlign = vm._bodyAlign;
		var body = vm.body;
		var drawColorBoxes = vm.displayColors;
		var xLinePadding = 0;
		var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;

		var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

		var fillLineOfText = function(line) {
			ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
			pt.y += bodyFontSize + bodySpacing;
		};

		var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
		var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);

		ctx.textAlign = bodyAlign;
		ctx.textBaseline = 'middle';
		ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

		pt.x = getAlignedX(vm, bodyAlignForCalculation);

		// Before body lines
		ctx.fillStyle = vm.bodyFontColor;
		helpers$1.each(vm.beforeBody, fillLineOfText);

		xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'
			? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
			: 0;

		// Draw body lines now
		for (i = 0, ilen = body.length; i < ilen; ++i) {
			bodyItem = body[i];
			textColor = vm.labelTextColors[i];
			labelColors = vm.labelColors[i];

			ctx.fillStyle = textColor;
			helpers$1.each(bodyItem.before, fillLineOfText);

			lines = bodyItem.lines;
			for (j = 0, jlen = lines.length; j < jlen; ++j) {
				// Draw Legend-like boxes if needed
				if (drawColorBoxes) {
					var rtlColorX = rtlHelper.x(colorX);

					// Fill a white rect so that colours merge nicely if the opacity is < 1
					ctx.fillStyle = vm.legendColorBackground;
					ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

					// Border
					ctx.lineWidth = 1;
					ctx.strokeStyle = labelColors.borderColor;
					ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

					// Inner square
					ctx.fillStyle = labelColors.backgroundColor;
					ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
					ctx.fillStyle = textColor;
				}

				fillLineOfText(lines[j]);
			}

			helpers$1.each(bodyItem.after, fillLineOfText);
		}

		// Reset back to 0 for after body
		xLinePadding = 0;

		// After body lines
		helpers$1.each(vm.afterBody, fillLineOfText);
		pt.y -= bodySpacing; // Remove last body spacing
	},

	drawFooter: function(pt, vm, ctx) {
		var footer = vm.footer;
		var length = footer.length;
		var footerFontSize, i;

		if (length) {
			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

			pt.x = getAlignedX(vm, vm._footerAlign);
			pt.y += vm.footerMarginTop;

			ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
			ctx.textBaseline = 'middle';

			footerFontSize = vm.footerFontSize;

			ctx.fillStyle = vm.footerFontColor;
			ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

			for (i = 0; i < length; ++i) {
				ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
				pt.y += footerFontSize + vm.footerSpacing;
			}
		}
	},

	drawBackground: function(pt, vm, ctx, tooltipSize) {
		ctx.fillStyle = vm.backgroundColor;
		ctx.strokeStyle = vm.borderColor;
		ctx.lineWidth = vm.borderWidth;
		var xAlign = vm.xAlign;
		var yAlign = vm.yAlign;
		var x = pt.x;
		var y = pt.y;
		var width = tooltipSize.width;
		var height = tooltipSize.height;
		var radius = vm.cornerRadius;

		ctx.beginPath();
		ctx.moveTo(x + radius, y);
		if (yAlign === 'top') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + width - radius, y);
		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
		if (yAlign === 'center' && xAlign === 'right') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + width, y + height - radius);
		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
		if (yAlign === 'bottom') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x + radius, y + height);
		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
		if (yAlign === 'center' && xAlign === 'left') {
			this.drawCaret(pt, tooltipSize);
		}
		ctx.lineTo(x, y + radius);
		ctx.quadraticCurveTo(x, y, x + radius, y);
		ctx.closePath();

		ctx.fill();

		if (vm.borderWidth > 0) {
			ctx.stroke();
		}
	},

	draw: function() {
		var ctx = this._chart.ctx;
		var vm = this._view;

		if (vm.opacity === 0) {
			return;
		}

		var tooltipSize = {
			width: vm.width,
			height: vm.height
		};
		var pt = {
			x: vm.x,
			y: vm.y
		};

		// IE11/Edge does not like very small opacities, so snap to 0
		var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

		// Truthy/falsey value for empty tooltip
		var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

		if (this._options.enabled && hasTooltipContent) {
			ctx.save();
			ctx.globalAlpha = opacity;

			// Draw Background
			this.drawBackground(pt, vm, ctx, tooltipSize);

			// Draw Title, Body, and Footer
			pt.y += vm.yPadding;

			helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);

			// Titles
			this.drawTitle(pt, vm, ctx);

			// Body
			this.drawBody(pt, vm, ctx);

			// Footer
			this.drawFooter(pt, vm, ctx);

			helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);

			ctx.restore();
		}
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event - The event to handle
	 * @returns {boolean} true if the tooltip changed
	 */
	handleEvent: function(e) {
		var me = this;
		var options = me._options;
		var changed = false;

		me._lastActive = me._lastActive || [];

		// Find Active Elements for tooltips
		if (e.type === 'mouseout') {
			me._active = [];
		} else {
			me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
			if (options.reverse) {
				me._active.reverse();
			}
		}

		// Remember Last Actives
		changed = !helpers$1.arrayEquals(me._active, me._lastActive);

		// Only handle target event on tooltip change
		if (changed) {
			me._lastActive = me._active;

			if (options.enabled || options.custom) {
				me._eventPosition = {
					x: e.x,
					y: e.y
				};

				me.update(true);
				me.pivot();
			}
		}

		return changed;
	}
});

/**
 * @namespace Chart.Tooltip.positioners
 */
var positioners_1 = positioners;

var core_tooltip = exports$4;
core_tooltip.positioners = positioners_1;

var valueOrDefault$9 = helpers$1.valueOrDefault;

core_defaults._set('global', {
	elements: {},
	events: [
		'mousemove',
		'mouseout',
		'click',
		'touchstart',
		'touchmove'
	],
	hover: {
		onHover: null,
		mode: 'nearest',
		intersect: true,
		animationDuration: 400
	},
	onClick: null,
	maintainAspectRatio: true,
	responsive: true,
	responsiveAnimationDuration: 0
});

/**
 * Recursively merge the given config objects representing the `scales` option
 * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
 * returns a deep copy of the result, thus doesn't alter inputs.
 */
function mergeScaleConfig(/* config objects ... */) {
	return helpers$1.merge({}, [].slice.call(arguments), {
		merger: function(key, target, source, options) {
			if (key === 'xAxes' || key === 'yAxes') {
				var slen = source[key].length;
				var i, type, scale;

				if (!target[key]) {
					target[key] = [];
				}

				for (i = 0; i < slen; ++i) {
					scale = source[key][i];
					type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');

					if (i >= target[key].length) {
						target[key].push({});
					}

					if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
						// new/untyped scale or type changed: let's apply the new defaults
						// then merge source scale to correctly overwrite the defaults.
						helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
					} else {
						// scales type are the same
						helpers$1.merge(target[key][i], scale);
					}
				}
			} else {
				helpers$1._merger(key, target, source, options);
			}
		}
	});
}

/**
 * Recursively merge the given config objects as the root options by handling
 * default scale options for the `scales` and `scale` properties, then returns
 * a deep copy of the result, thus doesn't alter inputs.
 */
function mergeConfig(/* config objects ... */) {
	return helpers$1.merge({}, [].slice.call(arguments), {
		merger: function(key, target, source, options) {
			var tval = target[key] || {};
			var sval = source[key];

			if (key === 'scales') {
				// scale config merging is complex. Add our own function here for that
				target[key] = mergeScaleConfig(tval, sval);
			} else if (key === 'scale') {
				// used in polar area & radar charts since there is only one scale
				target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
			} else {
				helpers$1._merger(key, target, source, options);
			}
		}
	});
}

function initConfig(config) {
	config = config || {};

	// Do NOT use mergeConfig for the data object because this method merges arrays
	// and so would change references to labels and datasets, preventing data updates.
	var data = config.data = config.data || {};
	data.datasets = data.datasets || [];
	data.labels = data.labels || [];

	config.options = mergeConfig(
		core_defaults.global,
		core_defaults[config.type],
		config.options || {});

	return config;
}

function updateConfig(chart) {
	var newOptions = chart.options;

	helpers$1.each(chart.scales, function(scale) {
		core_layouts.removeBox(chart, scale);
	});

	newOptions = mergeConfig(
		core_defaults.global,
		core_defaults[chart.config.type],
		newOptions);

	chart.options = chart.config.options = newOptions;
	chart.ensureScalesHaveIDs();
	chart.buildOrUpdateScales();

	// Tooltip
	chart.tooltip._options = newOptions.tooltips;
	chart.tooltip.initialize();
}

function nextAvailableScaleId(axesOpts, prefix, index) {
	var id;
	var hasId = function(obj) {
		return obj.id === id;
	};

	do {
		id = prefix + index++;
	} while (helpers$1.findIndex(axesOpts, hasId) >= 0);

	return id;
}

function positionIsHorizontal(position) {
	return position === 'top' || position === 'bottom';
}

function compare2Level(l1, l2) {
	return function(a, b) {
		return a[l1] === b[l1]
			? a[l2] - b[l2]
			: a[l1] - b[l1];
	};
}

var Chart = function(item, config) {
	this.construct(item, config);
	return this;
};

helpers$1.extend(Chart.prototype, /** @lends Chart */ {
	/**
	 * @private
	 */
	construct: function(item, config) {
		var me = this;

		config = initConfig(config);

		var context = platform.acquireContext(item, config);
		var canvas = context && context.canvas;
		var height = canvas && canvas.height;
		var width = canvas && canvas.width;

		me.id = helpers$1.uid();
		me.ctx = context;
		me.canvas = canvas;
		me.config = config;
		me.width = width;
		me.height = height;
		me.aspectRatio = height ? width / height : null;
		me.options = config.options;
		me._bufferedRender = false;
		me._layers = [];

		/**
		 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
		 * the "instance" still need to be defined since it might be called from plugins.
		 * @prop Chart#chart
		 * @deprecated since version 2.6.0
		 * @todo remove at version 3
		 * @private
		 */
		me.chart = me;
		me.controller = me; // chart.chart.controller #inception

		// Add the chart instance to the global namespace
		Chart.instances[me.id] = me;

		// Define alias to the config data: `chart.data === chart.config.data`
		Object.defineProperty(me, 'data', {
			get: function() {
				return me.config.data;
			},
			set: function(value) {
				me.config.data = value;
			}
		});

		if (!context || !canvas) {
			// The given item is not a compatible context2d element, let's return before finalizing
			// the chart initialization but after setting basic chart / controller properties that
			// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
			// https://github.com/chartjs/Chart.js/issues/2807
			console.error("Failed to create chart: can't acquire context from the given item");
			return;
		}

		me.initialize();
		me.update();
	},

	/**
	 * @private
	 */
	initialize: function() {
		var me = this;

		// Before init plugin notification
		core_plugins.notify(me, 'beforeInit');

		helpers$1.retinaScale(me, me.options.devicePixelRatio);

		me.bindEvents();

		if (me.options.responsive) {
			// Initial resize before chart draws (must be silent to preserve initial animations).
			me.resize(true);
		}

		me.initToolTip();

		// After init plugin notification
		core_plugins.notify(me, 'afterInit');

		return me;
	},

	clear: function() {
		helpers$1.canvas.clear(this);
		return this;
	},

	stop: function() {
		// Stops any current animation loop occurring
		core_animations.cancelAnimation(this);
		return this;
	},

	resize: function(silent) {
		var me = this;
		var options = me.options;
		var canvas = me.canvas;
		var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;

		// the canvas render width and height will be casted to integers so make sure that
		// the canvas display style uses the same integer values to avoid blurring effect.

		// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
		var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
		var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

		if (me.width === newWidth && me.height === newHeight) {
			return;
		}

		canvas.width = me.width = newWidth;
		canvas.height = me.height = newHeight;
		canvas.style.width = newWidth + 'px';
		canvas.style.height = newHeight + 'px';

		helpers$1.retinaScale(me, options.devicePixelRatio);

		if (!silent) {
			// Notify any plugins about the resize
			var newSize = {width: newWidth, height: newHeight};
			core_plugins.notify(me, 'resize', [newSize]);

			// Notify of resize
			if (options.onResize) {
				options.onResize(me, newSize);
			}

			me.stop();
			me.update({
				duration: options.responsiveAnimationDuration
			});
		}
	},

	ensureScalesHaveIDs: function() {
		var options = this.options;
		var scalesOptions = options.scales || {};
		var scaleOptions = options.scale;

		helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
			if (!xAxisOptions.id) {
				xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
			}
		});

		helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
			if (!yAxisOptions.id) {
				yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
			}
		});

		if (scaleOptions) {
			scaleOptions.id = scaleOptions.id || 'scale';
		}
	},

	/**
	 * Builds a map of scale ID to scale object for future lookup.
	 */
	buildOrUpdateScales: function() {
		var me = this;
		var options = me.options;
		var scales = me.scales || {};
		var items = [];
		var updated = Object.keys(scales).reduce(function(obj, id) {
			obj[id] = false;
			return obj;
		}, {});

		if (options.scales) {
			items = items.concat(
				(options.scales.xAxes || []).map(function(xAxisOptions) {
					return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
				}),
				(options.scales.yAxes || []).map(function(yAxisOptions) {
					return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
				})
			);
		}

		if (options.scale) {
			items.push({
				options: options.scale,
				dtype: 'radialLinear',
				isDefault: true,
				dposition: 'chartArea'
			});
		}

		helpers$1.each(items, function(item) {
			var scaleOptions = item.options;
			var id = scaleOptions.id;
			var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);

			if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
				scaleOptions.position = item.dposition;
			}

			updated[id] = true;
			var scale = null;
			if (id in scales && scales[id].type === scaleType) {
				scale = scales[id];
				scale.options = scaleOptions;
				scale.ctx = me.ctx;
				scale.chart = me;
			} else {
				var scaleClass = core_scaleService.getScaleConstructor(scaleType);
				if (!scaleClass) {
					return;
				}
				scale = new scaleClass({
					id: id,
					type: scaleType,
					options: scaleOptions,
					ctx: me.ctx,
					chart: me
				});
				scales[scale.id] = scale;
			}

			scale.mergeTicksOptions();

			// TODO(SB): I think we should be able to remove this custom case (options.scale)
			// and consider it as a regular scale part of the "scales"" map only! This would
			// make the logic easier and remove some useless? custom code.
			if (item.isDefault) {
				me.scale = scale;
			}
		});
		// clear up discarded scales
		helpers$1.each(updated, function(hasUpdated, id) {
			if (!hasUpdated) {
				delete scales[id];
			}
		});

		me.scales = scales;

		core_scaleService.addScalesToLayout(this);
	},

	buildOrUpdateControllers: function() {
		var me = this;
		var newControllers = [];
		var datasets = me.data.datasets;
		var i, ilen;

		for (i = 0, ilen = datasets.length; i < ilen; i++) {
			var dataset = datasets[i];
			var meta = me.getDatasetMeta(i);
			var type = dataset.type || me.config.type;

			if (meta.type && meta.type !== type) {
				me.destroyDatasetMeta(i);
				meta = me.getDatasetMeta(i);
			}
			meta.type = type;
			meta.order = dataset.order || 0;
			meta.index = i;

			if (meta.controller) {
				meta.controller.updateIndex(i);
				meta.controller.linkScales();
			} else {
				var ControllerClass = controllers[meta.type];
				if (ControllerClass === undefined) {
					throw new Error('"' + meta.type + '" is not a chart type.');
				}

				meta.controller = new ControllerClass(me, i);
				newControllers.push(meta.controller);
			}
		}

		return newControllers;
	},

	/**
	 * Reset the elements of all datasets
	 * @private
	 */
	resetElements: function() {
		var me = this;
		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
			me.getDatasetMeta(datasetIndex).controller.reset();
		}, me);
	},

	/**
	* Resets the chart back to it's state before the initial animation
	*/
	reset: function() {
		this.resetElements();
		this.tooltip.initialize();
	},

	update: function(config) {
		var me = this;
		var i, ilen;

		if (!config || typeof config !== 'object') {
			// backwards compatibility
			config = {
				duration: config,
				lazy: arguments[1]
			};
		}

		updateConfig(me);

		// plugins options references might have change, let's invalidate the cache
		// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
		core_plugins._invalidate(me);

		if (core_plugins.notify(me, 'beforeUpdate') === false) {
			return;
		}

		// In case the entire data object changed
		me.tooltip._data = me.data;

		// Make sure dataset controllers are updated and new controllers are reset
		var newControllers = me.buildOrUpdateControllers();

		// Make sure all dataset controllers have correct meta data counts
		for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
			me.getDatasetMeta(i).controller.buildOrUpdateElements();
		}

		me.updateLayout();

		// Can only reset the new controllers after the scales have been updated
		if (me.options.animation && me.options.animation.duration) {
			helpers$1.each(newControllers, function(controller) {
				controller.reset();
			});
		}

		me.updateDatasets();

		// Need to reset tooltip in case it is displayed with elements that are removed
		// after update.
		me.tooltip.initialize();

		// Last active contains items that were previously in the tooltip.
		// When we reset the tooltip, we need to clear it
		me.lastActive = [];

		// Do this before render so that any plugins that need final scale updates can use it
		core_plugins.notify(me, 'afterUpdate');

		me._layers.sort(compare2Level('z', '_idx'));

		if (me._bufferedRender) {
			me._bufferedRequest = {
				duration: config.duration,
				easing: config.easing,
				lazy: config.lazy
			};
		} else {
			me.render(config);
		}
	},

	/**
	 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
	 * hook, in which case, plugins will not be called on `afterLayout`.
	 * @private
	 */
	updateLayout: function() {
		var me = this;

		if (core_plugins.notify(me, 'beforeLayout') === false) {
			return;
		}

		core_layouts.update(this, this.width, this.height);

		me._layers = [];
		helpers$1.each(me.boxes, function(box) {
			// _configure is called twice, once in core.scale.update and once here.
			// Here the boxes are fully updated and at their final positions.
			if (box._configure) {
				box._configure();
			}
			me._layers.push.apply(me._layers, box._layers());
		}, me);

		me._layers.forEach(function(item, index) {
			item._idx = index;
		});

		/**
		 * Provided for backward compatibility, use `afterLayout` instead.
		 * @method IPlugin#afterScaleUpdate
		 * @deprecated since version 2.5.0
		 * @todo remove at version 3
		 * @private
		 */
		core_plugins.notify(me, 'afterScaleUpdate');
		core_plugins.notify(me, 'afterLayout');
	},

	/**
	 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
	 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
	 * @private
	 */
	updateDatasets: function() {
		var me = this;

		if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
			return;
		}

		for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
			me.updateDataset(i);
		}

		core_plugins.notify(me, 'afterDatasetsUpdate');
	},

	/**
	 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
	 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
	 * @private
	 */
	updateDataset: function(index) {
		var me = this;
		var meta = me.getDatasetMeta(index);
		var args = {
			meta: meta,
			index: index
		};

		if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
			return;
		}

		meta.controller._update();

		core_plugins.notify(me, 'afterDatasetUpdate', [args]);
	},

	render: function(config) {
		var me = this;

		if (!config || typeof config !== 'object') {
			// backwards compatibility
			config = {
				duration: config,
				lazy: arguments[1]
			};
		}

		var animationOptions = me.options.animation;
		var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
		var lazy = config.lazy;

		if (core_plugins.notify(me, 'beforeRender') === false) {
			return;
		}

		var onComplete = function(animation) {
			core_plugins.notify(me, 'afterRender');
			helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
		};

		if (animationOptions && duration) {
			var animation = new core_animation({
				numSteps: duration / 16.66, // 60 fps
				easing: config.easing || animationOptions.easing,

				render: function(chart, animationObject) {
					var easingFunction = helpers$1.easing.effects[animationObject.easing];
					var currentStep = animationObject.currentStep;
					var stepDecimal = currentStep / animationObject.numSteps;

					chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
				},

				onAnimationProgress: animationOptions.onProgress,
				onAnimationComplete: onComplete
			});

			core_animations.addAnimation(me, animation, duration, lazy);
		} else {
			me.draw();

			// See https://github.com/chartjs/Chart.js/issues/3781
			onComplete(new core_animation({numSteps: 0, chart: me}));
		}

		return me;
	},

	draw: function(easingValue) {
		var me = this;
		var i, layers;

		me.clear();

		if (helpers$1.isNullOrUndef(easingValue)) {
			easingValue = 1;
		}

		me.transition(easingValue);

		if (me.width <= 0 || me.height <= 0) {
			return;
		}

		if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
			return;
		}

		// Because of plugin hooks (before/afterDatasetsDraw), datasets can't
		// currently be part of layers. Instead, we draw
		// layers <= 0 before(default, backward compat), and the rest after
		layers = me._layers;
		for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
			layers[i].draw(me.chartArea);
		}

		me.drawDatasets(easingValue);

		// Rest of layers
		for (; i < layers.length; ++i) {
			layers[i].draw(me.chartArea);
		}

		me._drawTooltip(easingValue);

		core_plugins.notify(me, 'afterDraw', [easingValue]);
	},

	/**
	 * @private
	 */
	transition: function(easingValue) {
		var me = this;

		for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
			if (me.isDatasetVisible(i)) {
				me.getDatasetMeta(i).controller.transition(easingValue);
			}
		}

		me.tooltip.transition(easingValue);
	},

	/**
	 * @private
	 */
	_getSortedDatasetMetas: function(filterVisible) {
		var me = this;
		var datasets = me.data.datasets || [];
		var result = [];
		var i, ilen;

		for (i = 0, ilen = datasets.length; i < ilen; ++i) {
			if (!filterVisible || me.isDatasetVisible(i)) {
				result.push(me.getDatasetMeta(i));
			}
		}

		result.sort(compare2Level('order', 'index'));

		return result;
	},

	/**
	 * @private
	 */
	_getSortedVisibleDatasetMetas: function() {
		return this._getSortedDatasetMetas(true);
	},

	/**
	 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
	 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
	 * @private
	 */
	drawDatasets: function(easingValue) {
		var me = this;
		var metasets, i;

		if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
			return;
		}

		metasets = me._getSortedVisibleDatasetMetas();
		for (i = metasets.length - 1; i >= 0; --i) {
			me.drawDataset(metasets[i], easingValue);
		}

		core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
	},

	/**
	 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
	 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
	 * @private
	 */
	drawDataset: function(meta, easingValue) {
		var me = this;
		var args = {
			meta: meta,
			index: meta.index,
			easingValue: easingValue
		};

		if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
			return;
		}

		meta.controller.draw(easingValue);

		core_plugins.notify(me, 'afterDatasetDraw', [args]);
	},

	/**
	 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
	 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
	 * @private
	 */
	_drawTooltip: function(easingValue) {
		var me = this;
		var tooltip = me.tooltip;
		var args = {
			tooltip: tooltip,
			easingValue: easingValue
		};

		if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
			return;
		}

		tooltip.draw();

		core_plugins.notify(me, 'afterTooltipDraw', [args]);
	},

	/**
	 * Get the single element that was clicked on
	 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
	 */
	getElementAtEvent: function(e) {
		return core_interaction.modes.single(this, e);
	},

	getElementsAtEvent: function(e) {
		return core_interaction.modes.label(this, e, {intersect: true});
	},

	getElementsAtXAxis: function(e) {
		return core_interaction.modes['x-axis'](this, e, {intersect: true});
	},

	getElementsAtEventForMode: function(e, mode, options) {
		var method = core_interaction.modes[mode];
		if (typeof method === 'function') {
			return method(this, e, options);
		}

		return [];
	},

	getDatasetAtEvent: function(e) {
		return core_interaction.modes.dataset(this, e, {intersect: true});
	},

	getDatasetMeta: function(datasetIndex) {
		var me = this;
		var dataset = me.data.datasets[datasetIndex];
		if (!dataset._meta) {
			dataset._meta = {};
		}

		var meta = dataset._meta[me.id];
		if (!meta) {
			meta = dataset._meta[me.id] = {
				type: null,
				data: [],
				dataset: null,
				controller: null,
				hidden: null,			// See isDatasetVisible() comment
				xAxisID: null,
				yAxisID: null,
				order: dataset.order || 0,
				index: datasetIndex
			};
		}

		return meta;
	},

	getVisibleDatasetCount: function() {
		var count = 0;
		for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
			if (this.isDatasetVisible(i)) {
				count++;
			}
		}
		return count;
	},

	isDatasetVisible: function(datasetIndex) {
		var meta = this.getDatasetMeta(datasetIndex);

		// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
		// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
		return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
	},

	generateLegend: function() {
		return this.options.legendCallback(this);
	},

	/**
	 * @private
	 */
	destroyDatasetMeta: function(datasetIndex) {
		var id = this.id;
		var dataset = this.data.datasets[datasetIndex];
		var meta = dataset._meta && dataset._meta[id];

		if (meta) {
			meta.controller.destroy();
			delete dataset._meta[id];
		}
	},

	destroy: function() {
		var me = this;
		var canvas = me.canvas;
		var i, ilen;

		me.stop();

		// dataset controllers need to cleanup associated data
		for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
			me.destroyDatasetMeta(i);
		}

		if (canvas) {
			me.unbindEvents();
			helpers$1.canvas.clear(me);
			platform.releaseContext(me.ctx);
			me.canvas = null;
			me.ctx = null;
		}

		core_plugins.notify(me, 'destroy');

		delete Chart.instances[me.id];
	},

	toBase64Image: function() {
		return this.canvas.toDataURL.apply(this.canvas, arguments);
	},

	initToolTip: function() {
		var me = this;
		me.tooltip = new core_tooltip({
			_chart: me,
			_chartInstance: me, // deprecated, backward compatibility
			_data: me.data,
			_options: me.options.tooltips
		}, me);
	},

	/**
	 * @private
	 */
	bindEvents: function() {
		var me = this;
		var listeners = me._listeners = {};
		var listener = function() {
			me.eventHandler.apply(me, arguments);
		};

		helpers$1.each(me.options.events, function(type) {
			platform.addEventListener(me, type, listener);
			listeners[type] = listener;
		});

		// Elements used to detect size change should not be injected for non responsive charts.
		// See https://github.com/chartjs/Chart.js/issues/2210
		if (me.options.responsive) {
			listener = function() {
				me.resize();
			};

			platform.addEventListener(me, 'resize', listener);
			listeners.resize = listener;
		}
	},

	/**
	 * @private
	 */
	unbindEvents: function() {
		var me = this;
		var listeners = me._listeners;
		if (!listeners) {
			return;
		}

		delete me._listeners;
		helpers$1.each(listeners, function(listener, type) {
			platform.removeEventListener(me, type, listener);
		});
	},

	updateHoverStyle: function(elements, mode, enabled) {
		var prefix = enabled ? 'set' : 'remove';
		var element, i, ilen;

		for (i = 0, ilen = elements.length; i < ilen; ++i) {
			element = elements[i];
			if (element) {
				this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
			}
		}

		if (mode === 'dataset') {
			this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
		}
	},

	/**
	 * @private
	 */
	eventHandler: function(e) {
		var me = this;
		var tooltip = me.tooltip;

		if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
			return;
		}

		// Buffer any update calls so that renders do not occur
		me._bufferedRender = true;
		me._bufferedRequest = null;

		var changed = me.handleEvent(e);
		// for smooth tooltip animations issue #4989
		// the tooltip should be the source of change
		// Animation check workaround:
		// tooltip._start will be null when tooltip isn't animating
		if (tooltip) {
			changed = tooltip._start
				? tooltip.handleEvent(e)
				: changed | tooltip.handleEvent(e);
		}

		core_plugins.notify(me, 'afterEvent', [e]);

		var bufferedRequest = me._bufferedRequest;
		if (bufferedRequest) {
			// If we have an update that was triggered, we need to do a normal render
			me.render(bufferedRequest);
		} else if (changed && !me.animating) {
			// If entering, leaving, or changing elements, animate the change via pivot
			me.stop();

			// We only need to render at this point. Updating will cause scales to be
			// recomputed generating flicker & using more memory than necessary.
			me.render({
				duration: me.options.hover.animationDuration,
				lazy: true
			});
		}

		me._bufferedRender = false;
		me._bufferedRequest = null;

		return me;
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event the event to handle
	 * @return {boolean} true if the chart needs to re-render
	 */
	handleEvent: function(e) {
		var me = this;
		var options = me.options || {};
		var hoverOptions = options.hover;
		var changed = false;

		me.lastActive = me.lastActive || [];

		// Find Active Elements for hover and tooltips
		if (e.type === 'mouseout') {
			me.active = [];
		} else {
			me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
		}

		// Invoke onHover hook
		// Need to call with native event here to not break backwards compatibility
		helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);

		if (e.type === 'mouseup' || e.type === 'click') {
			if (options.onClick) {
				// Use e.native here for backwards compatibility
				options.onClick.call(me, e.native, me.active);
			}
		}

		// Remove styling for last active (even if it may still be active)
		if (me.lastActive.length) {
			me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
		}

		// Built in hover styling
		if (me.active.length && hoverOptions.mode) {
			me.updateHoverStyle(me.active, hoverOptions.mode, true);
		}

		changed = !helpers$1.arrayEquals(me.active, me.lastActive);

		// Remember Last Actives
		me.lastActive = me.active;

		return changed;
	}
});

/**
 * NOTE(SB) We actually don't use this container anymore but we need to keep it
 * for backward compatibility. Though, it can still be useful for plugins that
 * would need to work on multiple charts?!
 */
Chart.instances = {};

var core_controller = Chart;

// DEPRECATIONS

/**
 * Provided for backward compatibility, use Chart instead.
 * @class Chart.Controller
 * @deprecated since version 2.6
 * @todo remove at version 3
 * @private
 */
Chart.Controller = Chart;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart
 * @deprecated since version 2.8
 * @todo remove at version 3
 * @private
 */
Chart.types = {};

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.helpers.configMerge
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
helpers$1.configMerge = mergeConfig;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.helpers.scaleMerge
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
helpers$1.scaleMerge = mergeScaleConfig;

var core_helpers = function() {

	// -- Basic js utility methods

	helpers$1.where = function(collection, filterCallback) {
		if (helpers$1.isArray(collection) && Array.prototype.filter) {
			return collection.filter(filterCallback);
		}
		var filtered = [];

		helpers$1.each(collection, function(item) {
			if (filterCallback(item)) {
				filtered.push(item);
			}
		});

		return filtered;
	};
	helpers$1.findIndex = Array.prototype.findIndex ?
		function(array, callback, scope) {
			return array.findIndex(callback, scope);
		} :
		function(array, callback, scope) {
			scope = scope === undefined ? array : scope;
			for (var i = 0, ilen = array.length; i < ilen; ++i) {
				if (callback.call(scope, array[i], i, array)) {
					return i;
				}
			}
			return -1;
		};
	helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to start of the array
		if (helpers$1.isNullOrUndef(startIndex)) {
			startIndex = -1;
		}
		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to end of the array
		if (helpers$1.isNullOrUndef(startIndex)) {
			startIndex = arrayToSearch.length;
		}
		for (var i = startIndex - 1; i >= 0; i--) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};

	// -- Math methods
	helpers$1.isNumber = function(n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	};
	helpers$1.almostEquals = function(x, y, epsilon) {
		return Math.abs(x - y) < epsilon;
	};
	helpers$1.almostWhole = function(x, epsilon) {
		var rounded = Math.round(x);
		return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
	};
	helpers$1.max = function(array) {
		return array.reduce(function(max, value) {
			if (!isNaN(value)) {
				return Math.max(max, value);
			}
			return max;
		}, Number.NEGATIVE_INFINITY);
	};
	helpers$1.min = function(array) {
		return array.reduce(function(min, value) {
			if (!isNaN(value)) {
				return Math.min(min, value);
			}
			return min;
		}, Number.POSITIVE_INFINITY);
	};
	helpers$1.sign = Math.sign ?
		function(x) {
			return Math.sign(x);
		} :
		function(x) {
			x = +x; // convert to a number
			if (x === 0 || isNaN(x)) {
				return x;
			}
			return x > 0 ? 1 : -1;
		};
	helpers$1.toRadians = function(degrees) {
		return degrees * (Math.PI / 180);
	};
	helpers$1.toDegrees = function(radians) {
		return radians * (180 / Math.PI);
	};

	/**
	 * Returns the number of decimal places
	 * i.e. the number of digits after the decimal point, of the value of this Number.
	 * @param {number} x - A number.
	 * @returns {number} The number of decimal places.
	 * @private
	 */
	helpers$1._decimalPlaces = function(x) {
		if (!helpers$1.isFinite(x)) {
			return;
		}
		var e = 1;
		var p = 0;
		while (Math.round(x * e) / e !== x) {
			e *= 10;
			p++;
		}
		return p;
	};

	// Gets the angle from vertical upright to the point about a centre.
	helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
		var distanceFromXCenter = anglePoint.x - centrePoint.x;
		var distanceFromYCenter = anglePoint.y - centrePoint.y;
		var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

		if (angle < (-0.5 * Math.PI)) {
			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
		}

		return {
			angle: angle,
			distance: radialDistanceFromCenter
		};
	};
	helpers$1.distanceBetweenPoints = function(pt1, pt2) {
		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
	};

	/**
	 * Provided for backward compatibility, not available anymore
	 * @function Chart.helpers.aliasPixel
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 */
	helpers$1.aliasPixel = function(pixelWidth) {
		return (pixelWidth % 2 === 0) ? 0 : 0.5;
	};

	/**
	 * Returns the aligned pixel value to avoid anti-aliasing blur
	 * @param {Chart} chart - The chart instance.
	 * @param {number} pixel - A pixel value.
	 * @param {number} width - The width of the element.
	 * @returns {number} The aligned pixel value.
	 * @private
	 */
	helpers$1._alignPixel = function(chart, pixel, width) {
		var devicePixelRatio = chart.currentDevicePixelRatio;
		var halfWidth = width / 2;
		return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
	};

	helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
		// Props to Rob Spencer at scaled innovation for his post on splining between points
		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

		// This function must also respect "skipped" points

		var previous = firstPoint.skip ? middlePoint : firstPoint;
		var current = middlePoint;
		var next = afterPoint.skip ? middlePoint : afterPoint;

		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

		var s01 = d01 / (d01 + d12);
		var s12 = d12 / (d01 + d12);

		// If all points are the same, s01 & s02 will be inf
		s01 = isNaN(s01) ? 0 : s01;
		s12 = isNaN(s12) ? 0 : s12;

		var fa = t * s01; // scaling factor for triangle Ta
		var fb = t * s12;

		return {
			previous: {
				x: current.x - fa * (next.x - previous.x),
				y: current.y - fa * (next.y - previous.y)
			},
			next: {
				x: current.x + fb * (next.x - previous.x),
				y: current.y + fb * (next.y - previous.y)
			}
		};
	};
	helpers$1.EPSILON = Number.EPSILON || 1e-14;
	helpers$1.splineCurveMonotone = function(points) {
		// This function calculates Bézier control points in a similar way than |splineCurve|,
		// but preserves monotonicity of the provided data and ensures no local extremums are added
		// between the dataset discrete points due to the interpolation.
		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

		var pointsWithTangents = (points || []).map(function(point) {
			return {
				model: point._model,
				deltaK: 0,
				mK: 0
			};
		});

		// Calculate slopes (deltaK) and initialize tangents (mK)
		var pointsLen = pointsWithTangents.length;
		var i, pointBefore, pointCurrent, pointAfter;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointAfter && !pointAfter.model.skip) {
				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
			}

			if (!pointBefore || pointBefore.model.skip) {
				pointCurrent.mK = pointCurrent.deltaK;
			} else if (!pointAfter || pointAfter.model.skip) {
				pointCurrent.mK = pointBefore.deltaK;
			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
				pointCurrent.mK = 0;
			} else {
				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
			}
		}

		// Adjust tangents to ensure monotonic properties
		var alphaK, betaK, tauK, squaredMagnitude;
		for (i = 0; i < pointsLen - 1; ++i) {
			pointCurrent = pointsWithTangents[i];
			pointAfter = pointsWithTangents[i + 1];
			if (pointCurrent.model.skip || pointAfter.model.skip) {
				continue;
			}

			if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
				pointCurrent.mK = pointAfter.mK = 0;
				continue;
			}

			alphaK = pointCurrent.mK / pointCurrent.deltaK;
			betaK = pointAfter.mK / pointCurrent.deltaK;
			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
			if (squaredMagnitude <= 9) {
				continue;
			}

			tauK = 3 / Math.sqrt(squaredMagnitude);
			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
		}

		// Compute control points
		var deltaX;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointBefore && !pointBefore.model.skip) {
				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
			}
			if (pointAfter && !pointAfter.model.skip) {
				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
			}
		}
	};
	helpers$1.nextItem = function(collection, index, loop) {
		if (loop) {
			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
		}
		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
	};
	helpers$1.previousItem = function(collection, index, loop) {
		if (loop) {
			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
		}
		return index <= 0 ? collection[0] : collection[index - 1];
	};
	// Implementation of the nice number algorithm used in determining where axis labels will go
	helpers$1.niceNum = function(range, round) {
		var exponent = Math.floor(helpers$1.log10(range));
		var fraction = range / Math.pow(10, exponent);
		var niceFraction;

		if (round) {
			if (fraction < 1.5) {
				niceFraction = 1;
			} else if (fraction < 3) {
				niceFraction = 2;
			} else if (fraction < 7) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
		} else if (fraction <= 1.0) {
			niceFraction = 1;
		} else if (fraction <= 2) {
			niceFraction = 2;
		} else if (fraction <= 5) {
			niceFraction = 5;
		} else {
			niceFraction = 10;
		}

		return niceFraction * Math.pow(10, exponent);
	};
	// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
	helpers$1.requestAnimFrame = (function() {
		if (typeof window === 'undefined') {
			return function(callback) {
				callback();
			};
		}
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(callback) {
				return window.setTimeout(callback, 1000 / 60);
			};
	}());
	// -- DOM methods
	helpers$1.getRelativePosition = function(evt, chart) {
		var mouseX, mouseY;
		var e = evt.originalEvent || evt;
		var canvas = evt.target || evt.srcElement;
		var boundingRect = canvas.getBoundingClientRect();

		var touches = e.touches;
		if (touches && touches.length > 0) {
			mouseX = touches[0].clientX;
			mouseY = touches[0].clientY;

		} else {
			mouseX = e.clientX;
			mouseY = e.clientY;
		}

		// Scale mouse coordinates into canvas coordinates
		// by following the pattern laid out by 'jerryj' in the comments of
		// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
		var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
		var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
		var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
		var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

		return {
			x: mouseX,
			y: mouseY
		};

	};

	// Private helper function to convert max-width/max-height values that may be percentages into a number
	function parseMaxStyle(styleValue, node, parentProperty) {
		var valueInPixels;
		if (typeof styleValue === 'string') {
			valueInPixels = parseInt(styleValue, 10);

			if (styleValue.indexOf('%') !== -1) {
				// percentage * size in dimension
				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
			}
		} else {
			valueInPixels = styleValue;
		}

		return valueInPixels;
	}

	/**
	 * Returns if the given value contains an effective constraint.
	 * @private
	 */
	function isConstrainedValue(value) {
		return value !== undefined && value !== null && value !== 'none';
	}

	/**
	 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
	 * @param {HTMLElement} domNode - the node to check the constraint on
	 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
	 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
	 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
	 */
	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
		var view = document.defaultView;
		var parentNode = helpers$1._getParentNode(domNode);
		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
		var hasCNode = isConstrainedValue(constrainedNode);
		var hasCContainer = isConstrainedValue(constrainedContainer);
		var infinity = Number.POSITIVE_INFINITY;

		if (hasCNode || hasCContainer) {
			return Math.min(
				hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
				hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
		}

		return 'none';
	}
	// returns Number or undefined if no constraint
	helpers$1.getConstraintWidth = function(domNode) {
		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
	};
	// returns Number or undefined if no constraint
	helpers$1.getConstraintHeight = function(domNode) {
		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
	};
	/**
	 * @private
 	 */
	helpers$1._calculatePadding = function(container, padding, parentDimension) {
		padding = helpers$1.getStyle(container, padding);

		return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
	};
	/**
	 * @private
	 */
	helpers$1._getParentNode = function(domNode) {
		var parent = domNode.parentNode;
		if (parent && parent.toString() === '[object ShadowRoot]') {
			parent = parent.host;
		}
		return parent;
	};
	helpers$1.getMaximumWidth = function(domNode) {
		var container = helpers$1._getParentNode(domNode);
		if (!container) {
			return domNode.clientWidth;
		}

		var clientWidth = container.clientWidth;
		var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
		var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

		var w = clientWidth - paddingLeft - paddingRight;
		var cw = helpers$1.getConstraintWidth(domNode);
		return isNaN(cw) ? w : Math.min(w, cw);
	};
	helpers$1.getMaximumHeight = function(domNode) {
		var container = helpers$1._getParentNode(domNode);
		if (!container) {
			return domNode.clientHeight;
		}

		var clientHeight = container.clientHeight;
		var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
		var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

		var h = clientHeight - paddingTop - paddingBottom;
		var ch = helpers$1.getConstraintHeight(domNode);
		return isNaN(ch) ? h : Math.min(h, ch);
	};
	helpers$1.getStyle = function(el, property) {
		return el.currentStyle ?
			el.currentStyle[property] :
			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
	};
	helpers$1.retinaScale = function(chart, forceRatio) {
		var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
		if (pixelRatio === 1) {
			return;
		}

		var canvas = chart.canvas;
		var height = chart.height;
		var width = chart.width;

		canvas.height = height * pixelRatio;
		canvas.width = width * pixelRatio;
		chart.ctx.scale(pixelRatio, pixelRatio);

		// If no style has been set on the canvas, the render size is used as display size,
		// making the chart visually bigger, so let's enforce it to the "correct" values.
		// See https://github.com/chartjs/Chart.js/issues/3575
		if (!canvas.style.height && !canvas.style.width) {
			canvas.style.height = height + 'px';
			canvas.style.width = width + 'px';
		}
	};
	// -- Canvas methods
	helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
	};
	helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
		cache = cache || {};
		var data = cache.data = cache.data || {};
		var gc = cache.garbageCollect = cache.garbageCollect || [];

		if (cache.font !== font) {
			data = cache.data = {};
			gc = cache.garbageCollect = [];
			cache.font = font;
		}

		ctx.font = font;
		var longest = 0;
		var ilen = arrayOfThings.length;
		var i, j, jlen, thing, nestedThing;
		for (i = 0; i < ilen; i++) {
			thing = arrayOfThings[i];

			// Undefined strings and arrays should not be measured
			if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
				longest = helpers$1.measureText(ctx, data, gc, longest, thing);
			} else if (helpers$1.isArray(thing)) {
				// if it is an array lets measure each element
				// to do maybe simplify this function a bit so we can do this more recursively?
				for (j = 0, jlen = thing.length; j < jlen; j++) {
					nestedThing = thing[j];
					// Undefined strings and arrays should not be measured
					if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
						longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
					}
				}
			}
		}

		var gcLen = gc.length / 2;
		if (gcLen > arrayOfThings.length) {
			for (i = 0; i < gcLen; i++) {
				delete data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
		return longest;
	};
	helpers$1.measureText = function(ctx, data, gc, longest, string) {
		var textWidth = data[string];
		if (!textWidth) {
			textWidth = data[string] = ctx.measureText(string).width;
			gc.push(string);
		}
		if (textWidth > longest) {
			longest = textWidth;
		}
		return longest;
	};

	/**
	 * @deprecated
	 */
	helpers$1.numberOfLabelLines = function(arrayOfThings) {
		var numberOfLines = 1;
		helpers$1.each(arrayOfThings, function(thing) {
			if (helpers$1.isArray(thing)) {
				if (thing.length > numberOfLines) {
					numberOfLines = thing.length;
				}
			}
		});
		return numberOfLines;
	};

	helpers$1.color = !chartjsColor ?
		function(value) {
			console.error('Color.js not found!');
			return value;
		} :
		function(value) {
			/* global CanvasGradient */
			if (value instanceof CanvasGradient) {
				value = core_defaults.global.defaultColor;
			}

			return chartjsColor(value);
		};

	helpers$1.getHoverColor = function(colorValue) {
		/* global CanvasPattern */
		return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
			colorValue :
			helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
	};
};

function abstract() {
	throw new Error(
		'This method is not implemented: either no adapter can ' +
		'be found or an incomplete integration was provided.'
	);
}

/**
 * Date adapter (current used by the time scale)
 * @namespace Chart._adapters._date
 * @memberof Chart._adapters
 * @private
 */

/**
 * Currently supported unit string values.
 * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
 * @memberof Chart._adapters._date
 * @name Unit
 */

/**
 * @class
 */
function DateAdapter(options) {
	this.options = options || {};
}

helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
	/**
	 * Returns a map of time formats for the supported formatting units defined
	 * in Unit as well as 'datetime' representing a detailed date/time string.
	 * @returns {{string: string}}
	 */
	formats: abstract,

	/**
	 * Parses the given `value` and return the associated timestamp.
	 * @param {any} value - the value to parse (usually comes from the data)
	 * @param {string} [format] - the expected data format
	 * @returns {(number|null)}
	 * @function
	 */
	parse: abstract,

	/**
	 * Returns the formatted date in the specified `format` for a given `timestamp`.
	 * @param {number} timestamp - the timestamp to format
	 * @param {string} format - the date/time token
	 * @return {string}
	 * @function
	 */
	format: abstract,

	/**
	 * Adds the specified `amount` of `unit` to the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {number} amount - the amount to add
	 * @param {Unit} unit - the unit as string
	 * @return {number}
	 * @function
	 */
	add: abstract,

	/**
	 * Returns the number of `unit` between the given timestamps.
	 * @param {number} max - the input timestamp (reference)
	 * @param {number} min - the timestamp to substract
	 * @param {Unit} unit - the unit as string
	 * @return {number}
	 * @function
	 */
	diff: abstract,

	/**
	 * Returns start of `unit` for the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {Unit} unit - the unit as string
	 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
	 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
	 * @function
	 */
	startOf: abstract,

	/**
	 * Returns end of `unit` for the given `timestamp`.
	 * @param {number} timestamp - the input timestamp
	 * @param {Unit} unit - the unit as string
	 * @function
	 */
	endOf: abstract,

	// DEPRECATIONS

	/**
	 * Provided for backward compatibility for scale.getValueForPixel(),
	 * this method should be overridden only by the moment adapter.
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	_create: function(value) {
		return value;
	}
});

DateAdapter.override = function(members) {
	helpers$1.extend(DateAdapter.prototype, members);
};

var _date = DateAdapter;

var core_adapters = {
	_date: _date
};

/**
 * Namespace to hold static tick generation functions
 * @namespace Chart.Ticks
 */
var core_ticks = {
	/**
	 * Namespace to hold formatters for different types of ticks
	 * @namespace Chart.Ticks.formatters
	 */
	formatters: {
		/**
		 * Formatter for value labels
		 * @method Chart.Ticks.formatters.values
		 * @param value the value to display
		 * @return {string|string[]} the label to display
		 */
		values: function(value) {
			return helpers$1.isArray(value) ? value : '' + value;
		},

		/**
		 * Formatter for linear numeric ticks
		 * @method Chart.Ticks.formatters.linear
		 * @param tickValue {number} the value to be formatted
		 * @param index {number} the position of the tickValue parameter in the ticks array
		 * @param ticks {number[]} the list of ticks being converted
		 * @return {string} string representation of the tickValue parameter
		 */
		linear: function(tickValue, index, ticks) {
			// If we have lots of ticks, don't use the ones
			var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

			// If we have a number like 2.5 as the delta, figure out how many decimal places we need
			if (Math.abs(delta) > 1) {
				if (tickValue !== Math.floor(tickValue)) {
					// not an integer
					delta = tickValue - Math.floor(tickValue);
				}
			}

			var logDelta = helpers$1.log10(Math.abs(delta));
			var tickString = '';

			if (tickValue !== 0) {
				var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
				if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
					var logTick = helpers$1.log10(Math.abs(tickValue));
					var numExponential = Math.floor(logTick) - Math.floor(logDelta);
					numExponential = Math.max(Math.min(numExponential, 20), 0);
					tickString = tickValue.toExponential(numExponential);
				} else {
					var numDecimal = -1 * Math.floor(logDelta);
					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
					tickString = tickValue.toFixed(numDecimal);
				}
			} else {
				tickString = '0'; // never show decimal places for 0
			}

			return tickString;
		},

		logarithmic: function(tickValue, index, ticks) {
			var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));

			if (tickValue === 0) {
				return '0';
			} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
				return tickValue.toExponential();
			}
			return '';
		}
	}
};

var isArray = helpers$1.isArray;
var isNullOrUndef = helpers$1.isNullOrUndef;
var valueOrDefault$a = helpers$1.valueOrDefault;
var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

core_defaults._set('scale', {
	display: true,
	position: 'left',
	offset: false,

	// grid line settings
	gridLines: {
		display: true,
		color: 'rgba(0,0,0,0.1)',
		lineWidth: 1,
		drawBorder: true,
		drawOnChartArea: true,
		drawTicks: true,
		tickMarkLength: 10,
		zeroLineWidth: 1,
		zeroLineColor: 'rgba(0,0,0,0.25)',
		zeroLineBorderDash: [],
		zeroLineBorderDashOffset: 0.0,
		offsetGridLines: false,
		borderDash: [],
		borderDashOffset: 0.0
	},

	// scale label
	scaleLabel: {
		// display property
		display: false,

		// actual label
		labelString: '',

		// top/bottom padding
		padding: {
			top: 4,
			bottom: 4
		}
	},

	// label settings
	ticks: {
		beginAtZero: false,
		minRotation: 0,
		maxRotation: 50,
		mirror: false,
		padding: 0,
		reverse: false,
		display: true,
		autoSkip: true,
		autoSkipPadding: 0,
		labelOffset: 0,
		// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
		callback: core_ticks.formatters.values,
		minor: {},
		major: {}
	}
});

/** Returns a new array containing numItems from arr */
function sample(arr, numItems) {
	var result = [];
	var increment = arr.length / numItems;
	var i = 0;
	var len = arr.length;

	for (; i < len; i += increment) {
		result.push(arr[Math.floor(i)]);
	}
	return result;
}

function getPixelForGridLine(scale, index, offsetGridLines) {
	var length = scale.getTicks().length;
	var validIndex = Math.min(index, length - 1);
	var lineValue = scale.getPixelForTick(validIndex);
	var start = scale._startPixel;
	var end = scale._endPixel;
	var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
	var offset;

	if (offsetGridLines) {
		if (length === 1) {
			offset = Math.max(lineValue - start, end - lineValue);
		} else if (index === 0) {
			offset = (scale.getPixelForTick(1) - lineValue) / 2;
		} else {
			offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
		}
		lineValue += validIndex < index ? offset : -offset;

		// Return undefined if the pixel is out of the range
		if (lineValue < start - epsilon || lineValue > end + epsilon) {
			return;
		}
	}
	return lineValue;
}

function garbageCollect(caches, length) {
	helpers$1.each(caches, function(cache) {
		var gc = cache.gc;
		var gcLen = gc.length / 2;
		var i;
		if (gcLen > length) {
			for (i = 0; i < gcLen; ++i) {
				delete cache.data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
	});
}

/**
 * Returns {width, height, offset} objects for the first, last, widest, highest tick
 * labels where offset indicates the anchor point offset from the top in pixels.
 */
function computeLabelSizes(ctx, tickFonts, ticks, caches) {
	var length = ticks.length;
	var widths = [];
	var heights = [];
	var offsets = [];
	var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;

	for (i = 0; i < length; ++i) {
		label = ticks[i].label;
		tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
		ctx.font = fontString = tickFont.string;
		cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
		lineHeight = tickFont.lineHeight;
		width = height = 0;
		// Undefined labels and arrays should not be measured
		if (!isNullOrUndef(label) && !isArray(label)) {
			width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
			height = lineHeight;
		} else if (isArray(label)) {
			// if it is an array let's measure each element
			for (j = 0, jlen = label.length; j < jlen; ++j) {
				nestedLabel = label[j];
				// Undefined labels and arrays should not be measured
				if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
					width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
					height += lineHeight;
				}
			}
		}
		widths.push(width);
		heights.push(height);
		offsets.push(lineHeight / 2);
	}
	garbageCollect(caches, length);

	widest = widths.indexOf(Math.max.apply(null, widths));
	highest = heights.indexOf(Math.max.apply(null, heights));

	function valueAt(idx) {
		return {
			width: widths[idx] || 0,
			height: heights[idx] || 0,
			offset: offsets[idx] || 0
		};
	}

	return {
		first: valueAt(0),
		last: valueAt(length - 1),
		widest: valueAt(widest),
		highest: valueAt(highest)
	};
}

function getTickMarkLength(options) {
	return options.drawTicks ? options.tickMarkLength : 0;
}

function getScaleLabelHeight(options) {
	var font, padding;

	if (!options.display) {
		return 0;
	}

	font = helpers$1.options._parseFont(options);
	padding = helpers$1.options.toPadding(options.padding);

	return font.lineHeight + padding.height;
}

function parseFontOptions(options, nestedOpts) {
	return helpers$1.extend(helpers$1.options._parseFont({
		fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
		fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
		fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
		lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
	}), {
		color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
	});
}

function parseTickFontOptions(options) {
	var minor = parseFontOptions(options, options.minor);
	var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;

	return {minor: minor, major: major};
}

function nonSkipped(ticksToFilter) {
	var filtered = [];
	var item, index, len;
	for (index = 0, len = ticksToFilter.length; index < len; ++index) {
		item = ticksToFilter[index];
		if (typeof item._index !== 'undefined') {
			filtered.push(item);
		}
	}
	return filtered;
}

function getEvenSpacing(arr) {
	var len = arr.length;
	var i, diff;

	if (len < 2) {
		return false;
	}

	for (diff = arr[0], i = 1; i < len; ++i) {
		if (arr[i] - arr[i - 1] !== diff) {
			return false;
		}
	}
	return diff;
}

function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
	var evenMajorSpacing = getEvenSpacing(majorIndices);
	var spacing = (ticks.length - 1) / ticksLimit;
	var factors, factor, i, ilen;

	// If the major ticks are evenly spaced apart, place the minor ticks
	// so that they divide the major ticks into even chunks
	if (!evenMajorSpacing) {
		return Math.max(spacing, 1);
	}

	factors = helpers$1.math._factorize(evenMajorSpacing);
	for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
		factor = factors[i];
		if (factor > spacing) {
			return factor;
		}
	}
	return Math.max(spacing, 1);
}

function getMajorIndices(ticks) {
	var result = [];
	var i, ilen;
	for (i = 0, ilen = ticks.length; i < ilen; i++) {
		if (ticks[i].major) {
			result.push(i);
		}
	}
	return result;
}

function skipMajors(ticks, majorIndices, spacing) {
	var count = 0;
	var next = majorIndices[0];
	var i, tick;

	spacing = Math.ceil(spacing);
	for (i = 0; i < ticks.length; i++) {
		tick = ticks[i];
		if (i === next) {
			tick._index = i;
			count++;
			next = majorIndices[count * spacing];
		} else {
			delete tick.label;
		}
	}
}

function skip(ticks, spacing, majorStart, majorEnd) {
	var start = valueOrDefault$a(majorStart, 0);
	var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
	var count = 0;
	var length, i, tick, next;

	spacing = Math.ceil(spacing);
	if (majorEnd) {
		length = majorEnd - majorStart;
		spacing = length / Math.floor(length / spacing);
	}

	next = start;

	while (next < 0) {
		count++;
		next = Math.round(start + count * spacing);
	}

	for (i = Math.max(start, 0); i < end; i++) {
		tick = ticks[i];
		if (i === next) {
			tick._index = i;
			count++;
			next = Math.round(start + count * spacing);
		} else {
			delete tick.label;
		}
	}
}

var Scale = core_element.extend({

	zeroLineIndex: 0,

	/**
	 * Get the padding needed for the scale
	 * @method getPadding
	 * @private
	 * @returns {Padding} the necessary padding
	 */
	getPadding: function() {
		var me = this;
		return {
			left: me.paddingLeft || 0,
			top: me.paddingTop || 0,
			right: me.paddingRight || 0,
			bottom: me.paddingBottom || 0
		};
	},

	/**
	 * Returns the scale tick objects ({label, major})
	 * @since 2.7
	 */
	getTicks: function() {
		return this._ticks;
	},

	/**
	* @private
	*/
	_getLabels: function() {
		var data = this.chart.data;
		return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
	},

	// These methods are ordered by lifecyle. Utilities then follow.
	// Any function defined here is inherited by all scale types.
	// Any function can be extended by the scale type

	/**
	 * Provided for backward compatibility, not available anymore
	 * @function Chart.Scale.mergeTicksOptions
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 */
	mergeTicksOptions: function() {
		// noop
	},

	beforeUpdate: function() {
		helpers$1.callback(this.options.beforeUpdate, [this]);
	},

	/**
	 * @param {number} maxWidth - the max width in pixels
	 * @param {number} maxHeight - the max height in pixels
	 * @param {object} margins - the space between the edge of the other scales and edge of the chart
	 *   This space comes from two sources:
	 *     - padding - space that's required to show the labels at the edges of the scale
	 *     - thickness of scales or legends in another orientation
	 */
	update: function(maxWidth, maxHeight, margins) {
		var me = this;
		var tickOpts = me.options.ticks;
		var sampleSize = tickOpts.sampleSize;
		var i, ilen, labels, ticks, samplingEnabled;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = helpers$1.extend({
			left: 0,
			right: 0,
			top: 0,
			bottom: 0
		}, margins);

		me._ticks = null;
		me.ticks = null;
		me._labelSizes = null;
		me._maxLabelLines = 0;
		me.longestLabelWidth = 0;
		me.longestTextCache = me.longestTextCache || {};
		me._gridLineItems = null;
		me._labelItems = null;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();

		// Data min/max
		me.beforeDataLimits();
		me.determineDataLimits();
		me.afterDataLimits();

		// Ticks - `this.ticks` is now DEPRECATED!
		// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
		// and must not be accessed directly from outside this class. `this.ticks` being
		// around for long time and not marked as private, we can't change its structure
		// without unexpected breaking changes. If you need to access the scale ticks,
		// use scale.getTicks() instead.

		me.beforeBuildTicks();

		// New implementations should return an array of objects but for BACKWARD COMPAT,
		// we still support no return (`this.ticks` internally set by calling this method).
		ticks = me.buildTicks() || [];

		// Allow modification of ticks in callback.
		ticks = me.afterBuildTicks(ticks) || ticks;

		// Ensure ticks contains ticks in new tick format
		if ((!ticks || !ticks.length) && me.ticks) {
			ticks = [];
			for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
				ticks.push({
					value: me.ticks[i],
					major: false
				});
			}
		}

		me._ticks = ticks;

		// Compute tick rotation and fit using a sampled subset of labels
		// We generally don't need to compute the size of every single label for determining scale size
		samplingEnabled = sampleSize < ticks.length;
		labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);

		// _configure is called twice, once here, once from core.controller.updateLayout.
		// Here we haven't been positioned yet, but dimensions are correct.
		// Variables set in _configure are needed for calculateTickRotation, and
		// it's ok that coordinates are not correct there, only dimensions matter.
		me._configure();

		// Tick Rotation
		me.beforeCalculateTickRotation();
		me.calculateTickRotation();
		me.afterCalculateTickRotation();

		me.beforeFit();
		me.fit();
		me.afterFit();

		// Auto-skip
		me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;

		if (samplingEnabled) {
			// Generate labels using all non-skipped ticks
			labels = me._convertTicksToLabels(me._ticksToDraw);
		}

		me.ticks = labels;   // BACKWARD COMPATIBILITY

		// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!

		me.afterUpdate();

		// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
		// make maxWidth and maxHeight private
		return me.minSize;
	},

	/**
	 * @private
	 */
	_configure: function() {
		var me = this;
		var reversePixels = me.options.ticks.reverse;
		var startPixel, endPixel;

		if (me.isHorizontal()) {
			startPixel = me.left;
			endPixel = me.right;
		} else {
			startPixel = me.top;
			endPixel = me.bottom;
			// by default vertical scales are from bottom to top, so pixels are reversed
			reversePixels = !reversePixels;
		}
		me._startPixel = startPixel;
		me._endPixel = endPixel;
		me._reversePixels = reversePixels;
		me._length = endPixel - startPixel;
	},

	afterUpdate: function() {
		helpers$1.callback(this.options.afterUpdate, [this]);
	},

	//

	beforeSetDimensions: function() {
		helpers$1.callback(this.options.beforeSetDimensions, [this]);
	},
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;
	},
	afterSetDimensions: function() {
		helpers$1.callback(this.options.afterSetDimensions, [this]);
	},

	// Data limits
	beforeDataLimits: function() {
		helpers$1.callback(this.options.beforeDataLimits, [this]);
	},
	determineDataLimits: helpers$1.noop,
	afterDataLimits: function() {
		helpers$1.callback(this.options.afterDataLimits, [this]);
	},

	//
	beforeBuildTicks: function() {
		helpers$1.callback(this.options.beforeBuildTicks, [this]);
	},
	buildTicks: helpers$1.noop,
	afterBuildTicks: function(ticks) {
		var me = this;
		// ticks is empty for old axis implementations here
		if (isArray(ticks) && ticks.length) {
			return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
		}
		// Support old implementations (that modified `this.ticks` directly in buildTicks)
		me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
		return ticks;
	},

	beforeTickToLabelConversion: function() {
		helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
	},
	convertTicksToLabels: function() {
		var me = this;
		// Convert ticks to strings
		var tickOpts = me.options.ticks;
		me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
	},
	afterTickToLabelConversion: function() {
		helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
	},

	//

	beforeCalculateTickRotation: function() {
		helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
	},
	calculateTickRotation: function() {
		var me = this;
		var options = me.options;
		var tickOpts = options.ticks;
		var numTicks = me.getTicks().length;
		var minRotation = tickOpts.minRotation || 0;
		var maxRotation = tickOpts.maxRotation;
		var labelRotation = minRotation;
		var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;

		if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
			me.labelRotation = minRotation;
			return;
		}

		labelSizes = me._getLabelSizes();
		maxLabelWidth = labelSizes.widest.width;
		maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;

		// Estimate the width of each grid based on the canvas width, the maximum
		// label width and the number of tick intervals
		maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
		tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);

		// Allow 3 pixels x2 padding either side for label readability
		if (maxLabelWidth + 6 > tickWidth) {
			tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
			maxHeight = me.maxHeight - getTickMarkLength(options.gridLines)
				- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
			maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
			labelRotation = helpers$1.toDegrees(Math.min(
				Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
				Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
			));
			labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
		}

		me.labelRotation = labelRotation;
	},
	afterCalculateTickRotation: function() {
		helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
	},

	//

	beforeFit: function() {
		helpers$1.callback(this.options.beforeFit, [this]);
	},
	fit: function() {
		var me = this;
		// Reset
		var minSize = me.minSize = {
			width: 0,
			height: 0
		};

		var chart = me.chart;
		var opts = me.options;
		var tickOpts = opts.ticks;
		var scaleLabelOpts = opts.scaleLabel;
		var gridLineOpts = opts.gridLines;
		var display = me._isVisible();
		var isBottom = opts.position === 'bottom';
		var isHorizontal = me.isHorizontal();

		// Width
		if (isHorizontal) {
			minSize.width = me.maxWidth;
		} else if (display) {
			minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
		}

		// height
		if (!isHorizontal) {
			minSize.height = me.maxHeight; // fill all the height
		} else if (display) {
			minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
		}

		// Don't bother fitting the ticks if we are not showing the labels
		if (tickOpts.display && display) {
			var tickFonts = parseTickFontOptions(tickOpts);
			var labelSizes = me._getLabelSizes();
			var firstLabelSize = labelSizes.first;
			var lastLabelSize = labelSizes.last;
			var widestLabelSize = labelSizes.widest;
			var highestLabelSize = labelSizes.highest;
			var lineSpace = tickFonts.minor.lineHeight * 0.4;
			var tickPadding = tickOpts.padding;

			if (isHorizontal) {
				// A horizontal axis is more constrained by the height.
				var isRotated = me.labelRotation !== 0;
				var angleRadians = helpers$1.toRadians(me.labelRotation);
				var cosRotation = Math.cos(angleRadians);
				var sinRotation = Math.sin(angleRadians);

				var labelHeight = sinRotation * widestLabelSize.width
					+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))
					+ (isRotated ? 0 : lineSpace); // padding

				minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);

				var offsetLeft = me.getPixelForTick(0) - me.left;
				var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
				var paddingLeft, paddingRight;

				// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
				// which means that the right padding is dominated by the font height
				if (isRotated) {
					paddingLeft = isBottom ?
						cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :
						sinRotation * (firstLabelSize.height - firstLabelSize.offset);
					paddingRight = isBottom ?
						sinRotation * (lastLabelSize.height - lastLabelSize.offset) :
						cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
				} else {
					paddingLeft = firstLabelSize.width / 2;
					paddingRight = lastLabelSize.width / 2;
				}

				// Adjust padding taking into account changes in offsets
				// and add 3 px to move away from canvas edges
				me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
				me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
			} else {
				// A vertical axis is more constrained by the width. Labels are the
				// dominant factor here, so get that length first and account for padding
				var labelWidth = tickOpts.mirror ? 0 :
					// use lineSpace for consistency with horizontal axis
					// tickPadding is not implemented for horizontal
					widestLabelSize.width + tickPadding + lineSpace;

				minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);

				me.paddingTop = firstLabelSize.height / 2;
				me.paddingBottom = lastLabelSize.height / 2;
			}
		}

		me.handleMargins();

		if (isHorizontal) {
			me.width = me._length = chart.width - me.margins.left - me.margins.right;
			me.height = minSize.height;
		} else {
			me.width = minSize.width;
			me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
		}
	},

	/**
	 * Handle margins and padding interactions
	 * @private
	 */
	handleMargins: function() {
		var me = this;
		if (me.margins) {
			me.margins.left = Math.max(me.paddingLeft, me.margins.left);
			me.margins.top = Math.max(me.paddingTop, me.margins.top);
			me.margins.right = Math.max(me.paddingRight, me.margins.right);
			me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
		}
	},

	afterFit: function() {
		helpers$1.callback(this.options.afterFit, [this]);
	},

	// Shared Methods
	isHorizontal: function() {
		var pos = this.options.position;
		return pos === 'top' || pos === 'bottom';
	},
	isFullWidth: function() {
		return this.options.fullWidth;
	},

	// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
	getRightValue: function(rawValue) {
		// Null and undefined values first
		if (isNullOrUndef(rawValue)) {
			return NaN;
		}
		// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
		if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
			return NaN;
		}

		// If it is in fact an object, dive in one more level
		if (rawValue) {
			if (this.isHorizontal()) {
				if (rawValue.x !== undefined) {
					return this.getRightValue(rawValue.x);
				}
			} else if (rawValue.y !== undefined) {
				return this.getRightValue(rawValue.y);
			}
		}

		// Value is good, return it
		return rawValue;
	},

	_convertTicksToLabels: function(ticks) {
		var me = this;
		var labels, i, ilen;

		me.ticks = ticks.map(function(tick) {
			return tick.value;
		});

		me.beforeTickToLabelConversion();

		// New implementations should return the formatted tick labels but for BACKWARD
		// COMPAT, we still support no return (`this.ticks` internally changed by calling
		// this method and supposed to contain only string values).
		labels = me.convertTicksToLabels(ticks) || me.ticks;

		me.afterTickToLabelConversion();

		// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			ticks[i].label = labels[i];
		}

		return labels;
	},

	/**
	 * @private
	 */
	_getLabelSizes: function() {
		var me = this;
		var labelSizes = me._labelSizes;

		if (!labelSizes) {
			me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
			me.longestLabelWidth = labelSizes.widest.width;
		}

		return labelSizes;
	},

	/**
	 * @private
	 */
	_parseValue: function(value) {
		var start, end, min, max;

		if (isArray(value)) {
			start = +this.getRightValue(value[0]);
			end = +this.getRightValue(value[1]);
			min = Math.min(start, end);
			max = Math.max(start, end);
		} else {
			value = +this.getRightValue(value);
			start = undefined;
			end = value;
			min = value;
			max = value;
		}

		return {
			min: min,
			max: max,
			start: start,
			end: end
		};
	},

	/**
	* @private
	*/
	_getScaleLabel: function(rawValue) {
		var v = this._parseValue(rawValue);
		if (v.start !== undefined) {
			return '[' + v.start + ', ' + v.end + ']';
		}

		return +this.getRightValue(rawValue);
	},

	/**
	 * Used to get the value to display in the tooltip for the data at the given index
	 * @param index
	 * @param datasetIndex
	 */
	getLabelForIndex: helpers$1.noop,

	/**
	 * Returns the location of the given data point. Value can either be an index or a numerical value
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 * @param value
	 * @param index
	 * @param datasetIndex
	 */
	getPixelForValue: helpers$1.noop,

	/**
	 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 * @param pixel
	 */
	getValueForPixel: helpers$1.noop,

	/**
	 * Returns the location of the tick at the given index
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getPixelForTick: function(index) {
		var me = this;
		var offset = me.options.offset;
		var numTicks = me._ticks.length;
		var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);

		return index < 0 || index > numTicks - 1
			? null
			: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
	},

	/**
	 * Utility for getting the pixel location of a percentage of scale
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getPixelForDecimal: function(decimal) {
		var me = this;

		if (me._reversePixels) {
			decimal = 1 - decimal;
		}

		return me._startPixel + decimal * me._length;
	},

	getDecimalForPixel: function(pixel) {
		var decimal = (pixel - this._startPixel) / this._length;
		return this._reversePixels ? 1 - decimal : decimal;
	},

	/**
	 * Returns the pixel for the minimum chart value
	 * The coordinate (0, 0) is at the upper-left corner of the canvas
	 */
	getBasePixel: function() {
		return this.getPixelForValue(this.getBaseValue());
	},

	getBaseValue: function() {
		var me = this;
		var min = me.min;
		var max = me.max;

		return me.beginAtZero ? 0 :
			min < 0 && max < 0 ? max :
			min > 0 && max > 0 ? min :
			0;
	},

	/**
	 * Returns a subset of ticks to be plotted to avoid overlapping labels.
	 * @private
	 */
	_autoSkip: function(ticks) {
		var me = this;
		var tickOpts = me.options.ticks;
		var axisLength = me._length;
		var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
		var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
		var numMajorIndices = majorIndices.length;
		var first = majorIndices[0];
		var last = majorIndices[numMajorIndices - 1];
		var i, ilen, spacing, avgMajorSpacing;

		// If there are too many major ticks to display them all
		if (numMajorIndices > ticksLimit) {
			skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
			return nonSkipped(ticks);
		}

		spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);

		if (numMajorIndices > 0) {
			for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
				skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
			}
			avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
			skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
			skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
			return nonSkipped(ticks);
		}
		skip(ticks, spacing);
		return nonSkipped(ticks);
	},

	/**
	 * @private
	 */
	_tickSize: function() {
		var me = this;
		var optionTicks = me.options.ticks;

		// Calculate space needed by label in axis direction.
		var rot = helpers$1.toRadians(me.labelRotation);
		var cos = Math.abs(Math.cos(rot));
		var sin = Math.abs(Math.sin(rot));

		var labelSizes = me._getLabelSizes();
		var padding = optionTicks.autoSkipPadding || 0;
		var w = labelSizes ? labelSizes.widest.width + padding : 0;
		var h = labelSizes ? labelSizes.highest.height + padding : 0;

		// Calculate space needed for 1 tick in axis direction.
		return me.isHorizontal()
			? h * cos > w * sin ? w / cos : h / sin
			: h * sin < w * cos ? h / cos : w / sin;
	},

	/**
	 * @private
	 */
	_isVisible: function() {
		var me = this;
		var chart = me.chart;
		var display = me.options.display;
		var i, ilen, meta;

		if (display !== 'auto') {
			return !!display;
		}

		// When 'auto', the scale is visible if at least one associated dataset is visible.
		for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
			if (chart.isDatasetVisible(i)) {
				meta = chart.getDatasetMeta(i);
				if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
					return true;
				}
			}
		}

		return false;
	},

	/**
	 * @private
	 */
	_computeGridLineItems: function(chartArea) {
		var me = this;
		var chart = me.chart;
		var options = me.options;
		var gridLines = options.gridLines;
		var position = options.position;
		var offsetGridLines = gridLines.offsetGridLines;
		var isHorizontal = me.isHorizontal();
		var ticks = me._ticksToDraw;
		var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);

		var tl = getTickMarkLength(gridLines);
		var items = [];
		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
		var axisHalfWidth = axisWidth / 2;
		var alignPixel = helpers$1._alignPixel;
		var alignBorderValue = function(pixel) {
			return alignPixel(chart, pixel, axisWidth);
		};
		var borderValue, i, tick, lineValue, alignedLineValue;
		var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;

		if (position === 'top') {
			borderValue = alignBorderValue(me.bottom);
			ty1 = me.bottom - tl;
			ty2 = borderValue - axisHalfWidth;
			y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
			y2 = chartArea.bottom;
		} else if (position === 'bottom') {
			borderValue = alignBorderValue(me.top);
			y1 = chartArea.top;
			y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
			ty1 = borderValue + axisHalfWidth;
			ty2 = me.top + tl;
		} else if (position === 'left') {
			borderValue = alignBorderValue(me.right);
			tx1 = me.right - tl;
			tx2 = borderValue - axisHalfWidth;
			x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
			x2 = chartArea.right;
		} else {
			borderValue = alignBorderValue(me.left);
			x1 = chartArea.left;
			x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
			tx1 = borderValue + axisHalfWidth;
			tx2 = me.left + tl;
		}

		for (i = 0; i < ticksLength; ++i) {
			tick = ticks[i] || {};

			// autoskipper skipped this tick (#4635)
			if (isNullOrUndef(tick.label) && i < ticks.length) {
				continue;
			}

			if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
				// Draw the first index specially
				lineWidth = gridLines.zeroLineWidth;
				lineColor = gridLines.zeroLineColor;
				borderDash = gridLines.zeroLineBorderDash || [];
				borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
			} else {
				lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
				lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
				borderDash = gridLines.borderDash || [];
				borderDashOffset = gridLines.borderDashOffset || 0.0;
			}

			lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);

			// Skip if the pixel is out of the range
			if (lineValue === undefined) {
				continue;
			}

			alignedLineValue = alignPixel(chart, lineValue, lineWidth);

			if (isHorizontal) {
				tx1 = tx2 = x1 = x2 = alignedLineValue;
			} else {
				ty1 = ty2 = y1 = y2 = alignedLineValue;
			}

			items.push({
				tx1: tx1,
				ty1: ty1,
				tx2: tx2,
				ty2: ty2,
				x1: x1,
				y1: y1,
				x2: x2,
				y2: y2,
				width: lineWidth,
				color: lineColor,
				borderDash: borderDash,
				borderDashOffset: borderDashOffset,
			});
		}

		items.ticksLength = ticksLength;
		items.borderValue = borderValue;

		return items;
	},

	/**
	 * @private
	 */
	_computeLabelItems: function() {
		var me = this;
		var options = me.options;
		var optionTicks = options.ticks;
		var position = options.position;
		var isMirrored = optionTicks.mirror;
		var isHorizontal = me.isHorizontal();
		var ticks = me._ticksToDraw;
		var fonts = parseTickFontOptions(optionTicks);
		var tickPadding = optionTicks.padding;
		var tl = getTickMarkLength(options.gridLines);
		var rotation = -helpers$1.toRadians(me.labelRotation);
		var items = [];
		var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;

		if (position === 'top') {
			y = me.bottom - tl - tickPadding;
			textAlign = !rotation ? 'center' : 'left';
		} else if (position === 'bottom') {
			y = me.top + tl + tickPadding;
			textAlign = !rotation ? 'center' : 'right';
		} else if (position === 'left') {
			x = me.right - (isMirrored ? 0 : tl) - tickPadding;
			textAlign = isMirrored ? 'left' : 'right';
		} else {
			x = me.left + (isMirrored ? 0 : tl) + tickPadding;
			textAlign = isMirrored ? 'right' : 'left';
		}

		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			tick = ticks[i];
			label = tick.label;

			// autoskipper skipped this tick (#4635)
			if (isNullOrUndef(label)) {
				continue;
			}

			pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
			font = tick.major ? fonts.major : fonts.minor;
			lineHeight = font.lineHeight;
			lineCount = isArray(label) ? label.length : 1;

			if (isHorizontal) {
				x = pixel;
				textOffset = position === 'top'
					? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight
					: (!rotation ? 0.5 : 0) * lineHeight;
			} else {
				y = pixel;
				textOffset = (1 - lineCount) * lineHeight / 2;
			}

			items.push({
				x: x,
				y: y,
				rotation: rotation,
				label: label,
				font: font,
				textOffset: textOffset,
				textAlign: textAlign
			});
		}

		return items;
	},

	/**
	 * @private
	 */
	_drawGrid: function(chartArea) {
		var me = this;
		var gridLines = me.options.gridLines;

		if (!gridLines.display) {
			return;
		}

		var ctx = me.ctx;
		var chart = me.chart;
		var alignPixel = helpers$1._alignPixel;
		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
		var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
		var width, color, i, ilen, item;

		for (i = 0, ilen = items.length; i < ilen; ++i) {
			item = items[i];
			width = item.width;
			color = item.color;

			if (width && color) {
				ctx.save();
				ctx.lineWidth = width;
				ctx.strokeStyle = color;
				if (ctx.setLineDash) {
					ctx.setLineDash(item.borderDash);
					ctx.lineDashOffset = item.borderDashOffset;
				}

				ctx.beginPath();

				if (gridLines.drawTicks) {
					ctx.moveTo(item.tx1, item.ty1);
					ctx.lineTo(item.tx2, item.ty2);
				}

				if (gridLines.drawOnChartArea) {
					ctx.moveTo(item.x1, item.y1);
					ctx.lineTo(item.x2, item.y2);
				}

				ctx.stroke();
				ctx.restore();
			}
		}

		if (axisWidth) {
			// Draw the line at the edge of the axis
			var firstLineWidth = axisWidth;
			var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
			var borderValue = items.borderValue;
			var x1, x2, y1, y2;

			if (me.isHorizontal()) {
				x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
				x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
				y1 = y2 = borderValue;
			} else {
				y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
				y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
				x1 = x2 = borderValue;
			}

			ctx.lineWidth = axisWidth;
			ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
			ctx.beginPath();
			ctx.moveTo(x1, y1);
			ctx.lineTo(x2, y2);
			ctx.stroke();
		}
	},

	/**
	 * @private
	 */
	_drawLabels: function() {
		var me = this;
		var optionTicks = me.options.ticks;

		if (!optionTicks.display) {
			return;
		}

		var ctx = me.ctx;
		var items = me._labelItems || (me._labelItems = me._computeLabelItems());
		var i, j, ilen, jlen, item, tickFont, label, y;

		for (i = 0, ilen = items.length; i < ilen; ++i) {
			item = items[i];
			tickFont = item.font;

			// Make sure we draw text in the correct color and font
			ctx.save();
			ctx.translate(item.x, item.y);
			ctx.rotate(item.rotation);
			ctx.font = tickFont.string;
			ctx.fillStyle = tickFont.color;
			ctx.textBaseline = 'middle';
			ctx.textAlign = item.textAlign;

			label = item.label;
			y = item.textOffset;
			if (isArray(label)) {
				for (j = 0, jlen = label.length; j < jlen; ++j) {
					// We just make sure the multiline element is a string here..
					ctx.fillText('' + label[j], 0, y);
					y += tickFont.lineHeight;
				}
			} else {
				ctx.fillText(label, 0, y);
			}
			ctx.restore();
		}
	},

	/**
	 * @private
	 */
	_drawTitle: function() {
		var me = this;
		var ctx = me.ctx;
		var options = me.options;
		var scaleLabel = options.scaleLabel;

		if (!scaleLabel.display) {
			return;
		}

		var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
		var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
		var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
		var halfLineHeight = scaleLabelFont.lineHeight / 2;
		var position = options.position;
		var rotation = 0;
		var scaleLabelX, scaleLabelY;

		if (me.isHorizontal()) {
			scaleLabelX = me.left + me.width / 2; // midpoint of the width
			scaleLabelY = position === 'bottom'
				? me.bottom - halfLineHeight - scaleLabelPadding.bottom
				: me.top + halfLineHeight + scaleLabelPadding.top;
		} else {
			var isLeft = position === 'left';
			scaleLabelX = isLeft
				? me.left + halfLineHeight + scaleLabelPadding.top
				: me.right - halfLineHeight - scaleLabelPadding.top;
			scaleLabelY = me.top + me.height / 2;
			rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
		}

		ctx.save();
		ctx.translate(scaleLabelX, scaleLabelY);
		ctx.rotate(rotation);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';
		ctx.fillStyle = scaleLabelFontColor; // render in correct colour
		ctx.font = scaleLabelFont.string;
		ctx.fillText(scaleLabel.labelString, 0, 0);
		ctx.restore();
	},

	draw: function(chartArea) {
		var me = this;

		if (!me._isVisible()) {
			return;
		}

		me._drawGrid(chartArea);
		me._drawTitle();
		me._drawLabels();
	},

	/**
	 * @private
	 */
	_layers: function() {
		var me = this;
		var opts = me.options;
		var tz = opts.ticks && opts.ticks.z || 0;
		var gz = opts.gridLines && opts.gridLines.z || 0;

		if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
			// backward compatibility: draw has been overridden by custom scale
			return [{
				z: tz,
				draw: function() {
					me.draw.apply(me, arguments);
				}
			}];
		}

		return [{
			z: gz,
			draw: function() {
				me._drawGrid.apply(me, arguments);
				me._drawTitle.apply(me, arguments);
			}
		}, {
			z: tz,
			draw: function() {
				me._drawLabels.apply(me, arguments);
			}
		}];
	},

	/**
	 * @private
	 */
	_getMatchingVisibleMetas: function(type) {
		var me = this;
		var isHorizontal = me.isHorizontal();
		return me.chart._getSortedVisibleDatasetMetas()
			.filter(function(meta) {
				return (!type || meta.type === type)
					&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
			});
	}
});

Scale.prototype._draw = Scale.prototype.draw;

var core_scale = Scale;

var isNullOrUndef$1 = helpers$1.isNullOrUndef;

var defaultConfig = {
	position: 'bottom'
};

var scale_category = core_scale.extend({
	determineDataLimits: function() {
		var me = this;
		var labels = me._getLabels();
		var ticksOpts = me.options.ticks;
		var min = ticksOpts.min;
		var max = ticksOpts.max;
		var minIndex = 0;
		var maxIndex = labels.length - 1;
		var findIndex;

		if (min !== undefined) {
			// user specified min value
			findIndex = labels.indexOf(min);
			if (findIndex >= 0) {
				minIndex = findIndex;
			}
		}

		if (max !== undefined) {
			// user specified max value
			findIndex = labels.indexOf(max);
			if (findIndex >= 0) {
				maxIndex = findIndex;
			}
		}

		me.minIndex = minIndex;
		me.maxIndex = maxIndex;
		me.min = labels[minIndex];
		me.max = labels[maxIndex];
	},

	buildTicks: function() {
		var me = this;
		var labels = me._getLabels();
		var minIndex = me.minIndex;
		var maxIndex = me.maxIndex;

		// If we are viewing some subset of labels, slice the original array
		me.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);
	},

	getLabelForIndex: function(index, datasetIndex) {
		var me = this;
		var chart = me.chart;

		if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
			return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
		}

		return me._getLabels()[index];
	},

	_configure: function() {
		var me = this;
		var offset = me.options.offset;
		var ticks = me.ticks;

		core_scale.prototype._configure.call(me);

		if (!me.isHorizontal()) {
			// For backward compatibility, vertical category scale reverse is inverted.
			me._reversePixels = !me._reversePixels;
		}

		if (!ticks) {
			return;
		}

		me._startValue = me.minIndex - (offset ? 0.5 : 0);
		me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
	},

	// Used to get data value locations.  Value can either be an index or a numerical value
	getPixelForValue: function(value, index, datasetIndex) {
		var me = this;
		var valueCategory, labels, idx;

		if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
			value = me.chart.data.datasets[datasetIndex].data[index];
		}

		// If value is a data object, then index is the index in the data array,
		// not the index of the scale. We need to change that.
		if (!isNullOrUndef$1(value)) {
			valueCategory = me.isHorizontal() ? value.x : value.y;
		}
		if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
			labels = me._getLabels();
			value = helpers$1.valueOrDefault(valueCategory, value);
			idx = labels.indexOf(value);
			index = idx !== -1 ? idx : index;
			if (isNaN(index)) {
				index = value;
			}
		}
		return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
	},

	getPixelForTick: function(index) {
		var ticks = this.ticks;
		return index < 0 || index > ticks.length - 1
			? null
			: this.getPixelForValue(ticks[index], index + this.minIndex);
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
		return Math.min(Math.max(value, 0), me.ticks.length - 1);
	},

	getBasePixel: function() {
		return this.bottom;
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults = defaultConfig;
scale_category._defaults = _defaults;

var noop = helpers$1.noop;
var isNullOrUndef$2 = helpers$1.isNullOrUndef;

/**
 * Generate a set of linear ticks
 * @param generationOptions the options used to generate the ticks
 * @param dataRange the range of the data
 * @returns {number[]} array of tick values
 */
function generateTicks(generationOptions, dataRange) {
	var ticks = [];
	// To get a "nice" value for the tick spacing, we will use the appropriately named
	// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
	// for details.

	var MIN_SPACING = 1e-14;
	var stepSize = generationOptions.stepSize;
	var unit = stepSize || 1;
	var maxNumSpaces = generationOptions.maxTicks - 1;
	var min = generationOptions.min;
	var max = generationOptions.max;
	var precision = generationOptions.precision;
	var rmin = dataRange.min;
	var rmax = dataRange.max;
	var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
	var factor, niceMin, niceMax, numSpaces;

	// Beyond MIN_SPACING floating point numbers being to lose precision
	// such that we can't do the math necessary to generate ticks
	if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
		return [rmin, rmax];
	}

	numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
	if (numSpaces > maxNumSpaces) {
		// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
		spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
	}

	if (stepSize || isNullOrUndef$2(precision)) {
		// If a precision is not specified, calculate factor based on spacing
		factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
	} else {
		// If the user specified a precision, round to that number of decimal places
		factor = Math.pow(10, precision);
		spacing = Math.ceil(spacing * factor) / factor;
	}

	niceMin = Math.floor(rmin / spacing) * spacing;
	niceMax = Math.ceil(rmax / spacing) * spacing;

	// If min, max and stepSize is set and they make an evenly spaced scale use it.
	if (stepSize) {
		// If very close to our whole number, use it.
		if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
			niceMin = min;
		}
		if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
			niceMax = max;
		}
	}

	numSpaces = (niceMax - niceMin) / spacing;
	// If very close to our rounded value, use it.
	if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
		numSpaces = Math.round(numSpaces);
	} else {
		numSpaces = Math.ceil(numSpaces);
	}

	niceMin = Math.round(niceMin * factor) / factor;
	niceMax = Math.round(niceMax * factor) / factor;
	ticks.push(isNullOrUndef$2(min) ? niceMin : min);
	for (var j = 1; j < numSpaces; ++j) {
		ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
	}
	ticks.push(isNullOrUndef$2(max) ? niceMax : max);

	return ticks;
}

var scale_linearbase = core_scale.extend({
	getRightValue: function(value) {
		if (typeof value === 'string') {
			return +value;
		}
		return core_scale.prototype.getRightValue.call(this, value);
	},

	handleTickRangeOptions: function() {
		var me = this;
		var opts = me.options;
		var tickOpts = opts.ticks;

		// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
		// do nothing since that would make the chart weird. If the user really wants a weird chart
		// axis, they can manually override it
		if (tickOpts.beginAtZero) {
			var minSign = helpers$1.sign(me.min);
			var maxSign = helpers$1.sign(me.max);

			if (minSign < 0 && maxSign < 0) {
				// move the top up to 0
				me.max = 0;
			} else if (minSign > 0 && maxSign > 0) {
				// move the bottom down to 0
				me.min = 0;
			}
		}

		var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
		var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

		if (tickOpts.min !== undefined) {
			me.min = tickOpts.min;
		} else if (tickOpts.suggestedMin !== undefined) {
			if (me.min === null) {
				me.min = tickOpts.suggestedMin;
			} else {
				me.min = Math.min(me.min, tickOpts.suggestedMin);
			}
		}

		if (tickOpts.max !== undefined) {
			me.max = tickOpts.max;
		} else if (tickOpts.suggestedMax !== undefined) {
			if (me.max === null) {
				me.max = tickOpts.suggestedMax;
			} else {
				me.max = Math.max(me.max, tickOpts.suggestedMax);
			}
		}

		if (setMin !== setMax) {
			// We set the min or the max but not both.
			// So ensure that our range is good
			// Inverted or 0 length range can happen when
			// ticks.min is set, and no datasets are visible
			if (me.min >= me.max) {
				if (setMin) {
					me.max = me.min + 1;
				} else {
					me.min = me.max - 1;
				}
			}
		}

		if (me.min === me.max) {
			me.max++;

			if (!tickOpts.beginAtZero) {
				me.min--;
			}
		}
	},

	getTickLimit: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var stepSize = tickOpts.stepSize;
		var maxTicksLimit = tickOpts.maxTicksLimit;
		var maxTicks;

		if (stepSize) {
			maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
		} else {
			maxTicks = me._computeTickLimit();
			maxTicksLimit = maxTicksLimit || 11;
		}

		if (maxTicksLimit) {
			maxTicks = Math.min(maxTicksLimit, maxTicks);
		}

		return maxTicks;
	},

	_computeTickLimit: function() {
		return Number.POSITIVE_INFINITY;
	},

	handleDirectionalChanges: noop,

	buildTicks: function() {
		var me = this;
		var opts = me.options;
		var tickOpts = opts.ticks;

		// Figure out what the max number of ticks we can support it is based on the size of
		// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
		// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
		// the graph. Make sure we always have at least 2 ticks
		var maxTicks = me.getTickLimit();
		maxTicks = Math.max(2, maxTicks);

		var numericGeneratorOptions = {
			maxTicks: maxTicks,
			min: tickOpts.min,
			max: tickOpts.max,
			precision: tickOpts.precision,
			stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
		};
		var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);

		me.handleDirectionalChanges();

		// At this point, we need to update our max and min given the tick values since we have expanded the
		// range of the scale
		me.max = helpers$1.max(ticks);
		me.min = helpers$1.min(ticks);

		if (tickOpts.reverse) {
			ticks.reverse();

			me.start = me.max;
			me.end = me.min;
		} else {
			me.start = me.min;
			me.end = me.max;
		}
	},

	convertTicksToLabels: function() {
		var me = this;
		me.ticksAsNumbers = me.ticks.slice();
		me.zeroLineIndex = me.ticks.indexOf(0);

		core_scale.prototype.convertTicksToLabels.call(me);
	},

	_configure: function() {
		var me = this;
		var ticks = me.getTicks();
		var start = me.min;
		var end = me.max;
		var offset;

		core_scale.prototype._configure.call(me);

		if (me.options.offset && ticks.length) {
			offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
			start -= offset;
			end += offset;
		}
		me._startValue = start;
		me._endValue = end;
		me._valueRange = end - start;
	}
});

var defaultConfig$1 = {
	position: 'left',
	ticks: {
		callback: core_ticks.formatters.linear
	}
};

var DEFAULT_MIN = 0;
var DEFAULT_MAX = 1;

function getOrCreateStack(stacks, stacked, meta) {
	var key = [
		meta.type,
		// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
		stacked === undefined && meta.stack === undefined ? meta.index : '',
		meta.stack
	].join('.');

	if (stacks[key] === undefined) {
		stacks[key] = {
			pos: [],
			neg: []
		};
	}

	return stacks[key];
}

function stackData(scale, stacks, meta, data) {
	var opts = scale.options;
	var stacked = opts.stacked;
	var stack = getOrCreateStack(stacks, stacked, meta);
	var pos = stack.pos;
	var neg = stack.neg;
	var ilen = data.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = scale._parseValue(data[i]);
		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
			continue;
		}

		pos[i] = pos[i] || 0;
		neg[i] = neg[i] || 0;

		if (opts.relativePoints) {
			pos[i] = 100;
		} else if (value.min < 0 || value.max < 0) {
			neg[i] += value.min;
		} else {
			pos[i] += value.max;
		}
	}
}

function updateMinMax(scale, meta, data) {
	var ilen = data.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = scale._parseValue(data[i]);
		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
			continue;
		}

		scale.min = Math.min(scale.min, value.min);
		scale.max = Math.max(scale.max, value.max);
	}
}

var scale_linear = scale_linearbase.extend({
	determineDataLimits: function() {
		var me = this;
		var opts = me.options;
		var chart = me.chart;
		var datasets = chart.data.datasets;
		var metasets = me._getMatchingVisibleMetas();
		var hasStacks = opts.stacked;
		var stacks = {};
		var ilen = metasets.length;
		var i, meta, data, values;

		me.min = Number.POSITIVE_INFINITY;
		me.max = Number.NEGATIVE_INFINITY;

		if (hasStacks === undefined) {
			for (i = 0; !hasStacks && i < ilen; ++i) {
				meta = metasets[i];
				hasStacks = meta.stack !== undefined;
			}
		}

		for (i = 0; i < ilen; ++i) {
			meta = metasets[i];
			data = datasets[meta.index].data;
			if (hasStacks) {
				stackData(me, stacks, meta, data);
			} else {
				updateMinMax(me, meta, data);
			}
		}

		helpers$1.each(stacks, function(stackValues) {
			values = stackValues.pos.concat(stackValues.neg);
			me.min = Math.min(me.min, helpers$1.min(values));
			me.max = Math.max(me.max, helpers$1.max(values));
		});

		me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
		me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;

		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
		me.handleTickRangeOptions();
	},

	// Returns the maximum number of ticks based on the scale dimension
	_computeTickLimit: function() {
		var me = this;
		var tickFont;

		if (me.isHorizontal()) {
			return Math.ceil(me.width / 40);
		}
		tickFont = helpers$1.options._parseFont(me.options.ticks);
		return Math.ceil(me.height / tickFont.lineHeight);
	},

	// Called after the ticks are built. We need
	handleDirectionalChanges: function() {
		if (!this.isHorizontal()) {
			// We are in a vertical orientation. The top value is the highest. So reverse the array
			this.ticks.reverse();
		}
	},

	getLabelForIndex: function(index, datasetIndex) {
		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
	},

	// Utils
	getPixelForValue: function(value) {
		var me = this;
		return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
	},

	getValueForPixel: function(pixel) {
		return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
	},

	getPixelForTick: function(index) {
		var ticks = this.ticksAsNumbers;
		if (index < 0 || index > ticks.length - 1) {
			return null;
		}
		return this.getPixelForValue(ticks[index]);
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$1 = defaultConfig$1;
scale_linear._defaults = _defaults$1;

var valueOrDefault$b = helpers$1.valueOrDefault;
var log10 = helpers$1.math.log10;

/**
 * Generate a set of logarithmic ticks
 * @param generationOptions the options used to generate the ticks
 * @param dataRange the range of the data
 * @returns {number[]} array of tick values
 */
function generateTicks$1(generationOptions, dataRange) {
	var ticks = [];

	var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));

	var endExp = Math.floor(log10(dataRange.max));
	var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
	var exp, significand;

	if (tickVal === 0) {
		exp = Math.floor(log10(dataRange.minNotZero));
		significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));

		ticks.push(tickVal);
		tickVal = significand * Math.pow(10, exp);
	} else {
		exp = Math.floor(log10(tickVal));
		significand = Math.floor(tickVal / Math.pow(10, exp));
	}
	var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

	do {
		ticks.push(tickVal);

		++significand;
		if (significand === 10) {
			significand = 1;
			++exp;
			precision = exp >= 0 ? 1 : precision;
		}

		tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
	} while (exp < endExp || (exp === endExp && significand < endSignificand));

	var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
	ticks.push(lastTick);

	return ticks;
}

var defaultConfig$2 = {
	position: 'left',

	// label settings
	ticks: {
		callback: core_ticks.formatters.logarithmic
	}
};

// TODO(v3): change this to positiveOrDefault
function nonNegativeOrDefault(value, defaultValue) {
	return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
}

var scale_logarithmic = core_scale.extend({
	determineDataLimits: function() {
		var me = this;
		var opts = me.options;
		var chart = me.chart;
		var datasets = chart.data.datasets;
		var isHorizontal = me.isHorizontal();
		function IDMatches(meta) {
			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
		}
		var datasetIndex, meta, value, data, i, ilen;

		// Calculate Range
		me.min = Number.POSITIVE_INFINITY;
		me.max = Number.NEGATIVE_INFINITY;
		me.minNotZero = Number.POSITIVE_INFINITY;

		var hasStacks = opts.stacked;
		if (hasStacks === undefined) {
			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
					meta.stack !== undefined) {
					hasStacks = true;
					break;
				}
			}
		}

		if (opts.stacked || hasStacks) {
			var valuesPerStack = {};

			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				var key = [
					meta.type,
					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
					meta.stack
				].join('.');

				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
					if (valuesPerStack[key] === undefined) {
						valuesPerStack[key] = [];
					}

					data = datasets[datasetIndex].data;
					for (i = 0, ilen = data.length; i < ilen; i++) {
						var values = valuesPerStack[key];
						value = me._parseValue(data[i]);
						// invalid, hidden and negative values are ignored
						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
							continue;
						}
						values[i] = values[i] || 0;
						values[i] += value.max;
					}
				}
			}

			helpers$1.each(valuesPerStack, function(valuesForType) {
				if (valuesForType.length > 0) {
					var minVal = helpers$1.min(valuesForType);
					var maxVal = helpers$1.max(valuesForType);
					me.min = Math.min(me.min, minVal);
					me.max = Math.max(me.max, maxVal);
				}
			});

		} else {
			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
				meta = chart.getDatasetMeta(datasetIndex);
				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
					data = datasets[datasetIndex].data;
					for (i = 0, ilen = data.length; i < ilen; i++) {
						value = me._parseValue(data[i]);
						// invalid, hidden and negative values are ignored
						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
							continue;
						}

						me.min = Math.min(value.min, me.min);
						me.max = Math.max(value.max, me.max);

						if (value.min !== 0) {
							me.minNotZero = Math.min(value.min, me.minNotZero);
						}
					}
				}
			}
		}

		me.min = helpers$1.isFinite(me.min) ? me.min : null;
		me.max = helpers$1.isFinite(me.max) ? me.max : null;
		me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;

		// Common base implementation to handle ticks.min, ticks.max
		this.handleTickRangeOptions();
	},

	handleTickRangeOptions: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var DEFAULT_MIN = 1;
		var DEFAULT_MAX = 10;

		me.min = nonNegativeOrDefault(tickOpts.min, me.min);
		me.max = nonNegativeOrDefault(tickOpts.max, me.max);

		if (me.min === me.max) {
			if (me.min !== 0 && me.min !== null) {
				me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
				me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
			} else {
				me.min = DEFAULT_MIN;
				me.max = DEFAULT_MAX;
			}
		}
		if (me.min === null) {
			me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
		}
		if (me.max === null) {
			me.max = me.min !== 0
				? Math.pow(10, Math.floor(log10(me.min)) + 1)
				: DEFAULT_MAX;
		}
		if (me.minNotZero === null) {
			if (me.min > 0) {
				me.minNotZero = me.min;
			} else if (me.max < 1) {
				me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
			} else {
				me.minNotZero = DEFAULT_MIN;
			}
		}
	},

	buildTicks: function() {
		var me = this;
		var tickOpts = me.options.ticks;
		var reverse = !me.isHorizontal();

		var generationOptions = {
			min: nonNegativeOrDefault(tickOpts.min),
			max: nonNegativeOrDefault(tickOpts.max)
		};
		var ticks = me.ticks = generateTicks$1(generationOptions, me);

		// At this point, we need to update our max and min given the tick values since we have expanded the
		// range of the scale
		me.max = helpers$1.max(ticks);
		me.min = helpers$1.min(ticks);

		if (tickOpts.reverse) {
			reverse = !reverse;
			me.start = me.max;
			me.end = me.min;
		} else {
			me.start = me.min;
			me.end = me.max;
		}
		if (reverse) {
			ticks.reverse();
		}
	},

	convertTicksToLabels: function() {
		this.tickValues = this.ticks.slice();

		core_scale.prototype.convertTicksToLabels.call(this);
	},

	// Get the correct tooltip label
	getLabelForIndex: function(index, datasetIndex) {
		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
	},

	getPixelForTick: function(index) {
		var ticks = this.tickValues;
		if (index < 0 || index > ticks.length - 1) {
			return null;
		}
		return this.getPixelForValue(ticks[index]);
	},

	/**
	 * Returns the value of the first tick.
	 * @param {number} value - The minimum not zero value.
	 * @return {number} The first tick value.
	 * @private
	 */
	_getFirstTickValue: function(value) {
		var exp = Math.floor(log10(value));
		var significand = Math.floor(value / Math.pow(10, exp));

		return significand * Math.pow(10, exp);
	},

	_configure: function() {
		var me = this;
		var start = me.min;
		var offset = 0;

		core_scale.prototype._configure.call(me);

		if (start === 0) {
			start = me._getFirstTickValue(me.minNotZero);
			offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
		}

		me._startValue = log10(start);
		me._valueOffset = offset;
		me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
	},

	getPixelForValue: function(value) {
		var me = this;
		var decimal = 0;

		value = +me.getRightValue(value);

		if (value > me.min && value > 0) {
			decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
		}
		return me.getPixelForDecimal(decimal);
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var decimal = me.getDecimalForPixel(pixel);
		return decimal === 0 && me.min === 0
			? 0
			: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$2 = defaultConfig$2;
scale_logarithmic._defaults = _defaults$2;

var valueOrDefault$c = helpers$1.valueOrDefault;
var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
var resolve$4 = helpers$1.options.resolve;

var defaultConfig$3 = {
	display: true,

	// Boolean - Whether to animate scaling the chart from the centre
	animate: true,
	position: 'chartArea',

	angleLines: {
		display: true,
		color: 'rgba(0,0,0,0.1)',
		lineWidth: 1,
		borderDash: [],
		borderDashOffset: 0.0
	},

	gridLines: {
		circular: false
	},

	// label settings
	ticks: {
		// Boolean - Show a backdrop to the scale label
		showLabelBackdrop: true,

		// String - The colour of the label backdrop
		backdropColor: 'rgba(255,255,255,0.75)',

		// Number - The backdrop padding above & below the label in pixels
		backdropPaddingY: 2,

		// Number - The backdrop padding to the side of the label in pixels
		backdropPaddingX: 2,

		callback: core_ticks.formatters.linear
	},

	pointLabels: {
		// Boolean - if true, show point labels
		display: true,

		// Number - Point label font size in pixels
		fontSize: 10,

		// Function - Used to convert point labels
		callback: function(label) {
			return label;
		}
	}
};

function getTickBackdropHeight(opts) {
	var tickOpts = opts.ticks;

	if (tickOpts.display && opts.display) {
		return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
	}
	return 0;
}

function measureLabelSize(ctx, lineHeight, label) {
	if (helpers$1.isArray(label)) {
		return {
			w: helpers$1.longestText(ctx, ctx.font, label),
			h: label.length * lineHeight
		};
	}

	return {
		w: ctx.measureText(label).width,
		h: lineHeight
	};
}

function determineLimits(angle, pos, size, min, max) {
	if (angle === min || angle === max) {
		return {
			start: pos - (size / 2),
			end: pos + (size / 2)
		};
	} else if (angle < min || angle > max) {
		return {
			start: pos - size,
			end: pos
		};
	}

	return {
		start: pos,
		end: pos + size
	};
}

/**
 * Helper function to fit a radial linear scale with point labels
 */
function fitWithPointLabels(scale) {

	// Right, this is really confusing and there is a lot of maths going on here
	// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
	//
	// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
	//
	// Solution:
	//
	// We assume the radius of the polygon is half the size of the canvas at first
	// at each index we check if the text overlaps.
	//
	// Where it does, we store that angle and that index.
	//
	// After finding the largest index and angle we calculate how much we need to remove
	// from the shape radius to move the point inwards by that x.
	//
	// We average the left and right distances to get the maximum shape radius that can fit in the box
	// along with labels.
	//
	// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
	// on each side, removing that from the size, halving it and adding the left x protrusion width.
	//
	// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
	// and position it in the most space efficient manner
	//
	// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif

	var plFont = helpers$1.options._parseFont(scale.options.pointLabels);

	// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
	// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
	var furthestLimits = {
		l: 0,
		r: scale.width,
		t: 0,
		b: scale.height - scale.paddingTop
	};
	var furthestAngles = {};
	var i, textSize, pointPosition;

	scale.ctx.font = plFont.string;
	scale._pointLabelSizes = [];

	var valueCount = scale.chart.data.labels.length;
	for (i = 0; i < valueCount; i++) {
		pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
		textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
		scale._pointLabelSizes[i] = textSize;

		// Add quarter circle to make degree 0 mean top of circle
		var angleRadians = scale.getIndexAngle(i);
		var angle = helpers$1.toDegrees(angleRadians) % 360;
		var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
		var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

		if (hLimits.start < furthestLimits.l) {
			furthestLimits.l = hLimits.start;
			furthestAngles.l = angleRadians;
		}

		if (hLimits.end > furthestLimits.r) {
			furthestLimits.r = hLimits.end;
			furthestAngles.r = angleRadians;
		}

		if (vLimits.start < furthestLimits.t) {
			furthestLimits.t = vLimits.start;
			furthestAngles.t = angleRadians;
		}

		if (vLimits.end > furthestLimits.b) {
			furthestLimits.b = vLimits.end;
			furthestAngles.b = angleRadians;
		}
	}

	scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
}

function getTextAlignForAngle(angle) {
	if (angle === 0 || angle === 180) {
		return 'center';
	} else if (angle < 180) {
		return 'left';
	}

	return 'right';
}

function fillText(ctx, text, position, lineHeight) {
	var y = position.y + lineHeight / 2;
	var i, ilen;

	if (helpers$1.isArray(text)) {
		for (i = 0, ilen = text.length; i < ilen; ++i) {
			ctx.fillText(text[i], position.x, y);
			y += lineHeight;
		}
	} else {
		ctx.fillText(text, position.x, y);
	}
}

function adjustPointPositionForLabelHeight(angle, textSize, position) {
	if (angle === 90 || angle === 270) {
		position.y -= (textSize.h / 2);
	} else if (angle > 270 || angle < 90) {
		position.y -= textSize.h;
	}
}

function drawPointLabels(scale) {
	var ctx = scale.ctx;
	var opts = scale.options;
	var pointLabelOpts = opts.pointLabels;
	var tickBackdropHeight = getTickBackdropHeight(opts);
	var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
	var plFont = helpers$1.options._parseFont(pointLabelOpts);

	ctx.save();

	ctx.font = plFont.string;
	ctx.textBaseline = 'middle';

	for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
		// Extra pixels out for some label spacing
		var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
		var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);

		// Keep this in loop since we may support array properties here
		var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
		ctx.fillStyle = pointLabelFontColor;

		var angleRadians = scale.getIndexAngle(i);
		var angle = helpers$1.toDegrees(angleRadians);
		ctx.textAlign = getTextAlignForAngle(angle);
		adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
		fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
	}
	ctx.restore();
}

function drawRadiusLine(scale, gridLineOpts, radius, index) {
	var ctx = scale.ctx;
	var circular = gridLineOpts.circular;
	var valueCount = scale.chart.data.labels.length;
	var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
	var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
	var pointPosition;

	if ((!circular && !valueCount) || !lineColor || !lineWidth) {
		return;
	}

	ctx.save();
	ctx.strokeStyle = lineColor;
	ctx.lineWidth = lineWidth;
	if (ctx.setLineDash) {
		ctx.setLineDash(gridLineOpts.borderDash || []);
		ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
	}

	ctx.beginPath();
	if (circular) {
		// Draw circular arcs between the points
		ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
	} else {
		// Draw straight lines connecting each index
		pointPosition = scale.getPointPosition(0, radius);
		ctx.moveTo(pointPosition.x, pointPosition.y);

		for (var i = 1; i < valueCount; i++) {
			pointPosition = scale.getPointPosition(i, radius);
			ctx.lineTo(pointPosition.x, pointPosition.y);
		}
	}
	ctx.closePath();
	ctx.stroke();
	ctx.restore();
}

function numberOrZero(param) {
	return helpers$1.isNumber(param) ? param : 0;
}

var scale_radialLinear = scale_linearbase.extend({
	setDimensions: function() {
		var me = this;

		// Set the unconstrained dimension before label rotation
		me.width = me.maxWidth;
		me.height = me.maxHeight;
		me.paddingTop = getTickBackdropHeight(me.options) / 2;
		me.xCenter = Math.floor(me.width / 2);
		me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
		me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
	},

	determineDataLimits: function() {
		var me = this;
		var chart = me.chart;
		var min = Number.POSITIVE_INFINITY;
		var max = Number.NEGATIVE_INFINITY;

		helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
			if (chart.isDatasetVisible(datasetIndex)) {
				var meta = chart.getDatasetMeta(datasetIndex);

				helpers$1.each(dataset.data, function(rawValue, index) {
					var value = +me.getRightValue(rawValue);
					if (isNaN(value) || meta.data[index].hidden) {
						return;
					}

					min = Math.min(value, min);
					max = Math.max(value, max);
				});
			}
		});

		me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
		me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);

		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
		me.handleTickRangeOptions();
	},

	// Returns the maximum number of ticks based on the scale dimension
	_computeTickLimit: function() {
		return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
	},

	convertTicksToLabels: function() {
		var me = this;

		scale_linearbase.prototype.convertTicksToLabels.call(me);

		// Point labels
		me.pointLabels = me.chart.data.labels.map(function() {
			var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
			return label || label === 0 ? label : '';
		});
	},

	getLabelForIndex: function(index, datasetIndex) {
		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
	},

	fit: function() {
		var me = this;
		var opts = me.options;

		if (opts.display && opts.pointLabels.display) {
			fitWithPointLabels(me);
		} else {
			me.setCenterPoint(0, 0, 0, 0);
		}
	},

	/**
	 * Set radius reductions and determine new radius and center point
	 * @private
	 */
	setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
		var me = this;
		var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
		var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
		var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
		var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);

		radiusReductionLeft = numberOrZero(radiusReductionLeft);
		radiusReductionRight = numberOrZero(radiusReductionRight);
		radiusReductionTop = numberOrZero(radiusReductionTop);
		radiusReductionBottom = numberOrZero(radiusReductionBottom);

		me.drawingArea = Math.min(
			Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
			Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
		me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
	},

	setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
		var me = this;
		var maxRight = me.width - rightMovement - me.drawingArea;
		var maxLeft = leftMovement + me.drawingArea;
		var maxTop = topMovement + me.drawingArea;
		var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;

		me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
		me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
	},

	getIndexAngle: function(index) {
		var chart = this.chart;
		var angleMultiplier = 360 / chart.data.labels.length;
		var options = chart.options || {};
		var startAngle = options.startAngle || 0;

		// Start from the top instead of right, so remove a quarter of the circle
		var angle = (index * angleMultiplier + startAngle) % 360;

		return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
	},

	getDistanceFromCenterForValue: function(value) {
		var me = this;

		if (helpers$1.isNullOrUndef(value)) {
			return NaN;
		}

		// Take into account half font size + the yPadding of the top value
		var scalingFactor = me.drawingArea / (me.max - me.min);
		if (me.options.ticks.reverse) {
			return (me.max - value) * scalingFactor;
		}
		return (value - me.min) * scalingFactor;
	},

	getPointPosition: function(index, distanceFromCenter) {
		var me = this;
		var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
		return {
			x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
			y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
		};
	},

	getPointPositionForValue: function(index, value) {
		return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
	},

	getBasePosition: function(index) {
		var me = this;
		var min = me.min;
		var max = me.max;

		return me.getPointPositionForValue(index || 0,
			me.beginAtZero ? 0 :
			min < 0 && max < 0 ? max :
			min > 0 && max > 0 ? min :
			0);
	},

	/**
	 * @private
	 */
	_drawGrid: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;
		var gridLineOpts = opts.gridLines;
		var angleLineOpts = opts.angleLines;
		var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
		var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
		var i, offset, position;

		if (opts.pointLabels.display) {
			drawPointLabels(me);
		}

		if (gridLineOpts.display) {
			helpers$1.each(me.ticks, function(label, index) {
				if (index !== 0) {
					offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
					drawRadiusLine(me, gridLineOpts, offset, index);
				}
			});
		}

		if (angleLineOpts.display && lineWidth && lineColor) {
			ctx.save();
			ctx.lineWidth = lineWidth;
			ctx.strokeStyle = lineColor;
			if (ctx.setLineDash) {
				ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
				ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
			}

			for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
				offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
				position = me.getPointPosition(i, offset);
				ctx.beginPath();
				ctx.moveTo(me.xCenter, me.yCenter);
				ctx.lineTo(position.x, position.y);
				ctx.stroke();
			}

			ctx.restore();
		}
	},

	/**
	 * @private
	 */
	_drawLabels: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;
		var tickOpts = opts.ticks;

		if (!tickOpts.display) {
			return;
		}

		var startAngle = me.getIndexAngle(0);
		var tickFont = helpers$1.options._parseFont(tickOpts);
		var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
		var offset, width;

		ctx.save();
		ctx.font = tickFont.string;
		ctx.translate(me.xCenter, me.yCenter);
		ctx.rotate(startAngle);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';

		helpers$1.each(me.ticks, function(label, index) {
			if (index === 0 && !tickOpts.reverse) {
				return;
			}

			offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

			if (tickOpts.showLabelBackdrop) {
				width = ctx.measureText(label).width;
				ctx.fillStyle = tickOpts.backdropColor;

				ctx.fillRect(
					-width / 2 - tickOpts.backdropPaddingX,
					-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
					width + tickOpts.backdropPaddingX * 2,
					tickFont.size + tickOpts.backdropPaddingY * 2
				);
			}

			ctx.fillStyle = tickFontColor;
			ctx.fillText(label, 0, -offset);
		});

		ctx.restore();
	},

	/**
	 * @private
	 */
	_drawTitle: helpers$1.noop
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$3 = defaultConfig$3;
scale_radialLinear._defaults = _defaults$3;

var deprecated$1 = helpers$1._deprecated;
var resolve$5 = helpers$1.options.resolve;
var valueOrDefault$d = helpers$1.valueOrDefault;

// Integer constants are from the ES6 spec.
var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

var INTERVALS = {
	millisecond: {
		common: true,
		size: 1,
		steps: 1000
	},
	second: {
		common: true,
		size: 1000,
		steps: 60
	},
	minute: {
		common: true,
		size: 60000,
		steps: 60
	},
	hour: {
		common: true,
		size: 3600000,
		steps: 24
	},
	day: {
		common: true,
		size: 86400000,
		steps: 30
	},
	week: {
		common: false,
		size: 604800000,
		steps: 4
	},
	month: {
		common: true,
		size: 2.628e9,
		steps: 12
	},
	quarter: {
		common: false,
		size: 7.884e9,
		steps: 4
	},
	year: {
		common: true,
		size: 3.154e10
	}
};

var UNITS = Object.keys(INTERVALS);

function sorter(a, b) {
	return a - b;
}

function arrayUnique(items) {
	var hash = {};
	var out = [];
	var i, ilen, item;

	for (i = 0, ilen = items.length; i < ilen; ++i) {
		item = items[i];
		if (!hash[item]) {
			hash[item] = true;
			out.push(item);
		}
	}

	return out;
}

function getMin(options) {
	return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
}

function getMax(options) {
	return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
}

/**
 * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
 * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
 * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
 * extremity (left + width or top + height). Note that it would be more optimized to directly
 * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
 * to create the lookup table. The table ALWAYS contains at least two items: min and max.
 *
 * @param {number[]} timestamps - timestamps sorted from lowest to highest.
 * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
 * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
 * If 'series', timestamps will be positioned at the same distance from each other. In this
 * case, only timestamps that break the time linearity are registered, meaning that in the
 * best case, all timestamps are linear, the table contains only min and max.
 */
function buildLookupTable(timestamps, min, max, distribution) {
	if (distribution === 'linear' || !timestamps.length) {
		return [
			{time: min, pos: 0},
			{time: max, pos: 1}
		];
	}

	var table = [];
	var items = [min];
	var i, ilen, prev, curr, next;

	for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
		curr = timestamps[i];
		if (curr > min && curr < max) {
			items.push(curr);
		}
	}

	items.push(max);

	for (i = 0, ilen = items.length; i < ilen; ++i) {
		next = items[i + 1];
		prev = items[i - 1];
		curr = items[i];

		// only add points that breaks the scale linearity
		if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
			table.push({time: curr, pos: i / (ilen - 1)});
		}
	}

	return table;
}

// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
function lookup(table, key, value) {
	var lo = 0;
	var hi = table.length - 1;
	var mid, i0, i1;

	while (lo >= 0 && lo <= hi) {
		mid = (lo + hi) >> 1;
		i0 = table[mid - 1] || null;
		i1 = table[mid];

		if (!i0) {
			// given value is outside table (before first item)
			return {lo: null, hi: i1};
		} else if (i1[key] < value) {
			lo = mid + 1;
		} else if (i0[key] > value) {
			hi = mid - 1;
		} else {
			return {lo: i0, hi: i1};
		}
	}

	// given value is outside table (after last item)
	return {lo: i1, hi: null};
}

/**
 * Linearly interpolates the given source `value` using the table items `skey` values and
 * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
 * returns the position for a timestamp equal to 42. If value is out of bounds, values at
 * index [0, 1] or [n - 1, n] are used for the interpolation.
 */
function interpolate$1(table, skey, sval, tkey) {
	var range = lookup(table, skey, sval);

	// Note: the lookup table ALWAYS contains at least 2 items (min and max)
	var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
	var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;

	var span = next[skey] - prev[skey];
	var ratio = span ? (sval - prev[skey]) / span : 0;
	var offset = (next[tkey] - prev[tkey]) * ratio;

	return prev[tkey] + offset;
}

function toTimestamp(scale, input) {
	var adapter = scale._adapter;
	var options = scale.options.time;
	var parser = options.parser;
	var format = parser || options.format;
	var value = input;

	if (typeof parser === 'function') {
		value = parser(value);
	}

	// Only parse if its not a timestamp already
	if (!helpers$1.isFinite(value)) {
		value = typeof format === 'string'
			? adapter.parse(value, format)
			: adapter.parse(value);
	}

	if (value !== null) {
		return +value;
	}

	// Labels are in an incompatible format and no `parser` has been provided.
	// The user might still use the deprecated `format` option for parsing.
	if (!parser && typeof format === 'function') {
		value = format(input);

		// `format` could return something else than a timestamp, if so, parse it
		if (!helpers$1.isFinite(value)) {
			value = adapter.parse(value);
		}
	}

	return value;
}

function parse(scale, input) {
	if (helpers$1.isNullOrUndef(input)) {
		return null;
	}

	var options = scale.options.time;
	var value = toTimestamp(scale, scale.getRightValue(input));
	if (value === null) {
		return value;
	}

	if (options.round) {
		value = +scale._adapter.startOf(value, options.round);
	}

	return value;
}

/**
 * Figures out what unit results in an appropriate number of auto-generated ticks
 */
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
	var ilen = UNITS.length;
	var i, interval, factor;

	for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
		interval = INTERVALS[UNITS[i]];
		factor = interval.steps ? interval.steps : MAX_INTEGER;

		if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
			return UNITS[i];
		}
	}

	return UNITS[ilen - 1];
}

/**
 * Figures out what unit to format a set of ticks with
 */
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
	var i, unit;

	for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
		unit = UNITS[i];
		if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
			return unit;
		}
	}

	return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}

function determineMajorUnit(unit) {
	for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
		if (INTERVALS[UNITS[i]].common) {
			return UNITS[i];
		}
	}
}

/**
 * Generates a maximum of `capacity` timestamps between min and max, rounded to the
 * `minor` unit using the given scale time `options`.
 * Important: this method can return ticks outside the min and max range, it's the
 * responsibility of the calling code to clamp values if needed.
 */
function generate(scale, min, max, capacity) {
	var adapter = scale._adapter;
	var options = scale.options;
	var timeOpts = options.time;
	var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
	var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
	var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
	var first = min;
	var ticks = [];
	var time;

	// For 'week' unit, handle the first day of week option
	if (weekday) {
		first = +adapter.startOf(first, 'isoWeek', weekday);
	}

	// Align first ticks on unit
	first = +adapter.startOf(first, weekday ? 'day' : minor);

	// Prevent browser from freezing in case user options request millions of milliseconds
	if (adapter.diff(max, min, minor) > 100000 * stepSize) {
		throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
	}

	for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
		ticks.push(time);
	}

	if (time === max || options.bounds === 'ticks') {
		ticks.push(time);
	}

	return ticks;
}

/**
 * Returns the start and end offsets from edges in the form of {start, end}
 * where each value is a relative width to the scale and ranges between 0 and 1.
 * They add extra margins on the both sides by scaling down the original scale.
 * Offsets are added when the `offset` option is true.
 */
function computeOffsets(table, ticks, min, max, options) {
	var start = 0;
	var end = 0;
	var first, last;

	if (options.offset && ticks.length) {
		first = interpolate$1(table, 'time', ticks[0], 'pos');
		if (ticks.length === 1) {
			start = 1 - first;
		} else {
			start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
		}
		last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
		if (ticks.length === 1) {
			end = last;
		} else {
			end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
		}
	}

	return {start: start, end: end, factor: 1 / (start + 1 + end)};
}

function setMajorTicks(scale, ticks, map, majorUnit) {
	var adapter = scale._adapter;
	var first = +adapter.startOf(ticks[0].value, majorUnit);
	var last = ticks[ticks.length - 1].value;
	var major, index;

	for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
		index = map[major];
		if (index >= 0) {
			ticks[index].major = true;
		}
	}
	return ticks;
}

function ticksFromTimestamps(scale, values, majorUnit) {
	var ticks = [];
	var map = {};
	var ilen = values.length;
	var i, value;

	for (i = 0; i < ilen; ++i) {
		value = values[i];
		map[value] = i;

		ticks.push({
			value: value,
			major: false
		});
	}

	// We set the major ticks separately from the above loop because calling startOf for every tick
	// is expensive when there is a large number of ticks
	return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}

var defaultConfig$4 = {
	position: 'bottom',

	/**
	 * Data distribution along the scale:
	 * - 'linear': data are spread according to their time (distances can vary),
	 * - 'series': data are spread at the same distance from each other.
	 * @see https://github.com/chartjs/Chart.js/pull/4507
	 * @since 2.7.0
	 */
	distribution: 'linear',

	/**
	 * Scale boundary strategy (bypassed by min/max time options)
	 * - `data`: make sure data are fully visible, ticks outside are removed
	 * - `ticks`: make sure ticks are fully visible, data outside are truncated
	 * @see https://github.com/chartjs/Chart.js/pull/4556
	 * @since 2.7.0
	 */
	bounds: 'data',

	adapters: {},
	time: {
		parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
		unit: false, // false == automatic or override with week, month, year, etc.
		round: false, // none, or override with week, month, year, etc.
		displayFormat: false, // DEPRECATED
		isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
		minUnit: 'millisecond',
		displayFormats: {}
	},
	ticks: {
		autoSkip: false,

		/**
		 * Ticks generation input values:
		 * - 'auto': generates "optimal" ticks based on scale size and time options.
		 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
		 * - 'labels': generates ticks from user given `data.labels` values ONLY.
		 * @see https://github.com/chartjs/Chart.js/pull/4507
		 * @since 2.7.0
		 */
		source: 'auto',

		major: {
			enabled: false
		}
	}
};

var scale_time = core_scale.extend({
	initialize: function() {
		this.mergeTicksOptions();
		core_scale.prototype.initialize.call(this);
	},

	update: function() {
		var me = this;
		var options = me.options;
		var time = options.time || (options.time = {});
		var adapter = me._adapter = new core_adapters._date(options.adapters.date);

		// DEPRECATIONS: output a message only one time per update
		deprecated$1('time scale', time.format, 'time.format', 'time.parser');
		deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
		deprecated$1('time scale', time.max, 'time.max', 'ticks.max');

		// Backward compatibility: before introducing adapter, `displayFormats` was
		// supposed to contain *all* unit/string pairs but this can't be resolved
		// when loading the scale (adapters are loaded afterward), so let's populate
		// missing formats on update
		helpers$1.mergeIf(time.displayFormats, adapter.formats());

		return core_scale.prototype.update.apply(me, arguments);
	},

	/**
	 * Allows data to be referenced via 't' attribute
	 */
	getRightValue: function(rawValue) {
		if (rawValue && rawValue.t !== undefined) {
			rawValue = rawValue.t;
		}
		return core_scale.prototype.getRightValue.call(this, rawValue);
	},

	determineDataLimits: function() {
		var me = this;
		var chart = me.chart;
		var adapter = me._adapter;
		var options = me.options;
		var unit = options.time.unit || 'day';
		var min = MAX_INTEGER;
		var max = MIN_INTEGER;
		var timestamps = [];
		var datasets = [];
		var labels = [];
		var i, j, ilen, jlen, data, timestamp, labelsAdded;
		var dataLabels = me._getLabels();

		for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
			labels.push(parse(me, dataLabels[i]));
		}

		for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
			if (chart.isDatasetVisible(i)) {
				data = chart.data.datasets[i].data;

				// Let's consider that all data have the same format.
				if (helpers$1.isObject(data[0])) {
					datasets[i] = [];

					for (j = 0, jlen = data.length; j < jlen; ++j) {
						timestamp = parse(me, data[j]);
						timestamps.push(timestamp);
						datasets[i][j] = timestamp;
					}
				} else {
					datasets[i] = labels.slice(0);
					if (!labelsAdded) {
						timestamps = timestamps.concat(labels);
						labelsAdded = true;
					}
				}
			} else {
				datasets[i] = [];
			}
		}

		if (labels.length) {
			min = Math.min(min, labels[0]);
			max = Math.max(max, labels[labels.length - 1]);
		}

		if (timestamps.length) {
			timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
			min = Math.min(min, timestamps[0]);
			max = Math.max(max, timestamps[timestamps.length - 1]);
		}

		min = parse(me, getMin(options)) || min;
		max = parse(me, getMax(options)) || max;

		// In case there is no valid min/max, set limits based on unit time option
		min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
		max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;

		// Make sure that max is strictly higher than min (required by the lookup table)
		me.min = Math.min(min, max);
		me.max = Math.max(min + 1, max);

		// PRIVATE
		me._table = [];
		me._timestamps = {
			data: timestamps,
			datasets: datasets,
			labels: labels
		};
	},

	buildTicks: function() {
		var me = this;
		var min = me.min;
		var max = me.max;
		var options = me.options;
		var tickOpts = options.ticks;
		var timeOpts = options.time;
		var timestamps = me._timestamps;
		var ticks = [];
		var capacity = me.getLabelCapacity(min);
		var source = tickOpts.source;
		var distribution = options.distribution;
		var i, ilen, timestamp;

		if (source === 'data' || (source === 'auto' && distribution === 'series')) {
			timestamps = timestamps.data;
		} else if (source === 'labels') {
			timestamps = timestamps.labels;
		} else {
			timestamps = generate(me, min, max, capacity);
		}

		if (options.bounds === 'ticks' && timestamps.length) {
			min = timestamps[0];
			max = timestamps[timestamps.length - 1];
		}

		// Enforce limits with user min/max options
		min = parse(me, getMin(options)) || min;
		max = parse(me, getMax(options)) || max;

		// Remove ticks outside the min/max range
		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
			timestamp = timestamps[i];
			if (timestamp >= min && timestamp <= max) {
				ticks.push(timestamp);
			}
		}

		me.min = min;
		me.max = max;

		// PRIVATE
		// determineUnitForFormatting relies on the number of ticks so we don't use it when
		// autoSkip is enabled because we don't yet know what the final number of ticks will be
		me._unit = timeOpts.unit || (tickOpts.autoSkip
			? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)
			: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
		me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
			: determineMajorUnit(me._unit);
		me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
		me._offsets = computeOffsets(me._table, ticks, min, max, options);

		if (tickOpts.reverse) {
			ticks.reverse();
		}

		return ticksFromTimestamps(me, ticks, me._majorUnit);
	},

	getLabelForIndex: function(index, datasetIndex) {
		var me = this;
		var adapter = me._adapter;
		var data = me.chart.data;
		var timeOpts = me.options.time;
		var label = data.labels && index < data.labels.length ? data.labels[index] : '';
		var value = data.datasets[datasetIndex].data[index];

		if (helpers$1.isObject(value)) {
			label = me.getRightValue(value);
		}
		if (timeOpts.tooltipFormat) {
			return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
		}
		if (typeof label === 'string') {
			return label;
		}
		return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
	},

	/**
	 * Function to format an individual tick mark
	 * @private
	 */
	tickFormatFunction: function(time, index, ticks, format) {
		var me = this;
		var adapter = me._adapter;
		var options = me.options;
		var formats = options.time.displayFormats;
		var minorFormat = formats[me._unit];
		var majorUnit = me._majorUnit;
		var majorFormat = formats[majorUnit];
		var tick = ticks[index];
		var tickOpts = options.ticks;
		var major = majorUnit && majorFormat && tick && tick.major;
		var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
		var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
		var formatter = resolve$5([
			nestedTickOpts.callback,
			nestedTickOpts.userCallback,
			tickOpts.callback,
			tickOpts.userCallback
		]);

		return formatter ? formatter(label, index, ticks) : label;
	},

	convertTicksToLabels: function(ticks) {
		var labels = [];
		var i, ilen;

		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
			labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
		}

		return labels;
	},

	/**
	 * @private
	 */
	getPixelForOffset: function(time) {
		var me = this;
		var offsets = me._offsets;
		var pos = interpolate$1(me._table, 'time', time, 'pos');
		return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
	},

	getPixelForValue: function(value, index, datasetIndex) {
		var me = this;
		var time = null;

		if (index !== undefined && datasetIndex !== undefined) {
			time = me._timestamps.datasets[datasetIndex][index];
		}

		if (time === null) {
			time = parse(me, value);
		}

		if (time !== null) {
			return me.getPixelForOffset(time);
		}
	},

	getPixelForTick: function(index) {
		var ticks = this.getTicks();
		return index >= 0 && index < ticks.length ?
			this.getPixelForOffset(ticks[index].value) :
			null;
	},

	getValueForPixel: function(pixel) {
		var me = this;
		var offsets = me._offsets;
		var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
		var time = interpolate$1(me._table, 'pos', pos, 'time');

		// DEPRECATION, we should return time directly
		return me._adapter._create(time);
	},

	/**
	 * @private
	 */
	_getLabelSize: function(label) {
		var me = this;
		var ticksOpts = me.options.ticks;
		var tickLabelWidth = me.ctx.measureText(label).width;
		var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
		var cosRotation = Math.cos(angle);
		var sinRotation = Math.sin(angle);
		var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);

		return {
			w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
			h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
		};
	},

	/**
	 * Crude approximation of what the label width might be
	 * @private
	 */
	getLabelWidth: function(label) {
		return this._getLabelSize(label).w;
	},

	/**
	 * @private
	 */
	getLabelCapacity: function(exampleTime) {
		var me = this;
		var timeOpts = me.options.time;
		var displayFormats = timeOpts.displayFormats;

		// pick the longest format (milliseconds) for guestimation
		var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
		var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
		var size = me._getLabelSize(exampleLabel);
		var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);

		if (me.options.offset) {
			capacity--;
		}

		return capacity > 0 ? capacity : 1;
	}
});

// INTERNAL: static default options, registered in src/index.js
var _defaults$4 = defaultConfig$4;
scale_time._defaults = _defaults$4;

var scales = {
	category: scale_category,
	linear: scale_linear,
	logarithmic: scale_logarithmic,
	radialLinear: scale_radialLinear,
	time: scale_time
};

var FORMATS = {
	datetime: 'MMM D, YYYY, h:mm:ss a',
	millisecond: 'h:mm:ss.SSS a',
	second: 'h:mm:ss a',
	minute: 'h:mm a',
	hour: 'hA',
	day: 'MMM D',
	week: 'll',
	month: 'MMM YYYY',
	quarter: '[Q]Q - YYYY',
	year: 'YYYY'
};

core_adapters._date.override(typeof moment === 'function' ? {
	_id: 'moment', // DEBUG ONLY

	formats: function() {
		return FORMATS;
	},

	parse: function(value, format) {
		if (typeof value === 'string' && typeof format === 'string') {
			value = moment(value, format);
		} else if (!(value instanceof moment)) {
			value = moment(value);
		}
		return value.isValid() ? value.valueOf() : null;
	},

	format: function(time, format) {
		return moment(time).format(format);
	},

	add: function(time, amount, unit) {
		return moment(time).add(amount, unit).valueOf();
	},

	diff: function(max, min, unit) {
		return moment(max).diff(moment(min), unit);
	},

	startOf: function(time, unit, weekday) {
		time = moment(time);
		if (unit === 'isoWeek') {
			return time.isoWeekday(weekday).valueOf();
		}
		return time.startOf(unit).valueOf();
	},

	endOf: function(time, unit) {
		return moment(time).endOf(unit).valueOf();
	},

	// DEPRECATIONS

	/**
	 * Provided for backward compatibility with scale.getValueForPixel().
	 * @deprecated since version 2.8.0
	 * @todo remove at version 3
	 * @private
	 */
	_create: function(time) {
		return moment(time);
	},
} : {});

core_defaults._set('global', {
	plugins: {
		filler: {
			propagate: true
		}
	}
});

var mappers = {
	dataset: function(source) {
		var index = source.fill;
		var chart = source.chart;
		var meta = chart.getDatasetMeta(index);
		var visible = meta && chart.isDatasetVisible(index);
		var points = (visible && meta.dataset._children) || [];
		var length = points.length || 0;

		return !length ? null : function(point, i) {
			return (i < length && points[i]._view) || null;
		};
	},

	boundary: function(source) {
		var boundary = source.boundary;
		var x = boundary ? boundary.x : null;
		var y = boundary ? boundary.y : null;

		if (helpers$1.isArray(boundary)) {
			return function(point, i) {
				return boundary[i];
			};
		}

		return function(point) {
			return {
				x: x === null ? point.x : x,
				y: y === null ? point.y : y,
			};
		};
	}
};

// @todo if (fill[0] === '#')
function decodeFill(el, index, count) {
	var model = el._model || {};
	var fill = model.fill;
	var target;

	if (fill === undefined) {
		fill = !!model.backgroundColor;
	}

	if (fill === false || fill === null) {
		return false;
	}

	if (fill === true) {
		return 'origin';
	}

	target = parseFloat(fill, 10);
	if (isFinite(target) && Math.floor(target) === target) {
		if (fill[0] === '-' || fill[0] === '+') {
			target = index + target;
		}

		if (target === index || target < 0 || target >= count) {
			return false;
		}

		return target;
	}

	switch (fill) {
	// compatibility
	case 'bottom':
		return 'start';
	case 'top':
		return 'end';
	case 'zero':
		return 'origin';
	// supported boundaries
	case 'origin':
	case 'start':
	case 'end':
		return fill;
	// invalid fill values
	default:
		return false;
	}
}

function computeLinearBoundary(source) {
	var model = source.el._model || {};
	var scale = source.el._scale || {};
	var fill = source.fill;
	var target = null;
	var horizontal;

	if (isFinite(fill)) {
		return null;
	}

	// Backward compatibility: until v3, we still need to support boundary values set on
	// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
	// controllers might still use it (e.g. the Smith chart).

	if (fill === 'start') {
		target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
	} else if (fill === 'end') {
		target = model.scaleTop === undefined ? scale.top : model.scaleTop;
	} else if (model.scaleZero !== undefined) {
		target = model.scaleZero;
	} else if (scale.getBasePixel) {
		target = scale.getBasePixel();
	}

	if (target !== undefined && target !== null) {
		if (target.x !== undefined && target.y !== undefined) {
			return target;
		}

		if (helpers$1.isFinite(target)) {
			horizontal = scale.isHorizontal();
			return {
				x: horizontal ? target : null,
				y: horizontal ? null : target
			};
		}
	}

	return null;
}

function computeCircularBoundary(source) {
	var scale = source.el._scale;
	var options = scale.options;
	var length = scale.chart.data.labels.length;
	var fill = source.fill;
	var target = [];
	var start, end, center, i, point;

	if (!length) {
		return null;
	}

	start = options.ticks.reverse ? scale.max : scale.min;
	end = options.ticks.reverse ? scale.min : scale.max;
	center = scale.getPointPositionForValue(0, start);
	for (i = 0; i < length; ++i) {
		point = fill === 'start' || fill === 'end'
			? scale.getPointPositionForValue(i, fill === 'start' ? start : end)
			: scale.getBasePosition(i);
		if (options.gridLines.circular) {
			point.cx = center.x;
			point.cy = center.y;
			point.angle = scale.getIndexAngle(i) - Math.PI / 2;
		}
		target.push(point);
	}
	return target;
}

function computeBoundary(source) {
	var scale = source.el._scale || {};

	if (scale.getPointPositionForValue) {
		return computeCircularBoundary(source);
	}
	return computeLinearBoundary(source);
}

function resolveTarget(sources, index, propagate) {
	var source = sources[index];
	var fill = source.fill;
	var visited = [index];
	var target;

	if (!propagate) {
		return fill;
	}

	while (fill !== false && visited.indexOf(fill) === -1) {
		if (!isFinite(fill)) {
			return fill;
		}

		target = sources[fill];
		if (!target) {
			return false;
		}

		if (target.visible) {
			return fill;
		}

		visited.push(fill);
		fill = target.fill;
	}

	return false;
}

function createMapper(source) {
	var fill = source.fill;
	var type = 'dataset';

	if (fill === false) {
		return null;
	}

	if (!isFinite(fill)) {
		type = 'boundary';
	}

	return mappers[type](source);
}

function isDrawable(point) {
	return point && !point.skip;
}

function drawArea(ctx, curve0, curve1, len0, len1) {
	var i, cx, cy, r;

	if (!len0 || !len1) {
		return;
	}

	// building first area curve (normal)
	ctx.moveTo(curve0[0].x, curve0[0].y);
	for (i = 1; i < len0; ++i) {
		helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
	}

	if (curve1[0].angle !== undefined) {
		cx = curve1[0].cx;
		cy = curve1[0].cy;
		r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
		for (i = len1 - 1; i > 0; --i) {
			ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
		}
		return;
	}

	// joining the two area curves
	ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);

	// building opposite area curve (reverse)
	for (i = len1 - 1; i > 0; --i) {
		helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
	}
}

function doFill(ctx, points, mapper, view, color, loop) {
	var count = points.length;
	var span = view.spanGaps;
	var curve0 = [];
	var curve1 = [];
	var len0 = 0;
	var len1 = 0;
	var i, ilen, index, p0, p1, d0, d1, loopOffset;

	ctx.beginPath();

	for (i = 0, ilen = count; i < ilen; ++i) {
		index = i % count;
		p0 = points[index]._view;
		p1 = mapper(p0, index, view);
		d0 = isDrawable(p0);
		d1 = isDrawable(p1);

		if (loop && loopOffset === undefined && d0) {
			loopOffset = i + 1;
			ilen = count + loopOffset;
		}

		if (d0 && d1) {
			len0 = curve0.push(p0);
			len1 = curve1.push(p1);
		} else if (len0 && len1) {
			if (!span) {
				drawArea(ctx, curve0, curve1, len0, len1);
				len0 = len1 = 0;
				curve0 = [];
				curve1 = [];
			} else {
				if (d0) {
					curve0.push(p0);
				}
				if (d1) {
					curve1.push(p1);
				}
			}
		}
	}

	drawArea(ctx, curve0, curve1, len0, len1);

	ctx.closePath();
	ctx.fillStyle = color;
	ctx.fill();
}

var plugin_filler = {
	id: 'filler',

	afterDatasetsUpdate: function(chart, options) {
		var count = (chart.data.datasets || []).length;
		var propagate = options.propagate;
		var sources = [];
		var meta, i, el, source;

		for (i = 0; i < count; ++i) {
			meta = chart.getDatasetMeta(i);
			el = meta.dataset;
			source = null;

			if (el && el._model && el instanceof elements.Line) {
				source = {
					visible: chart.isDatasetVisible(i),
					fill: decodeFill(el, i, count),
					chart: chart,
					el: el
				};
			}

			meta.$filler = source;
			sources.push(source);
		}

		for (i = 0; i < count; ++i) {
			source = sources[i];
			if (!source) {
				continue;
			}

			source.fill = resolveTarget(sources, i, propagate);
			source.boundary = computeBoundary(source);
			source.mapper = createMapper(source);
		}
	},

	beforeDatasetsDraw: function(chart) {
		var metasets = chart._getSortedVisibleDatasetMetas();
		var ctx = chart.ctx;
		var meta, i, el, view, points, mapper, color;

		for (i = metasets.length - 1; i >= 0; --i) {
			meta = metasets[i].$filler;

			if (!meta || !meta.visible) {
				continue;
			}

			el = meta.el;
			view = el._view;
			points = el._children || [];
			mapper = meta.mapper;
			color = view.backgroundColor || core_defaults.global.defaultColor;

			if (mapper && color && points.length) {
				helpers$1.canvas.clipArea(ctx, chart.chartArea);
				doFill(ctx, points, mapper, view, color, el._loop);
				helpers$1.canvas.unclipArea(ctx);
			}
		}
	}
};

var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
var noop$1 = helpers$1.noop;
var valueOrDefault$e = helpers$1.valueOrDefault;

core_defaults._set('global', {
	legend: {
		display: true,
		position: 'top',
		align: 'center',
		fullWidth: true,
		reverse: false,
		weight: 1000,

		// a callback that will handle
		onClick: function(e, legendItem) {
			var index = legendItem.datasetIndex;
			var ci = this.chart;
			var meta = ci.getDatasetMeta(index);

			// See controller.isDatasetVisible comment
			meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

			// We hid a dataset ... rerender the chart
			ci.update();
		},

		onHover: null,
		onLeave: null,

		labels: {
			boxWidth: 40,
			padding: 10,
			// Generates labels shown in the legend
			// Valid properties to return:
			// text : text to display
			// fillStyle : fill of coloured box
			// strokeStyle: stroke of coloured box
			// hidden : if this legend item refers to a hidden item
			// lineCap : cap style for line
			// lineDash
			// lineDashOffset :
			// lineJoin :
			// lineWidth :
			generateLabels: function(chart) {
				var datasets = chart.data.datasets;
				var options = chart.options.legend || {};
				var usePointStyle = options.labels && options.labels.usePointStyle;

				return chart._getSortedDatasetMetas().map(function(meta) {
					var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);

					return {
						text: datasets[meta.index].label,
						fillStyle: style.backgroundColor,
						hidden: !chart.isDatasetVisible(meta.index),
						lineCap: style.borderCapStyle,
						lineDash: style.borderDash,
						lineDashOffset: style.borderDashOffset,
						lineJoin: style.borderJoinStyle,
						lineWidth: style.borderWidth,
						strokeStyle: style.borderColor,
						pointStyle: style.pointStyle,
						rotation: style.rotation,

						// Below is extra data used for toggling the datasets
						datasetIndex: meta.index
					};
				}, this);
			}
		}
	},

	legendCallback: function(chart) {
		var list = document.createElement('ul');
		var datasets = chart.data.datasets;
		var i, ilen, listItem, listItemSpan;

		list.setAttribute('class', chart.id + '-legend');

		for (i = 0, ilen = datasets.length; i < ilen; i++) {
			listItem = list.appendChild(document.createElement('li'));
			listItemSpan = listItem.appendChild(document.createElement('span'));
			listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
			if (datasets[i].label) {
				listItem.appendChild(document.createTextNode(datasets[i].label));
			}
		}

		return list.outerHTML;
	}
});

/**
 * Helper function to get the box width based on the usePointStyle option
 * @param {object} labelopts - the label options on the legend
 * @param {number} fontSize - the label font size
 * @return {number} width of the color box area
 */
function getBoxWidth(labelOpts, fontSize) {
	return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
		fontSize :
		labelOpts.boxWidth;
}

/**
 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
 */
var Legend = core_element.extend({

	initialize: function(config) {
		var me = this;
		helpers$1.extend(me, config);

		// Contains hit boxes for each dataset (in dataset order)
		me.legendHitBoxes = [];

		/**
 		 * @private
 		 */
		me._hoveredItem = null;

		// Are we in doughnut mode which has a different data type
		me.doughnutMode = false;
	},

	// These methods are ordered by lifecycle. Utilities then follow.
	// Any function defined here is inherited by all legend types.
	// Any function can be extended by the legend type

	beforeUpdate: noop$1,
	update: function(maxWidth, maxHeight, margins) {
		var me = this;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = margins;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();
		// Labels
		me.beforeBuildLabels();
		me.buildLabels();
		me.afterBuildLabels();

		// Fit
		me.beforeFit();
		me.fit();
		me.afterFit();
		//
		me.afterUpdate();

		return me.minSize;
	},
	afterUpdate: noop$1,

	//

	beforeSetDimensions: noop$1,
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;

		// Reset minSize
		me.minSize = {
			width: 0,
			height: 0
		};
	},
	afterSetDimensions: noop$1,

	//

	beforeBuildLabels: noop$1,
	buildLabels: function() {
		var me = this;
		var labelOpts = me.options.labels || {};
		var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

		if (labelOpts.filter) {
			legendItems = legendItems.filter(function(item) {
				return labelOpts.filter(item, me.chart.data);
			});
		}

		if (me.options.reverse) {
			legendItems.reverse();
		}

		me.legendItems = legendItems;
	},
	afterBuildLabels: noop$1,

	//

	beforeFit: noop$1,
	fit: function() {
		var me = this;
		var opts = me.options;
		var labelOpts = opts.labels;
		var display = opts.display;

		var ctx = me.ctx;

		var labelFont = helpers$1.options._parseFont(labelOpts);
		var fontSize = labelFont.size;

		// Reset hit boxes
		var hitboxes = me.legendHitBoxes = [];

		var minSize = me.minSize;
		var isHorizontal = me.isHorizontal();

		if (isHorizontal) {
			minSize.width = me.maxWidth; // fill all the width
			minSize.height = display ? 10 : 0;
		} else {
			minSize.width = display ? 10 : 0;
			minSize.height = me.maxHeight; // fill all the height
		}

		// Increase sizes here
		if (!display) {
			me.width = minSize.width = me.height = minSize.height = 0;
			return;
		}
		ctx.font = labelFont.string;

		if (isHorizontal) {
			// Labels

			// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
			var lineWidths = me.lineWidths = [0];
			var totalHeight = 0;

			ctx.textAlign = 'left';
			ctx.textBaseline = 'middle';

			helpers$1.each(me.legendItems, function(legendItem, i) {
				var boxWidth = getBoxWidth(labelOpts, fontSize);
				var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

				if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
					totalHeight += fontSize + labelOpts.padding;
					lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
				}

				// Store the hitbox width and height here. Final position will be updated in `draw`
				hitboxes[i] = {
					left: 0,
					top: 0,
					width: width,
					height: fontSize
				};

				lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
			});

			minSize.height += totalHeight;

		} else {
			var vPadding = labelOpts.padding;
			var columnWidths = me.columnWidths = [];
			var columnHeights = me.columnHeights = [];
			var totalWidth = labelOpts.padding;
			var currentColWidth = 0;
			var currentColHeight = 0;

			helpers$1.each(me.legendItems, function(legendItem, i) {
				var boxWidth = getBoxWidth(labelOpts, fontSize);
				var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

				// If too tall, go to new column
				if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
					totalWidth += currentColWidth + labelOpts.padding;
					columnWidths.push(currentColWidth); // previous column width
					columnHeights.push(currentColHeight);
					currentColWidth = 0;
					currentColHeight = 0;
				}

				// Get max width
				currentColWidth = Math.max(currentColWidth, itemWidth);
				currentColHeight += fontSize + vPadding;

				// Store the hitbox width and height here. Final position will be updated in `draw`
				hitboxes[i] = {
					left: 0,
					top: 0,
					width: itemWidth,
					height: fontSize
				};
			});

			totalWidth += currentColWidth;
			columnWidths.push(currentColWidth);
			columnHeights.push(currentColHeight);
			minSize.width += totalWidth;
		}

		me.width = minSize.width;
		me.height = minSize.height;
	},
	afterFit: noop$1,

	// Shared Methods
	isHorizontal: function() {
		return this.options.position === 'top' || this.options.position === 'bottom';
	},

	// Actually draw the legend on the canvas
	draw: function() {
		var me = this;
		var opts = me.options;
		var labelOpts = opts.labels;
		var globalDefaults = core_defaults.global;
		var defaultColor = globalDefaults.defaultColor;
		var lineDefault = globalDefaults.elements.line;
		var legendHeight = me.height;
		var columnHeights = me.columnHeights;
		var legendWidth = me.width;
		var lineWidths = me.lineWidths;

		if (!opts.display) {
			return;
		}

		var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
		var ctx = me.ctx;
		var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
		var labelFont = helpers$1.options._parseFont(labelOpts);
		var fontSize = labelFont.size;
		var cursor;

		// Canvas setup
		ctx.textAlign = rtlHelper.textAlign('left');
		ctx.textBaseline = 'middle';
		ctx.lineWidth = 0.5;
		ctx.strokeStyle = fontColor; // for strikethrough effect
		ctx.fillStyle = fontColor; // render in correct colour
		ctx.font = labelFont.string;

		var boxWidth = getBoxWidth(labelOpts, fontSize);
		var hitboxes = me.legendHitBoxes;

		// current position
		var drawLegendBox = function(x, y, legendItem) {
			if (isNaN(boxWidth) || boxWidth <= 0) {
				return;
			}

			// Set the ctx for the box
			ctx.save();

			var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
			ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
			ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
			ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
			ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
			ctx.lineWidth = lineWidth;
			ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);

			if (ctx.setLineDash) {
				// IE 9 and 10 do not support line dash
				ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
			}

			if (labelOpts && labelOpts.usePointStyle) {
				// Recalculate x and y for drawPoint() because its expecting
				// x and y to be center of figure (instead of top left)
				var radius = boxWidth * Math.SQRT2 / 2;
				var centerX = rtlHelper.xPlus(x, boxWidth / 2);
				var centerY = y + fontSize / 2;

				// Draw pointStyle as legend symbol
				helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
			} else {
				// Draw box as legend symbol
				ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
				if (lineWidth !== 0) {
					ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
				}
			}

			ctx.restore();
		};

		var fillText = function(x, y, legendItem, textWidth) {
			var halfFontSize = fontSize / 2;
			var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
			var yMiddle = y + halfFontSize;

			ctx.fillText(legendItem.text, xLeft, yMiddle);

			if (legendItem.hidden) {
				// Strikethrough the text if hidden
				ctx.beginPath();
				ctx.lineWidth = 2;
				ctx.moveTo(xLeft, yMiddle);
				ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
				ctx.stroke();
			}
		};

		var alignmentOffset = function(dimension, blockSize) {
			switch (opts.align) {
			case 'start':
				return labelOpts.padding;
			case 'end':
				return dimension - blockSize;
			default: // center
				return (dimension - blockSize + labelOpts.padding) / 2;
			}
		};

		// Horizontal
		var isHorizontal = me.isHorizontal();
		if (isHorizontal) {
			cursor = {
				x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
				y: me.top + labelOpts.padding,
				line: 0
			};
		} else {
			cursor = {
				x: me.left + labelOpts.padding,
				y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
				line: 0
			};
		}

		helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);

		var itemHeight = fontSize + labelOpts.padding;
		helpers$1.each(me.legendItems, function(legendItem, i) {
			var textWidth = ctx.measureText(legendItem.text).width;
			var width = boxWidth + (fontSize / 2) + textWidth;
			var x = cursor.x;
			var y = cursor.y;

			rtlHelper.setWidth(me.minSize.width);

			// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
			// instead of me.right and me.bottom because me.width and me.height
			// may have been changed since me.minSize was calculated
			if (isHorizontal) {
				if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
					y = cursor.y += itemHeight;
					cursor.line++;
					x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
				}
			} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
				x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
				cursor.line++;
				y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
			}

			var realX = rtlHelper.x(x);

			drawLegendBox(realX, y, legendItem);

			hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
			hitboxes[i].top = y;

			// Fill the actual label
			fillText(realX, y, legendItem, textWidth);

			if (isHorizontal) {
				cursor.x += width + labelOpts.padding;
			} else {
				cursor.y += itemHeight;
			}
		});

		helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
	},

	/**
	 * @private
	 */
	_getLegendItemAt: function(x, y) {
		var me = this;
		var i, hitBox, lh;

		if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
			// See if we are touching one of the dataset boxes
			lh = me.legendHitBoxes;
			for (i = 0; i < lh.length; ++i) {
				hitBox = lh[i];

				if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
					// Touching an element
					return me.legendItems[i];
				}
			}
		}

		return null;
	},

	/**
	 * Handle an event
	 * @private
	 * @param {IEvent} event - The event to handle
	 */
	handleEvent: function(e) {
		var me = this;
		var opts = me.options;
		var type = e.type === 'mouseup' ? 'click' : e.type;
		var hoveredItem;

		if (type === 'mousemove') {
			if (!opts.onHover && !opts.onLeave) {
				return;
			}
		} else if (type === 'click') {
			if (!opts.onClick) {
				return;
			}
		} else {
			return;
		}

		// Chart event already has relative position in it
		hoveredItem = me._getLegendItemAt(e.x, e.y);

		if (type === 'click') {
			if (hoveredItem && opts.onClick) {
				// use e.native for backwards compatibility
				opts.onClick.call(me, e.native, hoveredItem);
			}
		} else {
			if (opts.onLeave && hoveredItem !== me._hoveredItem) {
				if (me._hoveredItem) {
					opts.onLeave.call(me, e.native, me._hoveredItem);
				}
				me._hoveredItem = hoveredItem;
			}

			if (opts.onHover && hoveredItem) {
				// use e.native for backwards compatibility
				opts.onHover.call(me, e.native, hoveredItem);
			}
		}
	}
});

function createNewLegendAndAttach(chart, legendOpts) {
	var legend = new Legend({
		ctx: chart.ctx,
		options: legendOpts,
		chart: chart
	});

	core_layouts.configure(chart, legend, legendOpts);
	core_layouts.addBox(chart, legend);
	chart.legend = legend;
}

var plugin_legend = {
	id: 'legend',

	/**
	 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
	 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
	 * the plugin, which one will be re-exposed in the chart.js file.
	 * https://github.com/chartjs/Chart.js/pull/2640
	 * @private
	 */
	_element: Legend,

	beforeInit: function(chart) {
		var legendOpts = chart.options.legend;

		if (legendOpts) {
			createNewLegendAndAttach(chart, legendOpts);
		}
	},

	beforeUpdate: function(chart) {
		var legendOpts = chart.options.legend;
		var legend = chart.legend;

		if (legendOpts) {
			helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

			if (legend) {
				core_layouts.configure(chart, legend, legendOpts);
				legend.options = legendOpts;
			} else {
				createNewLegendAndAttach(chart, legendOpts);
			}
		} else if (legend) {
			core_layouts.removeBox(chart, legend);
			delete chart.legend;
		}
	},

	afterEvent: function(chart, e) {
		var legend = chart.legend;
		if (legend) {
			legend.handleEvent(e);
		}
	}
};

var noop$2 = helpers$1.noop;

core_defaults._set('global', {
	title: {
		display: false,
		fontStyle: 'bold',
		fullWidth: true,
		padding: 10,
		position: 'top',
		text: '',
		weight: 2000         // by default greater than legend (1000) to be above
	}
});

/**
 * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
 */
var Title = core_element.extend({
	initialize: function(config) {
		var me = this;
		helpers$1.extend(me, config);

		// Contains hit boxes for each dataset (in dataset order)
		me.legendHitBoxes = [];
	},

	// These methods are ordered by lifecycle. Utilities then follow.

	beforeUpdate: noop$2,
	update: function(maxWidth, maxHeight, margins) {
		var me = this;

		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
		me.beforeUpdate();

		// Absorb the master measurements
		me.maxWidth = maxWidth;
		me.maxHeight = maxHeight;
		me.margins = margins;

		// Dimensions
		me.beforeSetDimensions();
		me.setDimensions();
		me.afterSetDimensions();
		// Labels
		me.beforeBuildLabels();
		me.buildLabels();
		me.afterBuildLabels();

		// Fit
		me.beforeFit();
		me.fit();
		me.afterFit();
		//
		me.afterUpdate();

		return me.minSize;

	},
	afterUpdate: noop$2,

	//

	beforeSetDimensions: noop$2,
	setDimensions: function() {
		var me = this;
		// Set the unconstrained dimension before label rotation
		if (me.isHorizontal()) {
			// Reset position before calculating rotation
			me.width = me.maxWidth;
			me.left = 0;
			me.right = me.width;
		} else {
			me.height = me.maxHeight;

			// Reset position before calculating rotation
			me.top = 0;
			me.bottom = me.height;
		}

		// Reset padding
		me.paddingLeft = 0;
		me.paddingTop = 0;
		me.paddingRight = 0;
		me.paddingBottom = 0;

		// Reset minSize
		me.minSize = {
			width: 0,
			height: 0
		};
	},
	afterSetDimensions: noop$2,

	//

	beforeBuildLabels: noop$2,
	buildLabels: noop$2,
	afterBuildLabels: noop$2,

	//

	beforeFit: noop$2,
	fit: function() {
		var me = this;
		var opts = me.options;
		var minSize = me.minSize = {};
		var isHorizontal = me.isHorizontal();
		var lineCount, textSize;

		if (!opts.display) {
			me.width = minSize.width = me.height = minSize.height = 0;
			return;
		}

		lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
		textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;

		me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
		me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
	},
	afterFit: noop$2,

	// Shared Methods
	isHorizontal: function() {
		var pos = this.options.position;
		return pos === 'top' || pos === 'bottom';
	},

	// Actually draw the title block on the canvas
	draw: function() {
		var me = this;
		var ctx = me.ctx;
		var opts = me.options;

		if (!opts.display) {
			return;
		}

		var fontOpts = helpers$1.options._parseFont(opts);
		var lineHeight = fontOpts.lineHeight;
		var offset = lineHeight / 2 + opts.padding;
		var rotation = 0;
		var top = me.top;
		var left = me.left;
		var bottom = me.bottom;
		var right = me.right;
		var maxWidth, titleX, titleY;

		ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
		ctx.font = fontOpts.string;

		// Horizontal
		if (me.isHorizontal()) {
			titleX = left + ((right - left) / 2); // midpoint of the width
			titleY = top + offset;
			maxWidth = right - left;
		} else {
			titleX = opts.position === 'left' ? left + offset : right - offset;
			titleY = top + ((bottom - top) / 2);
			maxWidth = bottom - top;
			rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
		}

		ctx.save();
		ctx.translate(titleX, titleY);
		ctx.rotate(rotation);
		ctx.textAlign = 'center';
		ctx.textBaseline = 'middle';

		var text = opts.text;
		if (helpers$1.isArray(text)) {
			var y = 0;
			for (var i = 0; i < text.length; ++i) {
				ctx.fillText(text[i], 0, y, maxWidth);
				y += lineHeight;
			}
		} else {
			ctx.fillText(text, 0, 0, maxWidth);
		}

		ctx.restore();
	}
});

function createNewTitleBlockAndAttach(chart, titleOpts) {
	var title = new Title({
		ctx: chart.ctx,
		options: titleOpts,
		chart: chart
	});

	core_layouts.configure(chart, title, titleOpts);
	core_layouts.addBox(chart, title);
	chart.titleBlock = title;
}

var plugin_title = {
	id: 'title',

	/**
	 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
	 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
	 * the plugin, which one will be re-exposed in the chart.js file.
	 * https://github.com/chartjs/Chart.js/pull/2640
	 * @private
	 */
	_element: Title,

	beforeInit: function(chart) {
		var titleOpts = chart.options.title;

		if (titleOpts) {
			createNewTitleBlockAndAttach(chart, titleOpts);
		}
	},

	beforeUpdate: function(chart) {
		var titleOpts = chart.options.title;
		var titleBlock = chart.titleBlock;

		if (titleOpts) {
			helpers$1.mergeIf(titleOpts, core_defaults.global.title);

			if (titleBlock) {
				core_layouts.configure(chart, titleBlock, titleOpts);
				titleBlock.options = titleOpts;
			} else {
				createNewTitleBlockAndAttach(chart, titleOpts);
			}
		} else if (titleBlock) {
			core_layouts.removeBox(chart, titleBlock);
			delete chart.titleBlock;
		}
	}
};

var plugins = {};
var filler = plugin_filler;
var legend = plugin_legend;
var title = plugin_title;
plugins.filler = filler;
plugins.legend = legend;
plugins.title = title;

/**
 * @namespace Chart
 */


core_controller.helpers = helpers$1;

// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
core_helpers();

core_controller._adapters = core_adapters;
core_controller.Animation = core_animation;
core_controller.animationService = core_animations;
core_controller.controllers = controllers;
core_controller.DatasetController = core_datasetController;
core_controller.defaults = core_defaults;
core_controller.Element = core_element;
core_controller.elements = elements;
core_controller.Interaction = core_interaction;
core_controller.layouts = core_layouts;
core_controller.platform = platform;
core_controller.plugins = core_plugins;
core_controller.Scale = core_scale;
core_controller.scaleService = core_scaleService;
core_controller.Ticks = core_ticks;
core_controller.Tooltip = core_tooltip;

// Register built-in scales

core_controller.helpers.each(scales, function(scale, type) {
	core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
});

// Load to register built-in adapters (as side effects)


// Loading built-in plugins

for (var k in plugins) {
	if (plugins.hasOwnProperty(k)) {
		core_controller.plugins.register(plugins[k]);
	}
}

core_controller.platform.initialize();

var src = core_controller;
if (typeof window !== 'undefined') {
	window.Chart = core_controller;
}

// DEPRECATIONS

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Chart
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 * @private
 */
core_controller.Chart = core_controller;

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Legend
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.Legend = plugins.legend._element;

/**
 * Provided for backward compatibility, not available anymore
 * @namespace Chart.Title
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.Title = plugins.title._element;

/**
 * Provided for backward compatibility, use Chart.plugins instead
 * @namespace Chart.pluginService
 * @deprecated since version 2.1.5
 * @todo remove at version 3
 * @private
 */
core_controller.pluginService = core_controller.plugins;

/**
 * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
 * effect, instead simply create/register plugins via plain JavaScript objects.
 * @interface Chart.PluginBase
 * @deprecated since version 2.5.0
 * @todo remove at version 3
 * @private
 */
core_controller.PluginBase = core_controller.Element.extend({});

/**
 * Provided for backward compatibility, use Chart.helpers.canvas instead.
 * @namespace Chart.canvasHelpers
 * @deprecated since version 2.6.0
 * @todo remove at version 3
 * @private
 */
core_controller.canvasHelpers = core_controller.helpers.canvas;

/**
 * Provided for backward compatibility, use Chart.layouts instead.
 * @namespace Chart.layoutService
 * @deprecated since version 2.7.3
 * @todo remove at version 3
 * @private
 */
core_controller.layoutService = core_controller.layouts;

/**
 * Provided for backward compatibility, not available anymore.
 * @namespace Chart.LinearScaleBase
 * @deprecated since version 2.8
 * @todo remove at version 3
 * @private
 */
core_controller.LinearScaleBase = scale_linearbase;

/**
 * Provided for backward compatibility, instead we should create a new Chart
 * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
 * @deprecated since version 2.8.0
 * @todo remove at version 3
 */
core_controller.helpers.each(
	[
		'Bar',
		'Bubble',
		'Doughnut',
		'Line',
		'PolarArea',
		'Radar',
		'Scatter'
	],
	function(klass) {
		core_controller[klass] = function(ctx, cfg) {
			return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
				type: klass.charAt(0).toLowerCase() + klass.slice(1)
			}));
		};
	}
);

return src;

})));
});

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

var _listCacheClear = listCacheClear;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

var eq_1 = eq;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_1(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

var _assocIndexOf = assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

var _listCacheDelete = listCacheDelete;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return _assocIndexOf(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

var _listCacheSet = listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = _listCacheClear;
ListCache.prototype['delete'] = _listCacheDelete;
ListCache.prototype.get = _listCacheGet;
ListCache.prototype.has = _listCacheHas;
ListCache.prototype.set = _listCacheSet;

var _ListCache = ListCache;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new _ListCache;
  this.size = 0;
}

var _stackClear = stackClear;

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

var _stackDelete = stackDelete;

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

var _stackGet = stackGet;

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

var _stackHas = stackHas;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal || freeSelf || Function('return this')();

var _root = root;

/** Built-in value references. */
var Symbol$1 = _root.Symbol;

var _Symbol = Symbol$1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

var _getRawTag = getRawTag;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$1.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

var _objectToString = objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag$1 && symToStringTag$1 in Object(value))
    ? _getRawTag(value)
    : _objectToString(value);
}

var _baseGetTag = baseGetTag;

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$1(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject$1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject_1(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = _baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction;

/** Used to detect overreaching core-js shims. */
var coreJsData = _root['__core-js_shared__'];

var _coreJsData = coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

var _isMasked = isMasked;

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

var _toSource = toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$2 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject_1(value) || _isMasked(value)) {
    return false;
  }
  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSource(value));
}

var _baseIsNative = baseIsNative;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = _getValue(object, key);
  return _baseIsNative(value) ? value : undefined;
}

var _getNative = getNative;

/* Built-in method references that are verified to be native. */
var Map = _getNative(_root, 'Map');

var _Map = Map;

/* Built-in method references that are verified to be native. */
var nativeCreate = _getNative(Object, 'create');

var _nativeCreate = nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
  this.size = 0;
}

var _hashClear = hashClear;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

var _hashDelete = hashDelete;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (_nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$3.call(data, key);
}

var _hashHas = hashHas;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

var _hashSet = hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = _hashClear;
Hash.prototype['delete'] = _hashDelete;
Hash.prototype.get = _hashGet;
Hash.prototype.has = _hashHas;
Hash.prototype.set = _hashSet;

var _Hash = Hash;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash,
    'map': new (_Map || _ListCache),
    'string': new _Hash
  };
}

var _mapCacheClear = mapCacheClear;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

var _isKeyable = isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return _isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

var _getMapData = getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = _getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

var _mapCacheDelete = mapCacheDelete;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return _getMapData(this, key).get(key);
}

var _mapCacheGet = mapCacheGet;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return _getMapData(this, key).has(key);
}

var _mapCacheHas = mapCacheHas;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = _getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

var _mapCacheSet = mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = _mapCacheClear;
MapCache.prototype['delete'] = _mapCacheDelete;
MapCache.prototype.get = _mapCacheGet;
MapCache.prototype.has = _mapCacheHas;
MapCache.prototype.set = _mapCacheSet;

var _MapCache = MapCache;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof _ListCache) {
    var pairs = data.__data__;
    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new _MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

var _stackSet = stackSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new _ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = _stackClear;
Stack.prototype['delete'] = _stackDelete;
Stack.prototype.get = _stackGet;
Stack.prototype.has = _stackHas;
Stack.prototype.set = _stackSet;

var _Stack = Stack;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED$2);
  return this;
}

var _setCacheAdd = setCacheAdd;

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

var _setCacheHas = setCacheHas;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new _MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
SetCache.prototype.has = _setCacheHas;

var _SetCache = SetCache;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

var _arraySome = arraySome;

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

var _cacheHas = cacheHas;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!_arraySome(other, function(othValue, othIndex) {
            if (!_cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

var _equalArrays = equalArrays;

/** Built-in value references. */
var Uint8Array = _root.Uint8Array;

var _Uint8Array = Uint8Array;

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

var _mapToArray = mapToArray;

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

var _setToArray = setToArray;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq_1(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = _mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
      convert || (convert = _setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$1;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

var _equalByTag = equalByTag;

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

var _arrayPush = arrayPush;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

var isArray_1 = isArray;

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
}

var _baseGetAllKeys = baseGetAllKeys;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

var _arrayFilter = arrayFilter;

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

var stubArray_1 = stubArray;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return _arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

var _getSymbols = getSymbols;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

var _baseTimes = baseTimes;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
}

var _baseIsArguments = baseIsArguments;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$6.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
  return isObjectLike_1(value) && hasOwnProperty$4.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

var isArguments_1 = isArguments;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

var stubFalse_1 = stubFalse;

var isBuffer_1 = createCommonjsModule$1(function (module, exports) {
/** Detect free variable `exports`. */
var freeExports =  exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? _root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse_1;

module.exports = isBuffer;
});

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

var _isIndex = isIndex;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
}

var isLength_1 = isLength;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$1 = '[object Map]',
    numberTag$1 = '[object Number]',
    objectTag = '[object Object]',
    regexpTag$1 = '[object RegExp]',
    setTag$1 = '[object Set]',
    stringTag$1 = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] =
typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag$1] =
typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag$1] = typedArrayTags[numberTag$1] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag$1] =
typedArrayTags[setTag$1] = typedArrayTags[stringTag$1] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike_1(value) &&
    isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
}

var _baseIsTypedArray = baseIsTypedArray;

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

var _baseUnary = baseUnary;

var _nodeUtil = createCommonjsModule$1(function (module, exports) {
/** Detect free variable `exports`. */
var freeExports =  exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && _freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;
});

/* Node.js helper references. */
var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

var isTypedArray_1 = isTypedArray;

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$7.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_1(value),
      isArg = !isArr && isArguments_1(value),
      isBuff = !isArr && !isArg && isBuffer_1(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? _baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$5.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           _isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

var _arrayLikeKeys = arrayLikeKeys;

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

  return value === proto;
}

var _isPrototype = isPrototype;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

var _overArg = overArg;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = _overArg(Object.keys, Object);

var _nativeKeys = nativeKeys;

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$9.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!_isPrototype(object)) {
    return _nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$6.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

var _baseKeys = baseKeys;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength_1(value.length) && !isFunction_1(value);
}

var isArrayLike_1 = isArrayLike;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
}

var keys_1 = keys;

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return _baseGetAllKeys(object, keys_1, _getSymbols);
}

var _getAllKeys = getAllKeys;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1;

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$a.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
      objProps = _getAllKeys(object),
      objLength = objProps.length,
      othProps = _getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$7.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

var _equalObjects = equalObjects;

/* Built-in method references that are verified to be native. */
var DataView = _getNative(_root, 'DataView');

var _DataView = DataView;

/* Built-in method references that are verified to be native. */
var Promise = _getNative(_root, 'Promise');

var _Promise = Promise;

/* Built-in method references that are verified to be native. */
var Set = _getNative(_root, 'Set');

var _Set = Set;

/* Built-in method references that are verified to be native. */
var WeakMap = _getNative(_root, 'WeakMap');

var _WeakMap = WeakMap;

/** `Object#toString` result references. */
var mapTag$2 = '[object Map]',
    objectTag$1 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$2 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';

var dataViewTag$2 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = _toSource(_DataView),
    mapCtorString = _toSource(_Map),
    promiseCtorString = _toSource(_Promise),
    setCtorString = _toSource(_Set),
    weakMapCtorString = _toSource(_WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = _baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
    (_Map && getTag(new _Map) != mapTag$2) ||
    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
    (_Set && getTag(new _Set) != setTag$2) ||
    (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
  getTag = function(value) {
    var result = _baseGetTag(value),
        Ctor = result == objectTag$1 ? value.constructor : undefined,
        ctorString = Ctor ? _toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$2;
        case mapCtorString: return mapTag$2;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$2;
        case weakMapCtorString: return weakMapTag$1;
      }
    }
    return result;
  };
}

var _getTag = getTag;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    objectTag$2 = '[object Object]';

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$b.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray_1(object),
      othIsArr = isArray_1(other),
      objTag = objIsArr ? arrayTag$1 : _getTag(object),
      othTag = othIsArr ? arrayTag$1 : _getTag(other);

  objTag = objTag == argsTag$2 ? objectTag$2 : objTag;
  othTag = othTag == argsTag$2 ? objectTag$2 : othTag;

  var objIsObj = objTag == objectTag$2,
      othIsObj = othTag == objectTag$2,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer_1(object)) {
    if (!isBuffer_1(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new _Stack);
    return (objIsArr || isTypedArray_1(object))
      ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
    var objIsWrapped = objIsObj && hasOwnProperty$8.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$8.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new _Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new _Stack);
  return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

var _baseIsEqualDeep = baseIsEqualDeep;

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
    return value !== value && other !== other;
  }
  return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

var _baseIsEqual = baseIsEqual;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return _baseIsEqual(value, other);
}

var isEqual_1 = isEqual;

var defineProperty = (function() {
  try {
    var func = _getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var _defineProperty$1 = defineProperty;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty$1) {
    _defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _baseAssignValue = baseAssignValue;

/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function arrayAggregator(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }
  return accumulator;
}

var _arrayAggregator = arrayAggregator;

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

var _createBaseFor = createBaseFor;

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = _createBaseFor();

var _baseFor = baseFor;

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && _baseFor(object, iteratee, keys_1);
}

var _baseForOwn = baseForOwn;

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike_1(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

var _createBaseEach = createBaseEach;

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = _createBaseEach(_baseForOwn);

var _baseEach = baseEach;

/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function baseAggregator(collection, setter, iteratee, accumulator) {
  _baseEach(collection, function(value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

var _baseAggregator = baseAggregator;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new _Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

var _baseIsMatch = baseIsMatch;

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject_1(value);
}

var _isStrictComparable = isStrictComparable;

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys_1(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, _isStrictComparable(value)];
  }
  return result;
}

var _getMatchData = getMatchData;

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

var _matchesStrictComparable = matchesStrictComparable;

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = _getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || _baseIsMatch(object, source, matchData);
  };
}

var _baseMatches = baseMatches;

/** `Object#toString` result references. */
var symbolTag$1 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag$1);
}

var isSymbol_1 = isSymbol;

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray_1(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol_1(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

var _isKey = isKey;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || _MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = _MapCache;

var memoize_1 = memoize;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize_1(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

var _memoizeCapped = memoizeCapped;

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = _memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var _stringToPath = stringToPath;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

var _arrayMap = arrayMap;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray_1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return _arrayMap(value, baseToString) + '';
  }
  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

var _baseToString = baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : _baseToString(value);
}

var toString_1 = toString;

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray_1(value)) {
    return value;
  }
  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
}

var _castPath = castPath;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol_1(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

var _toKey = toKey;

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = _castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[_toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

var _baseGet = baseGet;

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : _baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

var get_1 = get;

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

var _baseHasIn = baseHasIn;

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = _castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = _toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength_1(length) && _isIndex(key, length) &&
    (isArray_1(object) || isArguments_1(object));
}

var _hasPath = hasPath;

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && _hasPath(object, path, _baseHasIn);
}

var hasIn_1 = hasIn;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (_isKey(path) && _isStrictComparable(srcValue)) {
    return _matchesStrictComparable(_toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get_1(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn_1(object, path)
      : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
  };
}

var _baseMatchesProperty = baseMatchesProperty;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

var identity_1 = identity;

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

var _baseProperty = baseProperty;

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return _baseGet(object, path);
  };
}

var _basePropertyDeep = basePropertyDeep;

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
}

var property_1 = property;

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity_1;
  }
  if (typeof value == 'object') {
    return isArray_1(value)
      ? _baseMatchesProperty(value[0], value[1])
      : _baseMatches(value);
  }
  return property_1(value);
}

var _baseIteratee = baseIteratee;

/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter, initializer) {
  return function(collection, iteratee) {
    var func = isArray_1(collection) ? _arrayAggregator : _baseAggregator,
        accumulator = initializer ? initializer() : {};

    return func(collection, setter, _baseIteratee(iteratee), accumulator);
  };
}

var _createAggregator = createAggregator;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the last element responsible for generating the key. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * var array = [
 *   { 'dir': 'left', 'code': 97 },
 *   { 'dir': 'right', 'code': 100 }
 * ];
 *
 * _.keyBy(array, function(o) {
 *   return String.fromCharCode(o.code);
 * });
 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
 *
 * _.keyBy(array, 'dir');
 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
 */
var keyBy = _createAggregator(function(result, value, key) {
  _baseAssignValue(result, key, value);
});

var keyBy_1 = keyBy;

var es = createCommonjsModule$1(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Chart", {
  enumerable: true,
  get: function get() {
    return _chart["default"];
  }
});
exports.defaults = exports.Scatter = exports.Bubble = exports.Polar = exports.Radar = exports.HorizontalBar = exports.Bar = exports.Line = exports.Pie = exports.Doughnut = exports["default"] = void 0;

var _react = _interopRequireDefault(React__default);

var _propTypes = _interopRequireDefault(PropTypes__default);

var _chart = _interopRequireDefault(Chart);

var _isEqual = _interopRequireDefault(isEqual_1);

var _keyBy = _interopRequireDefault(keyBy_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NODE_ENV = typeof process !== 'undefined' && process.env && process.env.NODE_ENV;

var ChartComponent = /*#__PURE__*/function (_React$Component) {
  _inherits(ChartComponent, _React$Component);

  var _super = _createSuper(ChartComponent);

  function ChartComponent() {
    var _this;

    _classCallCheck(this, ChartComponent);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "handleOnClick", function (event) {
      var instance = _this.chartInstance;
      var _this$props = _this.props,
          getDatasetAtEvent = _this$props.getDatasetAtEvent,
          getElementAtEvent = _this$props.getElementAtEvent,
          getElementsAtEvent = _this$props.getElementsAtEvent,
          onElementsClick = _this$props.onElementsClick;
      getDatasetAtEvent && getDatasetAtEvent(instance.getDatasetAtEvent(event), event);
      getElementAtEvent && getElementAtEvent(instance.getElementAtEvent(event), event);
      getElementsAtEvent && getElementsAtEvent(instance.getElementsAtEvent(event), event);
      onElementsClick && onElementsClick(instance.getElementsAtEvent(event), event); // Backward compatibility
    });

    _defineProperty(_assertThisInitialized(_this), "ref", function (element) {
      _this.element = element;
    });

    _this.chartInstance = undefined;
    return _this;
  }

  _createClass(ChartComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderChart();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.props.redraw) {
        this.destroyChart();
        this.renderChart();
        return;
      }

      this.updateChart();
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var _this$props2 = this.props,
          redraw = _this$props2.redraw,
          type = _this$props2.type,
          options = _this$props2.options,
          plugins = _this$props2.plugins,
          legend = _this$props2.legend,
          height = _this$props2.height,
          width = _this$props2.width;

      if (nextProps.redraw === true) {
        return true;
      }

      if (height !== nextProps.height || width !== nextProps.width) {
        return true;
      }

      if (type !== nextProps.type) {
        return true;
      }

      if (!(0, _isEqual["default"])(legend, nextProps.legend)) {
        return true;
      }

      if (!(0, _isEqual["default"])(options, nextProps.options)) {
        return true;
      }

      var nextData = this.transformDataProp(nextProps);

      if (!(0, _isEqual["default"])(this.shadowDataProp, nextData)) {
        return true;
      }

      return !(0, _isEqual["default"])(plugins, nextProps.plugins);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.destroyChart();
    }
  }, {
    key: "transformDataProp",
    value: function transformDataProp(props) {
      var data = props.data;

      if (typeof data == 'function') {
        var node = this.element;
        return data(node);
      } else {
        return data;
      }
    } // Chart.js directly mutates the data.dataset objects by adding _meta proprerty
    // this makes impossible to compare the current and next data changes
    // therefore we memoize the data prop while sending a fake to Chart.js for mutation.
    // see https://github.com/chartjs/Chart.js/blob/master/src/core/core.controller.js#L615-L617

  }, {
    key: "memoizeDataProps",
    value: function memoizeDataProps() {
      if (!this.props.data) {
        return;
      }

      var data = this.transformDataProp(this.props);
      this.shadowDataProp = _objectSpread(_objectSpread({}, data), {}, {
        datasets: data.datasets && data.datasets.map(function (set) {
          return _objectSpread({}, set);
        })
      });
      this.saveCurrentDatasets(); // to remove the dataset metadata from this chart when the chart is destroyed

      return data;
    }
  }, {
    key: "checkDatasets",
    value: function checkDatasets(datasets) {
      var isDev = NODE_ENV !== 'production' && NODE_ENV !== 'prod';
      var usingCustomKeyProvider = this.props.datasetKeyProvider !== ChartComponent.getLabelAsKey;
      var multipleDatasets = datasets.length > 1;

      if (isDev && multipleDatasets && !usingCustomKeyProvider) {
        var shouldWarn = false;
        datasets.forEach(function (dataset) {
          if (!dataset.label) {
            shouldWarn = true;
          }
        });

        if (shouldWarn) {
          console.error('[react-chartjs-2] Warning: Each dataset needs a unique key. By default, the "label" property on each dataset is used. Alternatively, you may provide a "datasetKeyProvider" as a prop that returns a unique key.');
        }
      }
    }
  }, {
    key: "getCurrentDatasets",
    value: function getCurrentDatasets() {
      return this.chartInstance && this.chartInstance.config.data && this.chartInstance.config.data.datasets || [];
    }
  }, {
    key: "saveCurrentDatasets",
    value: function saveCurrentDatasets() {
      var _this2 = this;

      this.datasets = this.datasets || {};
      var currentDatasets = this.getCurrentDatasets();
      currentDatasets.forEach(function (d) {
        _this2.datasets[_this2.props.datasetKeyProvider(d)] = d;
      });
    }
  }, {
    key: "updateChart",
    value: function updateChart() {
      var _this3 = this;

      var options = this.props.options;
      var data = this.memoizeDataProps(this.props);
      if (!this.chartInstance) return;

      if (options) {
        this.chartInstance.options = _chart["default"].helpers.configMerge(this.chartInstance.options, options);
      } // Pipe datasets to chart instance datasets enabling
      // seamless transitions


      var currentDatasets = this.getCurrentDatasets();
      var nextDatasets = data.datasets || [];
      this.checkDatasets(currentDatasets);
      var currentDatasetsIndexed = (0, _keyBy["default"])(currentDatasets, this.props.datasetKeyProvider); // We can safely replace the dataset array, as long as we retain the _meta property
      // on each dataset.

      this.chartInstance.config.data.datasets = nextDatasets.map(function (next) {
        var current = currentDatasetsIndexed[_this3.props.datasetKeyProvider(next)];

        if (current && current.type === next.type && next.data) {
          // Be robust to no data. Relevant for other update mechanisms as in chartjs-plugin-streaming.
          // The data array must be edited in place. As chart.js adds listeners to it.
          current.data.splice(next.data.length);
          next.data.forEach(function (point, pid) {
            current.data[pid] = next.data[pid];
          });

          var _data = next.data,
              otherProps = _objectWithoutProperties(next, ["data"]); // Merge properties. Notice a weakness here. If a property is removed
          // from next, it will be retained by current and never disappears.
          // Workaround is to set value to null or undefined in next.


          return _objectSpread(_objectSpread({}, current), otherProps);
        } else {
          return next;
        }
      });

      var datasets = data.datasets,
          rest = _objectWithoutProperties(data, ["datasets"]);

      this.chartInstance.config.data = _objectSpread(_objectSpread({}, this.chartInstance.config.data), rest);
      this.chartInstance.update();
    }
  }, {
    key: "renderChart",
    value: function renderChart() {
      var _this$props3 = this.props,
          options = _this$props3.options,
          legend = _this$props3.legend,
          type = _this$props3.type,
          plugins = _this$props3.plugins;
      var node = this.element;
      var data = this.memoizeDataProps();

      if (typeof legend !== 'undefined' && !(0, _isEqual["default"])(ChartComponent.defaultProps.legend, legend)) {
        options.legend = legend;
      }

      this.chartInstance = new _chart["default"](node, {
        type: type,
        data: data,
        options: options,
        plugins: plugins
      });
    }
  }, {
    key: "destroyChart",
    value: function destroyChart() {
      if (!this.chartInstance) {
        return;
      } // Put all of the datasets that have existed in the chart back on the chart
      // so that the metadata associated with this chart get destroyed.
      // This allows the datasets to be used in another chart. This can happen,
      // for example, in a tabbed UI where the chart gets created each time the
      // tab gets switched to the chart and uses the same data).


      this.saveCurrentDatasets();
      var datasets = Object.values(this.datasets);
      this.chartInstance.config.data.datasets = datasets;
      this.chartInstance.destroy();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          height = _this$props4.height,
          width = _this$props4.width,
          id = _this$props4.id;
      return /*#__PURE__*/_react["default"].createElement("canvas", {
        ref: this.ref,
        height: height,
        width: width,
        id: id,
        onClick: this.handleOnClick
      });
    }
  }]);

  return ChartComponent;
}(_react["default"].Component);

_defineProperty(ChartComponent, "getLabelAsKey", function (d) {
  return d.label;
});

_defineProperty(ChartComponent, "propTypes", {
  data: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]).isRequired,
  getDatasetAtEvent: _propTypes["default"].func,
  getElementAtEvent: _propTypes["default"].func,
  getElementsAtEvent: _propTypes["default"].func,
  height: _propTypes["default"].number,
  legend: _propTypes["default"].object,
  onElementsClick: _propTypes["default"].func,
  options: _propTypes["default"].object,
  plugins: _propTypes["default"].arrayOf(_propTypes["default"].object),
  redraw: _propTypes["default"].bool,
  type: function type(props, propName, componentName) {
    if (!_chart["default"].controllers[props[propName]]) {
      return new Error('Invalid chart type `' + props[propName] + '` supplied to' + ' `' + componentName + '`.');
    }
  },
  width: _propTypes["default"].number,
  datasetKeyProvider: _propTypes["default"].func
});

_defineProperty(ChartComponent, "defaultProps", {
  legend: {
    display: true,
    position: 'bottom'
  },
  type: 'doughnut',
  height: 150,
  width: 300,
  redraw: false,
  options: {},
  datasetKeyProvider: ChartComponent.getLabelAsKey
});

var _default = ChartComponent;
exports["default"] = _default;

var Doughnut = /*#__PURE__*/function (_React$Component2) {
  _inherits(Doughnut, _React$Component2);

  var _super2 = _createSuper(Doughnut);

  function Doughnut() {
    _classCallCheck(this, Doughnut);

    return _super2.apply(this, arguments);
  }

  _createClass(Doughnut, [{
    key: "render",
    value: function render() {
      var _this4 = this;

      return /*#__PURE__*/_react["default"].createElement(ChartComponent, _extends({}, this.props, {
        ref: function ref(_ref) {
          return _this4.chartInstance = _ref && _ref.chartInstance;
        },
        type: "doughnut"
      }));
    }
  }]);

  return Doughnut;
}(_react["default"].Component);

exports.Doughnut = Doughnut;

var Pie = /*#__PURE__*/function (_React$Component3) {
  _inherits(Pie, _React$Component3);

  var _super3 = _createSuper(Pie);

  function Pie() {
    _classCallCheck(this, Pie);

    return _super3.apply(this, arguments);
  }

  _createClass(Pie, [{
    key: "render",
    value: function render() {
      var _this5 = this;

      return /*#__PURE__*/_react["default"].createElement(ChartComponent, _extends({}, this.props, {
        ref: function ref(_ref2) {
          return _this5.chartInstance = _ref2 && _ref2.chartInstance;
        },
        type: "pie"
      }));
    }
  }]);

  return Pie;
}(_react["default"].Component);

exports.Pie = Pie;

var Line = /*#__PURE__*/function (_React$Component4) {
  _inherits(Line, _React$Component4);

  var _super4 = _createSuper(Line);

  function Line() {
    _classCallCheck(this, Line);

    return _super4.apply(this, arguments);
  }

  _createClass(Line, [{
    key: "render",
    value: function render() {
      var _this6 = this;

      return /*#__PURE__*/_react["default"].createElement(ChartComponent, _extends({}, this.props, {
        ref: function ref(_ref3) {
          return _this6.chartInstance = _ref3 && _ref3.chartInstance;
        },
        type: "line"
      }));
    }
  }]);

  return Line;
}(_react["default"].Component);

exports.Line = Line;

var Bar = /*#__PURE__*/function (_React$Component5) {
  _inherits(Bar, _React$Component5);

  var _super5 = _createSuper(Bar);

  function Bar() {
    _classCallCheck(this, Bar);

    return _super5.apply(this, arguments);
  }

  _createClass(Bar, [{
    key: "render",
    value: function render() {
      var _this7 = this;

      return /*#__PURE__*/_react["default"].createElement(ChartComponent, _extends({}, this.props, {
        ref: function ref(_ref4) {
          return _this7.chartInstance = _ref4 && _ref4.chartInstance;
        },
        type: "bar"
      }));
    }
  }]);

  return Bar;
}(_react["default"].Component);

exports.Bar = Bar;

var HorizontalBar = /*#__PURE__*/function (_React$Component6) {
  _inherits(HorizontalBar, _React$Component6);

  var _super6 = _createSuper(HorizontalBar);

  function HorizontalBar() {
    _classCallCheck(this, HorizontalBar);

    return _super6.apply(this, arguments);
  }

  _createClass(HorizontalBar, [{
    key: "render",
    value: function render() {
      var _this8 = this;

      return /*#__PURE__*/_react["default"].createElement(ChartComponent, _extends({}, this.props, {
        ref: function ref(_ref5) {
          return _this8.chartInstance = _ref5 && _ref5.chartInstance;
        },
        type: "horizontalBar"
      }));
    }
  }]);

  return HorizontalBar;
}(_react["default"].Component);

exports.HorizontalBar = HorizontalBar;

var Radar = /*#__PURE__*/function (_React$Component7) {
  _inherits(Radar, _React$Component7);

  var _super7 = _createSuper(Radar);

  function Radar() {
    _classCallCheck(this, Radar);

    return _super7.apply(this, arguments);
  }

  _createClass(Radar, [{
    key: "render",
    value: function render() {
      var _this9 = this;

      return /*#__PURE__*/_react["default"].createElement(ChartComponent, _extends({}, this.props, {
        ref: function ref(_ref6) {
          return _this9.chartInstance = _ref6 && _ref6.chartInstance;
        },
        type: "radar"
      }));
    }
  }]);

  return Radar;
}(_react["default"].Component);

exports.Radar = Radar;

var Polar = /*#__PURE__*/function (_React$Component8) {
  _inherits(Polar, _React$Component8);

  var _super8 = _createSuper(Polar);

  function Polar() {
    _classCallCheck(this, Polar);

    return _super8.apply(this, arguments);
  }

  _createClass(Polar, [{
    key: "render",
    value: function render() {
      var _this10 = this;

      return /*#__PURE__*/_react["default"].createElement(ChartComponent, _extends({}, this.props, {
        ref: function ref(_ref7) {
          return _this10.chartInstance = _ref7 && _ref7.chartInstance;
        },
        type: "polarArea"
      }));
    }
  }]);

  return Polar;
}(_react["default"].Component);

exports.Polar = Polar;

var Bubble = /*#__PURE__*/function (_React$Component9) {
  _inherits(Bubble, _React$Component9);

  var _super9 = _createSuper(Bubble);

  function Bubble() {
    _classCallCheck(this, Bubble);

    return _super9.apply(this, arguments);
  }

  _createClass(Bubble, [{
    key: "render",
    value: function render() {
      var _this11 = this;

      return /*#__PURE__*/_react["default"].createElement(ChartComponent, _extends({}, this.props, {
        ref: function ref(_ref8) {
          return _this11.chartInstance = _ref8 && _ref8.chartInstance;
        },
        type: "bubble"
      }));
    }
  }]);

  return Bubble;
}(_react["default"].Component);

exports.Bubble = Bubble;

var Scatter = /*#__PURE__*/function (_React$Component10) {
  _inherits(Scatter, _React$Component10);

  var _super10 = _createSuper(Scatter);

  function Scatter() {
    _classCallCheck(this, Scatter);

    return _super10.apply(this, arguments);
  }

  _createClass(Scatter, [{
    key: "render",
    value: function render() {
      var _this12 = this;

      return /*#__PURE__*/_react["default"].createElement(ChartComponent, _extends({}, this.props, {
        ref: function ref(_ref9) {
          return _this12.chartInstance = _ref9 && _ref9.chartInstance;
        },
        type: "scatter"
      }));
    }
  }]);

  return Scatter;
}(_react["default"].Component);

exports.Scatter = Scatter;
var defaults = _chart["default"].defaults;
exports.defaults = defaults;
});

var Chart$1 = /*@__PURE__*/getDefaultExportFromCjs(es);

BarChart.propTypes = {
  chartDataset: PropTypes__default.object.isRequired,
  chartLabels: PropTypes__default.arrayOf(PropTypes__default.string).isRequired,
  chartMaxValue: PropTypes__default.number.isRequired,
  barBackgroundColor: PropTypes__default.string,
  barThickness: PropTypes__default.number,
  maintainAspectRatio: PropTypes__default.bool,
  displayLegend: PropTypes__default.bool,
  displayGridLines: PropTypes__default.bool,
  xAxesFontSize: PropTypes__default.number,
  yAxesFontSize: PropTypes__default.number,
  yAxisTicksCallback: PropTypes__default.func,
  defaultTicksStepSize: PropTypes__default.number,
  defaultTicksMaxValue: PropTypes__default.number
};
function BarChart({
  chartDataset,
  chartDatasets,
  chartLabels,
  chartMaxValue,
  barBackgroundColor = 'lightgrey',
  barThickness = 8,
  maintainAspectRatio = false,
  displayLegend = false,
  displayGridLines = false,
  xAxesFontSize = 10,
  yAxesFontSize = 10,
  yAxisTicksCallback = v => v,
  defaultTicksStepSize = 500,
  defaultTicksMaxValue = 20000,
  ...props
}) {
  if (chartDataset) {
    chartDatasets = [chartDataset];
  }

  const data = {
    labels: chartLabels,
    datasets: [...chartDatasets, // A second dataset is needed to display those grey bars as background. The values are the difference between the maximum and the real value
    {
      label: 'greyBars',
      barThickness,
      backgroundColor: barBackgroundColor,
      data: chartDataset.data.map(val => chartMaxValue - val)
    }]
  };
  const options = {
    // Disable maintain aspect ratio makes the chart take into consideration the container's height/width
    maintainAspectRatio,
    legend: {
      // Enable/disable the box located at the top that displays the name and color of each dataset
      display: displayLegend
    },
    tooltips: {
      // Enable tooltip just for the real values dataset, and not for the grey bars
      filter: function (tooltipItem) {
        return tooltipItem.datasetIndex === 0;
      }
    },
    scales: {
      xAxes: [{
        // Stacked is needed to display the grey bars
        stacked: true,
        gridLines: {
          display: displayGridLines
        },
        ticks: {
          fontSize: xAxesFontSize
        }
      }],
      yAxes: [{
        // Stacked is needed to display the grey bars
        stacked: true,
        ticks: {
          beginAtZero: true,
          // Ticks for the Y axis (the actual values of the chart) are calculated dinamically based on the chartMaxValue
          stepSize: chartMaxValue > 0 ? chartMaxValue / 4 : defaultTicksStepSize,
          max: chartMaxValue > 0 ? chartMaxValue : defaultTicksMaxValue,
          // The callback function allows to change the display ticks values
          callback: yAxisTicksCallback,
          fontSize: yAxesFontSize
        },
        gridLines: {
          display: displayGridLines
        }
      }]
    }
  };
  return (
    /*#__PURE__*/
    // Height/width properties must be added to an outer container, and not to the chart component itself
    React__default.createElement(core.Box, props, /*#__PURE__*/React__default.createElement(Chart$1, {
      type: "bar",
      data: data,
      options: options
    }))
  );
}

ConditionalWrapper.propTypes = {
  condition: PropTypes__default.bool,
  wrapper: PropTypes__default.func.isRequired
};
function ConditionalWrapper({
  condition,
  wrapper,
  children
}) {
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, condition ? wrapper(children) : children);
}

function IconWithCircle({
  children,
  backgroundColor,
  height = 16,
  width = 16,
  ...props
}) {
  return /*#__PURE__*/React__default.createElement(core.Box, {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: "100px",
    height: height,
    width: width,
    bgcolor: backgroundColor
  }, /*#__PURE__*/React__default.createElement("i", props, children));
}

function InputDate({
  name,
  id,
  rules,
  control,
  ...props
}) {
  const _props = { ...props
  },
        error = _props.error;
  return /*#__PURE__*/React__default.createElement(pickers.MuiPickersUtilsProvider, {
    utils: DateFnsUtils
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: name,
    id: id,
    control: control,
    rules: rules,
    render: controllerProps => /*#__PURE__*/React__default.createElement("div", {
      style: {
        position: "relative"
      }
    }, /*#__PURE__*/React__default.createElement(pickers.DatePicker, _extends({}, props, {
      value: controllerProps.value || null,
      onChange: e => controllerProps.onChange(e)
    })), /*#__PURE__*/React__default.createElement(core.Typography, {
      color: "textPrimary"
    }, /*#__PURE__*/React__default.createElement("i", {
      className: "material-icons",
      style: {
        position: "absolute",
        bottom: error ? "40px" : "17px",
        fontSize: "17px",
        right: "-5px"
      }
    }, "calendar_today")))
  }));
}

ResponsiveDialog.propTypes = {
  loading: PropTypes__default.bool,
  displayCondition: PropTypes__default.bool,
  fullScreenCondition: PropTypes__default.bool,
  onClose: PropTypes__default.func.isRequired
};
function ResponsiveDialog({
  children,
  loading = false,
  displayCondition,
  fullScreenCondition,
  onClose,
  ...props
}) {
  return /*#__PURE__*/React__default.createElement(ConditionalWrapper, {
    condition: displayCondition,
    wrapper: children => /*#__PURE__*/React__default.createElement(core.Dialog, _extends({
      fullScreen: fullScreenCondition
    }, props), children)
  }, !loading && displayCondition && /*#__PURE__*/React__default.createElement(core.IconButton, {
    "aria-label": "close",
    onClick: onClose,
    style: {
      position: "absolute",
      right: ".5rem",
      top: "1rem"
    }
  }, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      verticalAlign: "text-top",
      fontSize: "24px"
    }
  }, "close")), children);
}

/* WIP!! WARNING*/

function NemuruSnackbar({
  open,
  autoHide = false,
  onClose,
  message,
  errorObject = {},
  onClick = () => {},
  level,
  errorSubMessage,
  ...props
}) {
  return /*#__PURE__*/React__default.createElement(core.Snackbar, _extends({
    open: open,
    autoHideDuration: autoHide ? 5000 : 999999999,
    onClose: autoHide ? onClose : () => {},
    message: !level && message,
    onClick: onClick
  }, props), level && /*#__PURE__*/React__default.createElement(Alert, {
    severity: level,
    action: !autoHide && /*#__PURE__*/React__default.createElement(core.IconButton, {
      "aria-label": "close",
      color: "inherit",
      size: "small",
      onClick: onClose
    }, /*#__PURE__*/React__default.createElement("i", {
      className: "material-icons",
      style: {
        verticalAlign: "text-top",
        fontSize: "24px"
      }
    }, "close"))
  }, /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("strong", null, message)), level === "error" && /*#__PURE__*/React__default.createElement("small", null, errorSubMessage)));
}

function TextValue(props) {
  const tId = props.tId,
        lowerCased = props.lowerCased,
        upperCased = props.upperCased,
        dynamicDataTexts = props.dynamicDataTexts,
        capitalized = props.capitalized,
        trueResult = props.trueResult,
        typography = props.typography,
        strong = props.strong,
        small = props.small,
        translation = props.translation;

  const _useTheme = useTheme(),
        themePalette = _useTheme.palette;

  if (!translation && trueResult) {
    return null;
  }

  let result = translation || tId;
  if (upperCased) result = formatSnakecaseToSpaces(result).toUpperCase();
  if (lowerCased || !translation && tId) result = formatSnakecaseToSpaces(result).toLowerCase();
  if (capitalized || !translation && tId) result = result.charAt(0).toUpperCase() + result.slice(1);

  if (dynamicDataTexts) {
    const dynamicDataTextsArray = Array.isArray(dynamicDataTexts) ? dynamicDataTexts : [dynamicDataTexts];

    for (let i = 0; i <= dynamicDataTextsArray.length - 1; i += 1) {
      result = result.replace(`$v${i + 1}`, dynamicDataTextsArray[i]);
    }
  }

  if (strong) result = /*#__PURE__*/React__default.createElement("strong", null, result);
  if (small) result = /*#__PURE__*/React__default.createElement("small", null, result);
  let typoOptions = typography;
  let style = {};

  if (typoOptions) {
    if (typoOptions.color === "title") {
      // "title" is not a valid value for Typography's prop "color", so we need to pass it as style object
      delete typoOptions.color;
      style = { ...style,
        color: themePalette.text.title
      };
    }

    result = /*#__PURE__*/React__default.createElement(core.Typography, _extends({}, typoOptions, {
      style: style
    }), result);
  }

  return result;
}

BackButton.propTypes = {
  onClick: PropTypes__default.func.isRequired,
  mobileIconFontSize: PropTypes__default.string
};
function BackButton({
  children,
  onClick,
  mobileIconFontSize = "36px",
  className,
  ...props
}) {
  const isScreenXs = core.useMediaQuery(styles.useTheme().breakpoints.down("xs"));
  const propClassName = className ? className : "";
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, isScreenXs ? /*#__PURE__*/React__default.createElement(core.IconButton, _extends({
    onClick: onClick,
    className: "p-0"
  }, props, {
    style: {
      position: "absolute",
      left: "1.25rem"
    }
  }), /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      verticalAlign: "text-top",
      fontSize: mobileIconFontSize
    }
  }, "chevron_left")) : /*#__PURE__*/React__default.createElement(core.Button, _extends({
    size: "small",
    variant: "outlined",
    onClick: onClick
  }, props, {
    className: `${propClassName} min-width-button`
  }), children, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons ml-2",
    style: {
      verticalAlign: "text-top",
      fontSize: "15px"
    }
  }, "chevron_left")));
}

function AccentIcon({
  type,
  size,
  style,
  iconName
}) {
  const defaultSize = 34;
  const iconSize = size || defaultSize;
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      marginLeft: `-${iconSize}px`,
      height: `${iconSize}px`,
      ...style
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    color: "secondary"
  }, /*#__PURE__*/React__default.createElement("i", {
    className: `icon-${iconName(type)} mr1`,
    style: {
      verticalAlign: "sub",
      fontSize: `${iconSize}px`,
      position: "absolute"
    }
  })), /*#__PURE__*/React__default.createElement(core.Typography, {
    color: "primary"
  }, /*#__PURE__*/React__default.createElement("i", {
    className: `icon-${iconName(type)}_accent mr1`,
    style: {
      verticalAlign: "sub",
      fontSize: `${iconSize}px`,
      position: "absolute"
    }
  })));
}
AccentIcon.propTypes = {
  size: PropTypes__default.number,
  type: PropTypes__default.string.isRequired
};

function ResponsiveButton({
  onClick,
  variant = "outlined",
  color = "secondary",
  size = "small",
  className,
  text,
  iconName,
  isMobile,
  ...props
}) {
  const propClassName = className ? className : "";
  return /*#__PURE__*/React__default.createElement(core.Button, _extends({
    size: size,
    variant: variant,
    color: color,
    onClick: onClick
  }, props, {
    className: `${propClassName} ${isMobile ? "" : "min-width-button"}`
  }), /*#__PURE__*/React__default.createElement(core.Box, {
    display: "flex",
    alignItems: "center"
  }, !isMobile && text, /*#__PURE__*/React__default.createElement("i", {
    className: `material-icons ${isMobile ? "" : "ml-2"}`,
    style: {
      verticalAlign: "text-top",
      fontSize: "15px"
    }
  }, iconName)));
}

PasswordTextfield.propTypes = {
  showPassword: PropTypes__default.bool,
  handleClickShowPassword: PropTypes__default.func.isRequired,
  iconColor: PropTypes__default.string,
  showPasswordStrengthMeter: PropTypes__default.bool,
  passwordStrengthLevel: PropTypes__default.number,
  onChange: PropTypes__default.func
};
function PasswordTextfield({
  showPassword,
  handleClickShowPassword = () => {},
  iconColor = 'inherit',
  showPasswordStrengthMeter = false,
  passwordStrengthLevel = 0,
  onChange = () => {},
  children,
  ...props
}) {
  const themePalette = core.useTheme().palette;
  const STRENGTH_LEVELS = {
    0: {
      color: themePalette.grey.A100
    },
    1: {
      color: themePalette.error.main
    },
    2: {
      color: themePalette.warning.main
    },
    3: {
      color: themePalette.success.main
    },
    4: {
      color: themePalette.success.main
    }
  };

  const PasswordStrengthMeterBar = ({
    barLevel,
    ...props
  }) => {
    const backgroundColor = passwordStrengthLevel > barLevel ? STRENGTH_LEVELS[passwordStrengthLevel].color : STRENGTH_LEVELS[0].color;
    return /*#__PURE__*/React__default.createElement(core.Box, _extends({}, props, {
      width: "25%",
      height: "7px",
      borderRadius: "3px",
      style: {
        backgroundColor
      }
    }));
  };

  return /*#__PURE__*/React__default.createElement(core.Box, null, /*#__PURE__*/React__default.createElement(core.TextField, _extends({
    style: { ...props.style,
      marginBottom: '0'
    }
  }, props, {
    type: showPassword ? 'text' : 'password',
    InputProps: {
      endAdornment: /*#__PURE__*/React__default.createElement(core.IconButton, {
        "aria-label": "toggle password visibility",
        onClick: handleClickShowPassword,
        edge: "end"
      }, /*#__PURE__*/React__default.createElement("i", {
        className: "material-icons",
        style: {
          verticalAlign: 'text-top',
          fontSize: '24px',
          color: iconColor
        }
      }, showPassword ? 'visibility_off' : 'visibility'))
    },
    onChange: onChange
  })), showPasswordStrengthMeter && /*#__PURE__*/React__default.createElement(core.Box, {
    className: "p-1 ml-1",
    width: "100%",
    borderRadius: "3px",
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  }, /*#__PURE__*/React__default.createElement(PasswordStrengthMeterBar, {
    className: "mr-1",
    barLevel: 0
  }), /*#__PURE__*/React__default.createElement(PasswordStrengthMeterBar, {
    className: "mr-1",
    barLevel: 1
  }), /*#__PURE__*/React__default.createElement(PasswordStrengthMeterBar, {
    className: "mr-1",
    barLevel: 2
  }), /*#__PURE__*/React__default.createElement(PasswordStrengthMeterBar, {
    barLevel: 3
  })));
}

const PricingProduct = {
  auto_loan: "auto_loan",
  consumer_loan: "consumer_loan"
};
const PricingRangeType = {
  period: "period",
  principal: "principal"
};
function Pricing(props) {
  const _useTheme = useTheme(),
        themePalette = _useTheme.palette,
        customBorderRadius = _useTheme.customBorderRadius;

  const pricingData = props.pricingData;
  return /*#__PURE__*/React__default.createElement(core.Paper, {
    elevation: 6
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 3
  }, /*#__PURE__*/React__default.createElement("div", {
    style: {
      flexGrow: 1
    }
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row",
    spacing: 2,
    alignItems: "center"
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    sm: 12,
    md: 4
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    sm: 3,
    md: 6
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    mt: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row",
    alignItems: "center",
    spacing: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      color: themePalette.primary.main,
      width: 24
    }
  }, `money`)), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary"
  }, "Importe"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, `${formatNumber(pricingData.range_principal_min)} a ${formatMoney(pricingData.range_principal_max, 0)}`))))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    sm: 3,
    md: 6
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    mt: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row",
    alignItems: "center",
    spacing: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      color: themePalette.primary.main,
      width: 24
    }
  }, `date_range`)), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary"
  }, "Plazo"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, `${pricingData.range_period_min} a ${pricingData.range_period_max} meses`))))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    sm: 3,
    md: 6
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    mt: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row",
    alignItems: "center",
    spacing: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      color: themePalette.primary.main,
      width: 24
    }
  }, `account_circle_outlined`)), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary"
  }, "Comisi\xF3n apertura"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, pricingData.range_setup_fee_max === undefined ? "-" : pricingData.range_setup_fee_max > 0 && pricingData.range_setup_fee_max > pricingData.range_setup_fee_min ? `desde ${formatPercent(pricingData.range_setup_fee_min)}` : `${formatPercent(pricingData.range_setup_fee_min)}`))))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    sm: 3,
    md: 6
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    mt: 1
  }, pricingData.range_type === PricingRangeType.period && /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row",
    alignItems: "center",
    spacing: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      color: themePalette.primary.main,
      width: 24
    }
  }, `account_circle_outlined`)), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary"
  }, "Inter\xE9s cliente"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, pricingData.product === PricingProduct.auto_loan ? `${formatPercent(pricingData.ranges[0].annual_interest)}` : `${formatPercent(0)}`))), pricingData.range_type === PricingRangeType.principal && /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row",
    alignItems: "center",
    spacing: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      color: themePalette.primary.main,
      width: 24
    }
  }, `storefront_outlined`)), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary"
  }, "Coste soportado"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, pricingData.range_merchant_discount_percentage_max === undefined ? "-" : pricingData.range_merchant_discount_percentage_max > 0 ? `desde ${formatPercent(pricingData.range_merchant_discount_percentage_min)}` : `${formatPercent(pricingData.range_merchant_discount_percentage_min)}`))))), pricingData.product === PricingProduct.auto_loan && /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    sm: 3,
    md: 6
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    mt: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row",
    alignItems: "center",
    spacing: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      color: themePalette.primary.main,
      width: 24
    }
  }, `drive_eta`)), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary"
  }, "Antig\xFCedad veh\xEDculo"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, `${pricingData.range_auto_registration_min} a ${pricingData.range_auto_registration_max} años`))))), pricingData.product === PricingProduct.auto_loan && /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    sm: 3,
    md: 6
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    mt: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row",
    alignItems: "center",
    spacing: 1
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      color: themePalette.primary.main,
      width: 24
    }
  }, `security`)), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary"
  }, "Seguro"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, pricingData.insurance_value ? pricingData.insurance_value : "Sin seguro"))))))), pricingData.range_type === PricingRangeType.principal && /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    sm: 12,
    md: 8
  }, /*#__PURE__*/React__default.createElement(core.Box, null, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row"
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    style: {
      flexGrow: 1,
      maxWidth: 120
    }
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "column"
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[300],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, "Importe"))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[200],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, "Inter\xE9s cliente"))))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    style: {
      flexGrow: 1
    }
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row"
  }, pricingData.ranges.map(range => /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    key: range.range_start,
    style: {
      flexGrow: 1
    }
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "column"
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[300],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, `${formatNumber(range.range_start)} - ${formatNumber(range.range_end)}`))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[200],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    align: "center",
    style: {
      fontWeight: 700
    }
  }, formatPercent(range.annual_interest)))))))))))), pricingData.range_type === PricingRangeType.period && /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    sm: 12,
    md: 8
  }, /*#__PURE__*/React__default.createElement(core.Box, null, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row"
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    style: {
      flexGrow: 1,
      maxWidth: 120
    }
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "column"
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[300],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, "Plazo"))), pricingData.product === PricingProduct.consumer_loan && /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[200],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, "Coste soportado"))), pricingData.product === PricingProduct.auto_loan && pricingData.range_merchant_fee_max > 0 && /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[200],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, "Comisi\xF3n"))))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    style: {
      flexGrow: 1
    }
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "row"
  }, pricingData.ranges.map(range => /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    key: range.range_start,
    style: {
      flexGrow: 1
    }
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    direction: "column"
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[300],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    style: {
      fontWeight: 700
    }
  }, `${formatNumber(range.range_start)} - ${formatNumber(range.range_end)}`))), pricingData.product === PricingProduct.consumer_loan && /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[200],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    align: "center",
    style: {
      fontWeight: 700
    }
  }, formatPercent(range.merchant_discount_percentage)))), pricingData.product === PricingProduct.auto_loan && pricingData.range_merchant_fee_max > 0 && /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    p: 0.5,
    style: {
      margin: 1,
      height: 30,
      backgroundColor: themePalette.grey[200],
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: customBorderRadius.paper > 10 ? 5 : customBorderRadius.paper
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    color: "secondary",
    align: "center",
    style: {
      fontWeight: 700
    }
  }, formatPercent(range.merchant_fee_value))))))))))))))));
}
Pricing.propTypes = {// options: PropTypes.object,
  // subCircleClassName: PropTypes.string,
  // subCircleValue: PropTypes.number,
  // value: PropTypes.number.isRequired
};

function SingleLinearStatBar(props) {
  const i = props.i,
        maximumValueForFilter = props.maximumValueForFilter,
        formatAmountForDisplay = props.formatAmountForDisplay,
        filterMetrics = props.filterMetrics,
        agent = props.agent,
        selectFilterSalesChannel = props.selectFilterSalesChannel,
        filterSalesChannel = props.filterSalesChannel,
        amountToShowPerChannel = props.amountToShowPerChannel,
        maximumReferenceForChannel = props.maximumReferenceForChannel,
        amountToShowPerAgent = props.amountToShowPerAgent,
        maximumReferenceForAgents = props.maximumReferenceForAgents,
        isScreenXs = props.isScreenXs,
        maximumValueForSelectedAgent = props.maximumValueForSelectedAgent;
  var percentage = 0;
  var linearBar = 0;

  const calculatePercentage = (value, maxReference, maxValue, maxAgent) => {
    if (filterSalesChannel !== '' && amountToShowPerAgent !== undefined) {
      if (maxReference === 0) {
        linearBar = 0;
        percentage = 0;
      } else {
        const calcLinearBar = value / maxReference * 100;
        const calcPercentage = value / maxAgent * 100;
        linearBar = calcLinearBar;
        percentage = calcPercentage;
      }
    } else {
      const calcLinearBar = value / maxReference * 100;
      const calcPercentage = value / maxValue * 100;
      linearBar = calcLinearBar;
      percentage = calcPercentage;
    }
  };

  switch (true) {
    case amountToShowPerChannel !== undefined && filterMetrics === 'AMOUNT':
      calculatePercentage(amountToShowPerChannel.amount, maximumReferenceForChannel.amount, maximumValueForFilter.amount);
      break;

    case amountToShowPerAgent !== undefined && maximumValueForSelectedAgent !== undefined && filterMetrics === 'AMOUNT':
      calculatePercentage(amountToShowPerAgent.amount, maximumReferenceForAgents.amount, maximumValueForFilter.amount, maximumValueForSelectedAgent.amount);
      break;

    case amountToShowPerChannel !== undefined && filterMetrics === 'OPERATIONS':
      calculatePercentage(amountToShowPerChannel.number, maximumReferenceForChannel.number, maximumValueForFilter.number);
      break;

    case amountToShowPerAgent !== undefined && maximumValueForSelectedAgent !== undefined && filterMetrics === 'OPERATIONS':
      calculatePercentage(amountToShowPerAgent.number, maximumReferenceForAgents.number, maximumValueForFilter.number, maximumValueForSelectedAgent.number);
      break;
  }

  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(core.Box, {
    className: "appear-anim",
    component: "span",
    display: "flex",
    alignItems: "center",
    width: 1,
    key: i
  }, amountToShowPerChannel !== undefined ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(core.Grid, {
    className: filterSalesChannel === amountToShowPerChannel.channelDescription ? 'stat-results selected' : filterSalesChannel === '' ? 'stat-results' : 'stat-results opacity',
    container: true,
    onClick: () => selectFilterSalesChannel(amountToShowPerChannel.channelDescription, i)
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    className: "flex-icons",
    item: true,
    xs: 1
  }, /*#__PURE__*/React__default.createElement("i", {
    className: "material-icons",
    style: {
      height: 24
    }
  }, nemuruComponents.getIconName(amountToShowPerChannel.channelType))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    xs: 4,
    sm: 2
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    className: "text-overflow"
  }, amountToShowPerChannel.channelDescription)), amountToShowPerChannel !== undefined ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(core.Grid, {
    className: "stat-results",
    item: true,
    xs: 7,
    sm: 4
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    className: "stat-strong-value",
    xs: 7
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    className: "amount"
  }, /*#__PURE__*/React__default.createElement("strong", null, filterMetrics === 'AMOUNT' ? formatAmountForDisplay(amountToShowPerChannel.amount) : amountToShowPerChannel.number))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    xs: 5,
    className: 'stat-strong-value'
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    className: "percentage"
  }, percentage !== 100 ? `${percentage.toFixed(1)}%` : `${percentage.toFixed(0)}%`))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    xs: 12,
    sm: 5
  }, /*#__PURE__*/React__default.createElement(LinearProgress, {
    className: isScreenXs ? filterSalesChannel == amountToShowPerChannel.channelDescription ? 'stat-bar thin selected' : 'stat-bar thin' : filterSalesChannel == amountToShowPerChannel.channelDescription ? 'stat-bar selected' : 'stat-bar',
    variant: "determinate",
    value: linearBar
  }))) : null)) : amountToShowPerAgent !== undefined && filterSalesChannel === '' || amountToShowPerAgent !== undefined && agent.agentLocation === filterSalesChannel ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(core.Grid, {
    className: "stat-results",
    container: true,
    key: i,
    style: {
      cursor: 'default'
    }
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    xs: 5,
    sm: 3
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    className: "text-overflow"
  }, agent.agentName)), /*#__PURE__*/React__default.createElement(core.Grid, {
    className: "stat-results",
    style: {
      cursor: 'default'
    },
    item: true,
    xs: 7,
    sm: 4
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    className: "stat-strong-value",
    xs: 7
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    className: "amount"
  }, /*#__PURE__*/React__default.createElement("strong", null, filterMetrics === 'AMOUNT' ? formatAmountForDisplay(amountToShowPerAgent.amount) : amountToShowPerAgent.number))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    xs: 5,
    className: 'stat-strong-value'
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    className: "percentage"
  }, percentage !== 100 ? `${percentage.toFixed(1)}%` : `${percentage.toFixed(0)}%`))), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    xs: 12,
    sm: 5
  }, /*#__PURE__*/React__default.createElement(LinearProgress, {
    className: isScreenXs ? 'stat-bar thin' : 'stat-bar',
    variant: "determinate",
    value: linearBar
  })))) : null));
}

function InformationMessage({
  variant,
  isScreenXs,
  messageContent
}) {
  const _useTheme = styles.useTheme(),
        themePalette = _useTheme.palette;

  return variant && /*#__PURE__*/React__default.createElement(core.Box, {
    container: true,
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    fullWidth: true
  }, /*#__PURE__*/React__default.createElement(core.Box, {
    style: {
      top: isScreenXs ? 16 : 24,
      position: "relative"
    }
  }, /*#__PURE__*/React__default.createElement(nemuruComponents.IconWithCircle, {
    backgroundColor: themePalette[variant.type].main,
    height: isScreenXs ? 26 : 40,
    width: isScreenXs ? 26 : 40,
    className: "material-icons",
    style: {
      fontSize: isScreenXs ? 16 : 24,
      color: themePalette.secondary.contrastText
    }
  }, variant.icon)), /*#__PURE__*/React__default.createElement(core.Box, {
    container: true,
    fullWidth: true,
    bgcolor: themePalette[variant.type].light,
    style: {
      borderRadius: 8,
      paddingTop: isScreenXs ? 10 : 24,
      paddingBottom: 10,
      width: "100%"
    }
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    container: true,
    justify: "center",
    spacing: 0
  }, /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true
  }, isScreenXs ? null : /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "subtitle2",
    align: "center",
    style: {
      color: themePalette.secondary.main,
      paddingInline: "20px",
      paddingTop: "5px"
    }
  }, /*#__PURE__*/React__default.createElement("strong", null, messageContent?.title)), /*#__PURE__*/React__default.createElement(core.Grid, {
    item: true,
    style: {
      paddingInline: "20px",
      paddingBlock: "13px",
      textAlign: "center"
    }
  }, /*#__PURE__*/React__default.createElement(core.Typography, {
    variant: "caption",
    align: "center",
    style: {
      color: themePalette.secondary.main
    }
  }, messageContent?.body))))));
}

var css$1 = "@font-face {\n  font-family: 'Raleway';\n  src: url(data:application/font-woff2;charset=utf-8;base64,) format(\"woff2\"), url(data:application/font-woff;charset=utf-8;base64,) format(\"woff\");\n  font-weight: 200; }\n\n@font-face {\n  font-family: 'Raleway';\n  src: url(data:application/font-woff2;charset=utf-8;base64,) format(\"woff2\"), url(data:application/font-woff;charset=utf-8;base64,) format(\"woff\");\n  font-weight: 600; }\n\n@font-face {\n  font-family: 'Raleway';\n  src: url(data:application/font-woff2;charset=utf-8;base64,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) format(\"woff2\"), url(data:application/font-woff;charset=utf-8;base64,) format(\"woff\");\n  font-weight: 800; }\n\n@font-face {\n  font-family: 'Raleway';\n  src: url(data:application/font-woff2;charset=utf-8;base64,) format(\"woff2\"), url(data:application/font-woff;charset=utf-8;base64,) format(\"woff\");\n  font-weight: 500; }\n\n@font-face {\n  font-family: 'Raleway';\n  src: url(data:application/font-woff2;charset=utf-8;base64,) format(\"woff2\"), url(data:application/font-woff;charset=utf-8;base64,) format(\"woff\");\n  font-weight: 300; }\n\n@font-face {\n  font-family: 'Raleway';\n  src: url(data:application/font-woff2;charset=utf-8;base64,) format(\"woff2\"), url(data:application/font-woff;charset=utf-8;base64,) format(\"woff\");\n  font-weight: bold; }\n\n@font-face {\n  font-family: 'Raleway';\n  src: url(data:application/font-woff2;charset=utf-8;base64,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) format(\"woff2\"), url(data:application/font-woff;charset=utf-8;base64,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) format(\"woff\");\n  font-weight: 900; }\n\n@font-face {\n  font-family: 'Raleway';\n  src: url(data:application/font-woff2;charset=utf-8;base64,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) format(\"woff2\"), url(data:application/font-woff;charset=utf-8;base64,) format(\"woff\");\n  font-weight: 100; }\n\n@font-face {\n  font-family: 'Raleway';\n  src: url(data:application/font-woff2;charset=utf-8;base64,) format(\"woff2\"), url(data:application/font-woff;charset=utf-8;base64,) format(\"woff\");\n  font-weight: normal; }\n";
styleInject(css$1);

var css$2 = "@font-face {\n    font-family: 'nemuru-icon-font';\n    src: url(data:font/truetype;charset=utf-8;base64,)\n        format('truetype');\n    font-weight: normal;\n    font-style: normal;\n    font-display: block;\n}\n";
styleInject(css$2);

exports.AccentIcon = AccentIcon;
exports.BackButton = BackButton;
exports.BarChart = BarChart;
exports.CircularProgressWithLabel = CircularProgressWithLabel;
exports.ConditionalWrapper = ConditionalWrapper;
exports.Header = Header;
exports.IconWithCircle = IconWithCircle;
exports.InformationMessage = InformationMessage;
exports.InputDate = InputDate;
exports.InputRange = InputRange;
exports.InputRangeMobile = InputRangeMobile;
exports.NemuruSnackbar = NemuruSnackbar;
exports.PasswordTextfield = PasswordTextfield;
exports.Pricing = Pricing;
exports.ResponsiveButton = ResponsiveButton;
exports.ResponsiveDialog = ResponsiveDialog;
exports.RichTextfield = RichTextfield;
exports.SingleLinearStatBar = SingleLinearStatBar;
exports.TableMui = TableMui;
exports.TextValue = TextValue;
exports.Themer = Themer;
exports.getIconName = getIconName;
